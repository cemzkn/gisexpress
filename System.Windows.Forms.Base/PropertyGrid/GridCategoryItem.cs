//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    partial class PropertyGridEdit
    {
        public class GridCategoryItem : GridPropertyItem
        {
            public GridCategoryItem(ListViewEdit.RowCollection owner, PropertyDescriptor property)
                : base(owner)
            {
                Property = property;
            }

            public override string Text
            {
                get { return Category; }
                set { }
            }

            public new bool Checked
            {
                get { return typeof(PropertyNode).GetPropertyValue<bool>(Property, "CategoryChecked"); }
                set { typeof(PropertyNode).SetProperty(Property, "CategoryChecked", value); }
            }

            public override bool IsExpandable
            {
                get { return true; }
            }

            protected override void OnExpand()
            {
                int n = Index + 1;

                foreach (GridItem item in Owner.GetAllRows().Reverse())
                {
                    if (item is GridCategoryItem)
                    {
                        continue;
                    }
                    else
                    {
                        if (item.Level == 0 && item.Category.EqualsIgnoreCase(Category))
                        {
                            item.Show(n);
                        }
                    }
                }
            }

            protected override void OnCollapse()
            {
                foreach (GridItem item in Owner.GetAllRows().ToArray())
                {
                    if (item is GridCategoryItem)
                    {
                        continue;
                    }
                    else
                    {
                        if (item.Level == 0 && item.Category.EqualsIgnoreCase(Category))
                        {
                            item.Collapse();
                            item.Hide();
                        }
                    }
                }
            }

            protected override void OnBeginEdit(Point point)
            {
                if (LabelEdit)
                {
                    base.OnBeginEdit(point);
                }
                else if (View.CheckBox)
                {
                    Checked = !Checked;
                    View.CategoryChanged.InvokeSafely(this);
                    View.Redraw();
                }
            }

            protected override void SetValue(string valueString, ISupportEditValue valueSupport)
            {
                if (LabelEdit)
                {
                    string valueOld = Category;

                    foreach(GridPropertyItem item in Owner.GetAllRows())
                    {
                        if (item.Category == valueOld)
                        {
                            ((IPropertyDescriptor)item.PropertyDescriptor).Category = valueString;
                        }
                    }
                }

                EditorObject = default(Control);
            }

            protected override void OnDraw(ListViewEditCellPaintingEventArgs e)
            {
                Rectangle bounds = e.Bounds;

                OnDrawBackground(e);

                if (e.Column.Index == 0)
                {
                    bounds.Offset(3, 0);
                    DrawExpandableIcon(e, bounds);
                    bounds.Offset(16, 0);

                    e.Graphics.DrawText(new DrawTextEventArgs
                    {
                        Text = Category,
                        Font = Owner.View.Font,
                        FontStyle = FontStyle.Bold,
                        Bounds = bounds,
                        ForeColor = ForeColor,
                        FormatFlags = TextFormatFlags.VerticalCenter
                    });
                }
                else if (View.CheckBox)
                {
                    bounds.Offset(bounds.Width, 0);
                    bounds.Offset(-18, 0);
                    e.Graphics.DrawCheckBox(bounds, true, Checked);
                }

                e.Graphics.DrawBorder(Border3DSide.Bottom, e.Bounds);
            }

            public override int GetHashCode()
            {
                return Category.GetHashCode();
            }
        }
    }
}