//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Linq;
using System.Resources;

namespace System.Windows.Forms
{
    partial class PropertyGridEdit
    {
        public abstract class GridItem : ListViewEdit.Row, ITypeDescriptorContext, IEditableObject, IDisposable
        {
            protected GridItem(ListViewEdit.RowCollection owner)
                : base(owner)
            {
                IsExpanded = true;

                DrawArgs = new DrawTextEventArgs
                {
                    Alignment = ContentAlignment.MiddleLeft
                };
            }

            protected bool ReadOnly;
            protected PropertyDescriptor Property;
            protected Control EditorObject;
            protected ISupportPaint PainterObject;
            protected DrawTextEventArgs DrawArgs;
            protected object ImageValue;
            protected bool LabelEdit;

            protected int LabelIndent = 16;

            public new GridItemCollection Owner
            {
                get { return base.Owner as GridItemCollection; }
                set { base.Owner = value; }
            }

            public IContainer Container
            {
                get { return Owner.View.Container; }
            }

            public GridView View
            {
                get { return Owner.View; }
            }

            public GridItem Parent
            {
                get;
                protected internal set;
            }

            public virtual string Category
            {
                get { return Property == null ? default(string) : Property.Category; }
            }

            public int Level
            {
                get;
                protected internal set;
            }

            public Color ForeColor
            {
                get { return Owner.View.ForeColor; }
            }

            public bool IsEditing
            {
                get;
                protected set;
            }

            public virtual bool IsReadOnly
            {
                get { return ReadOnly || (PropertyDescriptor.HasValue() && PropertyDescriptor.IsReadOnly); }
                set { ReadOnly = value; }
            }

            public bool IsExpanded
            {
                get;
                protected set;
            }

            public virtual bool IsExpandable
            {
                get { return ChildProperties.HasValue() && ChildProperties.Cast<PropertyDescriptor>().Count(item => item.IsBrowsable) > 0; }
            }

            public Control Editor
            {
                get
                {
                    if (EditorObject == null && PropertyDescriptor.HasValue())
                    {
                        EditorObject = GetEditor(Types.Control) as Control;

                        if (EditorObject.HasValue())
                        {
                            var edit = EditorObject as IPropertyEditor;

                            if (edit.HasValue())
                            {
                                edit.Initialize(PropertyDescriptor);
                            }

                            EditorObject.AutoSize = false;
                            EditorObject.Font = Owner.View.Font;
                            EditorObject.RemoveBorders(Border3DSide.Bottom);
                        }
                    }

                    return EditorObject;
                }
                set
                {
                    EditorObject = value;
                }
            }

            protected virtual object GetEditor(Type editorBaseType)
            {
                return default(object);
            }

            public ISupportPaint Painter
            {
                get { return PainterObject ?? (PainterObject = Editor as ISupportPaint); }
            }

            public object Instance
            {
                get { return this; }
            }

            public new Image Image
            {
                get
                {
                    if (ImageValue.IsNull())
                    {
                        var imgAttribute = Property.GetAttribute<PropertyImageAttribute>();

                        if (imgAttribute.HasValue())
                        {
                            ImageValue = imgAttribute.Image;
                        }
                        else
                        {
                            ImageValue = 0;
                        }
                    }

                    return base.Image ?? ImageValue as Image;
                }
                set
                {
                    base.Image = value;
                }
            }

            public PropertyDescriptor PropertyDescriptor
            {
                get
                {
                    return Property;
                }
                protected internal set
                {
                    Property = value;

                    if (Property.HasValue() && Property.Converter is ExpandableObjectConverter)
                    {
                        if ((Property.Converter as ExpandableObjectConverter).GetPropertiesSupported())
                        {
                            ChildProperties = Property.Converter.GetProperties(GetValue());
                        }
                    }
                }
            }

            public PropertyDescriptorCollection ChildProperties
            {
                get;
                protected set;
            }

            public void DrawBackground(ListViewEditCellPaintingEventArgs e)
            {
                OnDrawBackground(e);
            }

            public void Draw(ListViewEditCellPaintingEventArgs e)
            {
                OnDraw(e);
            }

            public void BeginEdit()
            {
                if (IsEditing)
                {
                    return;
                }

                IsEditing = true;
                OnBeginEdit(View.PointToClient(Cursor.Position));
            }

            public void BeginLabelEdit()
            {
                LabelEdit = true;
                BeginEdit();
            }

            public void CancelEdit()
            {
                if (IsEditing && Owner.HasValue())
                {
                    IsEditing = false;
                    Owner.View.SelectedItem = null;
                    OnEndEdit(false);
                }

                LabelEdit = false;
            }

            public void EndEdit()
            {
                if (IsEditing && Owner.HasValue())
                {
                    IsEditing = false;
                    Owner.View.SelectedItem = null;
                    OnEndEdit(true);
                    Owner.View.UpdateFocus();
                    Owner.View.Redraw();
                }

                LabelEdit = false;
            }

            public bool Expand()
            {
                if (IsExpandable && !IsExpanded)
                {
                    OnExpand();
                    IsExpanded = true;
                    Owner.View.UpdateScrolls();
                    return true;
                }

                return false;
            }

            public bool Collapse()
            {
                if (IsExpandable && IsExpanded)
                {
                    OnCollapse();
                    IsExpanded = false;
                    Owner.View.UpdateScrolls();
                    return true;
                }

                return false;
            }

            public object GetPropertyOwner()
            {
                if (Owner.View.Visible && PropertyDescriptor.HasValue())
                {
                    if (Parent.HasValue())
                    {
                        return Parent.GetValue();
                    }

                    return Owner.View.GetPropertyOwner(PropertyDescriptor);
                }

                return default(object);
            }

            public object GetValue()
            {
                if (Owner.View.Visible && PropertyDescriptor.HasValue())
                {
                    object component = GetPropertyOwner();

                    if (Parent.HasValue())
                    {
                        return PropertyDescriptor.GetValue(component);
                    }

                    return PropertyDescriptor.GetValue(component);
                }

                return default(object);
            }

            public void SetValue(object value)
            {
                if (PropertyDescriptor.HasValue())
                {
                    PropertyDescriptor.SetValue(Owner.View.GetPropertyOwner(PropertyDescriptor), value);
                }
            }

            protected virtual void SetValue(string valueString, ISupportEditValue valueSupport)
            {
                if (PropertyDescriptor.HasValue())
                {
                    var handled = default(bool);
                    var component = Owner.View.GetPropertyOwner(PropertyDescriptor);
                    var oldValue = PropertyDescriptor.GetValue(component);
                    var newValue = default(object);

                    if (LabelEdit)
                    {
                        EditorObject = default(Control);
                        ((IPropertyDescriptor)Property).DisplayName = valueString;
                    }
                    else
                    {
                        if (valueSupport.HasValue())
                        {
                            handled = true;
                            newValue = valueSupport.EditValue;
                        }
                        else if (PropertyDescriptor.Converter.CanConvertFrom(Types.String))
                        {
                            handled = true;
                            newValue = PropertyDescriptor.Converter.ConvertFrom(valueString);
                        }

                        if (handled && !Equals(oldValue, newValue))
                        {
                            if (newValue.IsNull() || Property.PropertyType.IsInstanceOfType(newValue))
                            {
                                Property.SetValue(component, newValue);
                                Owner.View.PerformItemValueChanged(this, oldValue, newValue);
                            }
                        }
                    }
                }
            }

            public void OnComponentChanged()
            {
            }

            public bool OnComponentChanging()
            {
                return false;
            }

            public object GetService(Type serviceType)
            {
                return default(object);
            }

            protected virtual void OnBeginEdit(Point point)
            {
            }

            protected virtual void OnEndEdit(bool acceptChanges)
            {
            }

            protected abstract void OnExpand();

            protected abstract void OnCollapse();

            protected virtual void OnDrawBackground(ListViewEditCellPaintingEventArgs e)
            {
                if (Owner.View.AllowSelection)
                {
                    return;
                }

                e.Graphics.FillRectangle(ApplicationAppereance.Brushes.Control, e.Bounds);
            }

            protected virtual void OnDraw(ListViewEditCellPaintingEventArgs e)
            {
                Rectangle bounds;

                if (e.Column.Index == 0)
                {
                    int imgWidth = 16;

                    bounds = e.Bounds;
                    bounds.Offset(Level * LabelIndent, 0);
                    bounds.Width -= Level * LabelIndent;

                    if (IsExpandable)
                    {
                        DrawExpandableIcon(e, bounds);
                    }
                    else if (Image.HasValue())
                    {
                        imgWidth = Image.Width;
                        DrawIcon(e, bounds, Image);
                    }

                    bounds.Offset(imgWidth + 3, 0);
                    bounds.Width -= (imgWidth + 3);

                    OnDrawLabel(e, bounds);
                    OnDrawBorders(e);
                }
                else if (e.Column.Index == 1)
                {
                    bounds = e.Bounds;

                    if (!IsEditing)
                    {
                        OnDrawValue(e, bounds);
                    }

                    OnDrawBorders(e);
                }
            }

            protected virtual void OnDrawBorders(ListViewEditCellPaintingEventArgs e)
            {
                if (e.Column.Index < Owner.View.Columns.Count - 1)
                {
                    e.Graphics.DrawBorder(View.CellBorderStyle, e.Bounds);
                }
                else
                {
                    e.Graphics.DrawBorder(View.CellBorderStyle & ~Border3DSide.Right, e.Bounds);
                }
            }

            public void DrawExpandableIcon(ListViewEditCellPaintingEventArgs e, Rectangle bounds)
            {
                DrawIcon(e, bounds, IsExpanded ? Images016.CollapseNode : Images016.ExpandNode);
            }

            public void DrawIcon(ListViewEditCellPaintingEventArgs e, Rectangle bounds, Image img)
            {
                OnDrawIcon(e, bounds, img);
            }

            protected virtual void OnDrawIcon(ListViewEditCellPaintingEventArgs e, Rectangle bounds, Image img)
            {
                OnDrawIcon(e, img, bounds.Left, bounds.Top + (Owner.View.RowHeight - img.Height) / 2);
            }

            protected virtual void OnDrawIcon(ListViewEditCellPaintingEventArgs e, Image img, int x, int y)
            {
                e.Graphics.DrawImage(img, x, y);
            }

            protected virtual void OnDrawLabel(ListViewEditCellPaintingEventArgs e, Rectangle bounds)
            {
                DrawArgs.Bounds = bounds;
                DrawArgs.Font = Owner.View.Font;
                DrawArgs.ForeColor = ForeColor;
                DrawArgs.Text = PropertyDescriptor.DisplayName;

                e.Graphics.DrawText(DrawArgs);

                if (IsReadOnly && !IsExpandable && Image.IsNull())
                {
                    e.Graphics.DrawImage(Images016.Lock, bounds.Left - 16, bounds.Top + (bounds.Height - 16) / 2 + 1);
                }
            }

            protected virtual void OnDrawValue(ListViewEditCellPaintingEventArgs e, Rectangle bounds)
            {
                if (Painter.HasValue())
                {
                    Painter.PaintValue(new PaintValueEventArgs(this, GetValue(), e.Graphics, bounds));
                }
                else
                {
                    DrawArgs.Text = Text;
                    DrawArgs.Bounds = bounds;
                    DrawArgs.Font = Owner.View.Font;
                    DrawArgs.ForeColor = ForeColor;

                    e.Graphics.DrawText(DrawArgs);
                }
            }

            public override string ToString()
            {
                return string.Empty;
            }

            public override void Dispose()
            {
                base.Dispose();

                Parent = null;
                DrawArgs = null;
                EditorObject = null;
                PainterObject = null;
                PropertyDescriptor = null;
            }
        }
    }
}