//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    public partial class PropertyGridEdit : BaseEdit
    {
        public PropertyGridEdit()
            : this(new GridView(false))
        {
        }

        protected PropertyGridEdit(GridView view)
        {
            Padding = new Padding(1);
            BorderStyle = Border3DSide.All;
            BackColor = ApplicationAppereance.Colors.Window;

            Controls.Add(View = view);
            Localization.Changed += OnLocalizationChanged;
            CreateInstance.InvokeSafely(this);
        }

        public static event Action<PropertyGridEdit> CreateInstance;

        public event EventHandler ItemClick
        {
            add { View.ItemClick += value; }
            remove { View.ItemClick -= value; }
        }

        public event EventHandler SelectedIndexChanged
        {
            add { View.SelectedIndexChanged += value; }
            remove { View.SelectedIndexChanged -= value; }
        }

        public event Action<GridItem, object, object> ItemValueChanged
        {
            add { View.ItemValueChanged += value; }
            remove { View.ItemValueChanged -= value; }
        }

        #region Converters & Editors

        static PropertyGridEdit()
        {
            ControlHelper.RegisterAll();
        }

        #endregion

        protected GridView View;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Func<string, object, object> EvalFunction
        {
            get { return View.EvalFunction; }
            set { View.EvalFunction = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int ItemHeight
        {
            get { return View.RowHeight; }
            set { View.RowHeight = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public object SelectedObject
        {
            get { return View.SelectedObject; }
            set { View.SelectedObject = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GridItem SelectedItem
        {
            get { return View.SelectedItem; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int SelectedIndex
        {
            get { return View.SelectedRow; }
            set
            {
                View.SelectedItem = default(GridItem);
                View.SelectedRow = value;
            }
        }

        public void Clear()
        {
            View.Clear();
        }

        public override void Refresh()
        {
            Refresh(false);
        }

        public void Refresh(bool clearCache)
        {
            View.Refresh(clearCache);
        }

        protected virtual void OnLocalizationChanged()
        {
            Refresh();
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if (OSEnvironment.IsUnix)
            {
                Refresh(false);
            }

            base.OnVisibleChanged(e);
        }

        protected override void OnSizeChanged(EventArgs e)
        {
            View.SetBounds(Padding.Left, Padding.Top, Width - Padding.Horizontal, Height - Padding.Vertical, BoundsSpecified.All);
            base.OnSizeChanged(e);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                Localization.Changed -= OnLocalizationChanged;
            }

            base.Dispose(disposing);
        }
    }
}
