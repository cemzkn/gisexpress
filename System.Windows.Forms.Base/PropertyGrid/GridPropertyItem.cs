//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    partial class PropertyGridEdit
    {
        public class GridPropertyItem : GridItem
        {
            public GridPropertyItem(ListViewEdit.RowCollection owner)
                : base(owner)
            {
            }

            public override string Text
            {
                get { return PropertyDescriptor.DisplayName; }
            }

            public override bool IsReadOnly
            {
                get { return base.IsReadOnly || Editor.IsNull(); }
                set { base.IsReadOnly = value; }
            }

            protected override object GetEditor(Type editorBaseType)
            {
                var edit = PropertyDescriptor.GetEditor(editorBaseType);
                var isDropDown = edit is PopupContainerEdit;

                if (edit.IsNull() || (!isDropDown && edit is TextEdit))
                {
                    if (PropertyDescriptor.Converter.GetStandardValuesSupported())
                    {
                        if (PropertyDescriptor.PropertyType.IsEnum)
                        {
                            edit = new EnumEdit(PropertyDescriptor.PropertyType);
                        }
                        else
                        {
                            edit = new DropDownEdit();
                        }
                    }
                }

                return edit;
            }

            protected override void OnBeginEdit(Point point)
            {
                if (Editor.HasValue())
                {
                    Rectangle bounds;
                    var valueSupport = default(ISupportEditValue);

                    if (LabelEdit)
                    {
                        bounds = View.GetItemLabelBounds(this);

                        EditorObject = new TextEdit
                        {
                            EditValue = Property.DisplayName,
                            Padding = new Padding(24, 3, 16, 3),
                            Width = bounds.Width,
                            Height = bounds.Height
                        };
                    }
                    else if (point.X >= View.LabelWidth)
                    {
                        bounds = View.GetItemValueBounds(this);
                        EditorObject = default(Control);
                        valueSupport = Editor as ISupportEditValue;
                    }
                    else
                    {
                        return;
                    }

                    var editorSize = new Size(bounds.Width, bounds.Height);

                    View.EditContainer.Controls.Clear();
                    View.EditContainer.Controls.Add(Editor);
                    View.EditContainer.SetBounds(bounds.Left, bounds.Top, bounds.Width, bounds.Height, BoundsSpecified.All);

                    UpdateEditorLayout(editorSize, bounds);

                    Editor.Enabled = true;
                    Editor.Dock = DockStyle.None;
                    Editor.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top | AnchorStyles.Bottom;

                    if (IsReadOnly)
                    {
                        if (!Editor.SetProperty("Locked", IsReadOnly))
                        {
                            Editor.Enabled = false;
                        }
                    }

                    View.EditContainer.Show();

                    if (valueSupport.HasValue())
                    {
                        var value = GetValue();

                        point.Offset(-bounds.Left, -bounds.Top);

                        valueSupport.EditValue = value;

                        if (!IsReadOnly)
                        {
                            valueSupport.Completed += EndEdit;
                            valueSupport.BeginEdit(point, this);
                        }

                        valueSupport.EditValue = valueSupport.EditValue ?? value;
                    }
                    else
                    {
                        ((BaseEdit)Editor).EditValue = Text;
                    }

                    UpdateEditorLayout(editorSize, bounds);

                    if (!IsReadOnly)
                    {
                        Editor.KeyDown += OnEditorKeyDown;
                        Editor.Leave += OnEditorLeave;
                    }

                    Editor.UpdateFocus();
                }
            }

            protected virtual void UpdateEditorLayout(Size size, Rectangle bounds)
            {
                Editor.MinimumSize = Size.Empty;
                Editor.MaximumSize = Size.Empty;

                Editor.SetBounds(0, 0, size.Width, size.Height, BoundsSpecified.All);

                if (Editor.Height > bounds.Height)
                {
                    Editor.Top = (bounds.Height - Editor.Height) / 2;
                }
            }

            protected override void OnEndEdit(bool acceptChanges)
            {
                if (Editor.HasValue())
                {
                    var valueSupport = Editor as ISupportEditValue;

                    if (valueSupport.HasValue())
                    {
                        valueSupport.Completed -= EndEdit;
                    }

                    Editor.KeyDown -= OnEditorKeyDown;
                    Editor.Leave -= OnEditorLeave;

                    View.EditContainer.Hide();
                    View.EditContainer.Controls.Clear();

                    if (acceptChanges)
                    {
                        SetValue(Editor.Text, valueSupport);
                    }
                }
            }

            protected override void OnExpand()
            {
                int n = Index + 1;

                foreach (GridItem item in Owner.GetAllRows().Reverse())
                {
                    if (item is GridPropertyItem && ChildProperties.IsContains(item.PropertyDescriptor))
                    {
                        item.Show(n);
                    }
                }
            }

            protected override void OnCollapse()
            {
                foreach (GridItem item in Owner.GetAllRows().ToArray())
                {
                    if (item is GridPropertyItem && ChildProperties.IsContains(item.PropertyDescriptor))
                    {
                        item.Collapse();
                        item.Hide();
                    }
                }
            }

            protected void OnEditorKeyDown(object sender, KeyEventArgs e)
            {
                switch (e.KeyCode)
                {
                    case Keys.Enter:
                        EndEdit();
                        break;
                    case Keys.Escape:
                        CancelEdit();
                        break;
                }
            }

            protected void OnEditorLeave(object sender, EventArgs e)
            {
                EndEdit();
            }

            public override int GetHashCode()
            {
                if (Property.HasValue())
                {
                    return string.Concat(Level, Property.Name).GetHashCode();
                }

                return base.GetHashCode();
            }

            public override void Dispose()
            {
                base.Dispose();

                if (Editor.HasValue())
                {
                    var valueSupport = Editor as ISupportEditValue;

                    if (valueSupport.HasValue())
                    {
                        valueSupport.Completed -= EndEdit;
                    }

                    Editor.Leave -= OnEditorLeave;
                    Editor.KeyDown -= OnEditorKeyDown;
                }

                ChildProperties = null;
            }
        }
    }
}