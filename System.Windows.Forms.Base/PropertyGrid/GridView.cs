//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    partial class PropertyGridEdit
    {
        public class GridView : ListViewEdit.ListView
        {
            public GridView(bool allowSelect)
            {
                RowHeight = 24;
                Margin = new Padding(0);
                Padding = new Padding(1, 1, 0, 0);
                BorderStyle = default(Border3DSide);
                FilterMode = ListViewFilterMode.Disabled;
                HeaderVisibilty = ListViewHeaderVisibilty.Hidden;

                if (AllowSelection = allowSelect)
                {
                    Columns.Add(ListViewEdit.DefaultColumn.Create());
                }
                else
                {
                    Columns.Add(SizeType.Percent, 50);
                    Columns.Add(SizeType.Percent, 50);

                    Controls.Add(EditContainer = new BaseEdit
                    {
                        Visible = false,
                        Margin = new Padding(0),
                        Padding = new Padding(0)
                    });
                }

                Localization.Changed += OnLocalizationChanged;
            }

            public Action<GridItem, string> ItemLabelChanged;
            public Action<GridItem, object, object> ItemValueChanged;
            public Action<GridCategoryItem> CategoryChanged;
            public Action<GridPropertyItem, int> PropertyIndexChanged;

            object Component;
            GridItem CurrentItem;
            internal BaseEdit EditContainer;
            internal Func<string, object, object> EvalFunction;

            public bool AllowSelection;
            public bool AllowLabelEdit;

            int DragIndex;
            int DragOverIndex;
            GridItem DragItem;

            public override Border3DSide CellBorderStyle
            {
                get { return base.CellBorderStyle; }
                set { base.CellBorderStyle = value; }
            }

            public new GridItemCollection Rows
            {
                get { return (GridItemCollection)base.Rows; }
            }

            public override int RowMinWidth
            {
                get { return 120; }
            }

            public GridItem SelectedItem
            {
                get
                {
                    if (AllowSelection && SelectedRow >= 0 && SelectedRow < Rows.Count)
                    {
                        return Rows[SelectedRow];
                    }

                    return CurrentItem;
                }
                protected internal set
                {
                    CurrentItem = value;
                    Redraw();
                }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public object SelectedObject
            {
                get { return Component; }
                set
                {
                    Component = value;
                    Refresh(true);
                }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public int LabelWidth
            {
                get { return Columns.First().Width; }
            }

            public Rectangle GetItemBounds(GridItem item)
            {
                return GetRowRectangle(Rows.IndexOf(item) - TopRowIndex);
            }

            public Rectangle GetItemLabelBounds(GridItem item)
            {
                var rect = GetItemBounds(item);

                rect.Width = LabelWidth;

                return rect;
            }

            public Rectangle GetItemValueBounds(GridPropertyItem item)
            {
                var rect = GetItemBounds(item);
                var bounds = Columns.Last().Bounds;

                rect.X = bounds.Left + 1;
                rect.Width = bounds.Width - 1;

                return rect;
            }

            public void BeginEdit(GridItem item)
            {
                EndEdit();
                SelectedItem = item;
                SelectedItem.BeginEdit();
            }

            public void CancelEdit()
            {
                if (SelectedItem.HasValue())
                {
                    SelectedItem.CancelEdit();
                    SelectedItem = null;
                }
            }

            public void EndEdit()
            {
                if (SelectedItem.HasValue())
                {
                    SelectedItem.EndEdit();
                    SelectedItem = null;
                }
            }

            public void Clear()
            {
                Rows.Clear();
                Component = null;
                Refresh(true);
            }

            public override void Refresh()
            {
                Refresh(false);
            }

            public void Refresh(bool clearCache)
            {
                int row = SelectedRow;

                if (clearCache)
                {
                    EndEdit();

                    Rows.Clear();
                    Rows.Add(TypeDescriptor.GetProperties(SelectedObject));

                    UpdateScrolls();
                    Properties.HasChanges = true;
                }

                Redraw();
                Select(row);
            }

            internal void PerformItemValueChanged(GridItem item, object oldValue, object newValue)
            {
                ItemValueChanged.InvokeSafely(item, oldValue, newValue);
            }

            protected override ListViewEdit.IRowList OnCreateRowCollection()
            {
                return new GridItemCollection(this);
            }

            protected override void OnPaintCell(ListViewEditCellPaintingEventArgs e)
            {
                try
                {
                    if (Visible && !Disposing && e.Row.Index >= 0)
                    {
                        var item = e.Row as GridItem;

                        if (e.Column.Index == 0)
                        {
                            item.DrawBackground(e);
                        }

                        if (AllowSelection)
                        {
                            if (e.Row.Selected)
                            {
                                OnPaintSelectedRow(e);
                            }
                        }

                        item.Draw(e);
                    }
                }
                catch (Exception error)
                {
                    error.Print();
                }
            }

            protected override void OnPaintSelectedRow(ListViewEditCellPaintingEventArgs e)
            {
                if (AllowSelection)
                {
                    base.OnPaintSelectedRow(e);
                }
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                base.OnMouseDown(e);

                if (AllowDrop && e.Button == MouseButtons.Left && e.X < LabelWidth && !SelectedItem.IsExpandable)
                {
                    DragItem = SelectedItem;
                    DragIndex = DragItem.Index;
                    Items.ForEach(r => r.DropIndex = r.Index);
                    DoDragDrop(DragItem, DragDropEffects.Move);
                }
            }

            protected override void OnMouseUp(MouseEventArgs e)
            {
                base.OnMouseUp(e);

                if (SelectedRow >= 0)
                {
                    Rectangle rect = GetRowRectangle(SelectedRow - TopRowIndex);

                    if (rect.Contains(e.Location))
                    {
                        GridItem item = Rows[SelectedRow];

                        if (e.X < LabelWidth)
                        {
                            OnItemLabelClick(e, item);
                        }
                        else
                        {
                            OnItemValueClick(e, item);
                        }
                    }
                }
            }

            protected override void OnDragEnter(DragEventArgs e)
            {
                if (e.Data.GetDataPresent(typeof(GridPropertyItem).FullName))
                {
                    e.Effect = DragDropEffects.Move;
                }
                else
                {
                    e.Effect = DragDropEffects.None;
                }

                base.OnDragEnter(e);
            }

            protected override void OnDragOver(DragEventArgs e)
            {
                if (e.Effect == DragDropEffects.Move)
                {
                    DragItem.DropIndex = GetRowIndex(PointToClient(new Point(0, e.Y)).Y);

                    if (DragItem.DropIndex == DragOverIndex)
                    {
                        return;
                    }

                    DragOverIndex = DragItem.DropIndex;
                    Items.Sort(DropComparer.Default);
                    SelectedRow = Items.IndexOf(DragItem);
                }

                base.OnDragOver(e);
            }

            protected override void OnDragDrop(DragEventArgs e)
            {
                if (e.AllowedEffect == DragDropEffects.Move)
                {
                    if (DragItem.DropIndex == DragIndex)
                    {
                        return;
                    }

                    PropertyIndexChanged.InvokeSafely(DragItem, Items.OfType<GridItem>().SkipWhile(r => r.IsExpandable).ToList().IndexOf(DragItem));
                }

                DragItem = null;
                base.OnDragDrop(e);
            }

            //protected override void OnDragLeave(EventArgs e)
            //{
            //    DragItem.DropIndex = DragIndex;
            //    Items.Sort(DropComparer.Default);
            //    Refresh();

            //    base.OnDragLeave(e);
            //}

            protected override void OnKeyUp(KeyEventArgs e)
            {
                base.OnKeyUp(e);

                if (SelectedItem == null)
                {
                    return;
                }

                if (AllowLabelEdit && e.KeyCode == Keys.F2)
                {
                    SelectedItem.BeginLabelEdit();
                }
                else if (SelectedItem.IsExpandable)
                {
                    switch (e.KeyCode)
                    {
                        case Keys.Left:
                            SelectedItem.Collapse();
                            return;

                        case Keys.Right:
                            SelectedItem.Expand();
                            return;
                    }
                }
            }

            protected void OnLocalizationChanged()
            {
                Refresh(true);
            }

            protected override void OnSizeChanged(EventArgs e)
            {
                if (!IsInitializing)
                {
                    EndEdit();
                }

                base.OnSizeChanged(e);
            }

            protected virtual void OnItemLabelClick(MouseEventArgs e, GridItem item)
            {
                EndEdit();

                if (e.Button == MouseButtons.Left)
                {
                    if (item.IsExpandable)
                    {
                        if (item.IsExpanded)
                        {
                            item.Collapse();
                        }
                        else
                        {
                            item.Expand();
                        }
                    }
                }
            }

            protected virtual void OnItemValueClick(MouseEventArgs e, GridItem item)
            {
                if (e.Button == MouseButtons.Left)
                {
                    BeginEdit(item);
                }
            }

            protected internal object GetPropertyOwner(PropertyDescriptor property)
            {
                var e = Component as ICustomTypeDescriptor;

                if (e.HasValue())
                {
                    return e.GetPropertyOwner(property) ?? Component;
                }

                return Component;
            }

            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);

                EndEdit();

                if (disposing)
                {
                    Localization.Changed -= OnLocalizationChanged;
                    EditContainer.DisposeSafely();
                }
            }

            public class DropComparer : IComparer<ListViewEdit.Row>
            {
                public static readonly DropComparer Default = new DropComparer();

                public int Compare(ListViewEdit.Row x, ListViewEdit.Row y)
                {
                    return x.DropIndex.CompareTo(y.DropIndex);
                }
            }
        }
    }
}