//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    partial class ListViewEdit
    {
        public class ListComponent : IRowList, IDisposable
        {
            public ListComponent(ListView view, object component)
            {
                View = view;
                Component = component;
                Current = new Row(this);
                DummyRows = new HashSet<int>();
                SelectedRows = new HashSet<int>();
                CheckedRows = new HashSet<int>();
            }

            public event ListChangedEventHandler ListChanged;

            protected IList List;
            protected IImagedList ImageList;
            protected IBindingList BindingList;
            protected INotifyCollectionChanged NotifyChanged;

            protected Row Current;
            protected PropertyDescriptorCollection Fields;

            protected int? ExpandedRow;
            protected bool SelectedAll;
            protected ISet<int> DummyRows;
            protected ISet<int> SelectedRows;
            protected ISet<int> CheckedRows;
            protected TabEdit ChildGridContainer;

            public string Name
            {
                get;
                protected set;
            }

            public ListView View
            {
                get;
                protected set;
            }

            public object Component
            {
                get;
                protected set;
            }

            public int Count
            {
                get
                {
                    if (Items.IsNull())
                    {
                        return 0;
                    }

                    return Items.Count + DummyRows.Count;
                }
            }

            public PropertyDescriptorCollection Properties
            {
                get { return Fields ?? (Fields = GetProperties(Component)); }
            }

            public IList Items
            {
                get
                {
                    if (List.IsNull())
                    {
                        ISupportDispatcher dispatcherSupport;

                        if (NotifyChanged.HasValue())
                        {
                            NotifyChanged.CollectionChanged -= OnCollectionChanged;
                        }

                        List = GetList(Component);
                        ImageList = List as IImagedList;
                        NotifyChanged = List as INotifyCollectionChanged;

                        if ((dispatcherSupport = List as ISupportDispatcher).HasValue())
                        {
                            dispatcherSupport.Dispatcher = View;
                        }

                        if (NotifyChanged.HasValue())
                        {
                            NotifyChanged.CollectionChanged += OnCollectionChanged;
                        }
                    }

                    return List;
                }
            }

            public IImagedList Images
            {
                get { return ImageList; }
            }

            public Row New(object value)
            {
                throw new NotImplementedException();
            }

            public Row New(object value, string text)
            {
                throw new NotImplementedException();
            }

            public Row New(object value, string text, Image image)
            {
                throw new NotImplementedException();
            }

            public void Add(Row item)
            {
                throw new NotImplementedException();
            }

            public Row Add(object value)
            {
                throw new NotImplementedException();
            }

            public Row Add(object value, string text)
            {
                throw new NotImplementedException();
            }

            public Row Add(object value, string text, Image image)
            {
                throw new NotImplementedException();
            }

            public bool Remove(object value)
            {
                throw new NotImplementedException();
            }

            public void RemoveSelectedRows()
            {
                foreach (int row in SelectedRows)
                {
                    List.RemoveAt(row);
                }
            }

            public Row this[int index]
            {
                get
                {
                    if (DummyRows.Contains(index))
                    {
                        return default(Row);
                    }
                    else
                    {
                        if (ExpandedRow.HasValue && index > ExpandedRow.Value)
                        {
                            index -= DummyRows.Count;
                        }

                        Current.Value = Items[index];
                        Current.Image = default(Image);

                        if (Images.HasValue())
                        {
                            Current.Image = Images.GetImage(index);
                        }
                    }

                    return Current;
                }
                set
                {
                    throw new NotImplementedException();
                }
            }

            public void SelectAll()
            {
                SelectedAll = true;
            }

            public void ClearSelection()
            {
                SelectedAll = false;
                SelectedRows.Clear();
            }

            public Row FindByKey(object key)
            {
                return default(Row);
            }

            public int IndexOfKey(object value)
            {
                return Items.IndexOf(value);
            }

            public void ShowAll()
            {
            }

            public void Show(Row row, int index)
            {
                throw new NotImplementedException();
            }

            public void HideAll()
            {
                throw new NotImplementedException();
            }

            public void Hide(Row row)
            {
                throw new NotImplementedException();
            }

            public bool IsVisible(Row row)
            {
                throw new NotImplementedException();
            }

            public bool IsSelected(Row row)
            {
                return SelectedAll || SelectedRows.Contains(row.Index);
            }

            public bool IsChecked()
            {
                throw new NotImplementedException();
            }

            public bool IsChecked(Row row)
            {
                return CheckedRows.Contains(row.Index);
            }

            public void SetChecked(bool value)
            {
                throw new NotImplementedException();
            }

            public void SetChecked(Row row, bool value)
            {
                if (value)
                {
                    CheckedRows.Add(row.Index);
                }
                else
                {
                    CheckedRows.Remove(row.Index);
                }
            }

            public void SetSelected(Row row, bool value)
            {
                if (value)
                {
                    SelectedRows.Add(row.Index);
                }
                else
                {
                    SelectedRows.Remove(row.Index);
                }
            }

            public bool SupportsSorting
            {
                get { return BindingList.HasValue() && BindingList.SupportsSorting; }
            }

            public bool SupportsFiltering
            {
                get { return false; }
            }

            public void Sort()
            {
                throw new NotImplementedException();
            }

            public void Sort(IComparer<Row> comparison)
            {
                throw new NotImplementedException();
            }

            public void ApplyFilter(string filterString)
            {
            }

            public IEnumerable<Row> GetCheckedRows()
            {
                foreach (int n in CheckedRows)
                {
                    yield return this[n];
                }
            }

            public IEnumerable<Row> GetSelectedRows()
            {
                foreach (int n in SelectedRows)
                {
                    yield return this[n];
                }
            }

            public IEnumerable<Row> GetAllRows()
            {
                throw new NotImplementedException();
            }

            public int IndexOf(Row item)
            {
                return Items.IndexOf(item.Value);
            }

            public void Insert(int index, Row item)
            {
                Items.Insert(index, item);
            }

            public void RemoveAt(int index)
            {
                throw new NotImplementedException();
            }

            public void Clear()
            {
                throw new NotImplementedException();
            }

            public bool Contains(Row item)
            {
                throw new NotImplementedException();
            }

            public void CopyTo(Row[] array, int arrayIndex)
            {
                throw new NotImplementedException();
            }

            public bool IsReadOnly
            {
                get { throw new NotImplementedException(); }
            }

            public bool Remove(Row item)
            {
                throw new NotImplementedException();
            }

            protected virtual PropertyDescriptorCollection GetProperties(object component)
            {
                var list = GetList(component);
                var typedList = list as ITypedList;

                if (typedList.HasValue())
                {
                    var listAccessors = default(PropertyDescriptor[]);

                    Name = typedList.GetListName(listAccessors);

                    return typedList.GetItemProperties(listAccessors);
                }

                return TypeDescriptor.GetProperties(component);
            }

            protected virtual IList GetList(object component)
            {
                var source = component as IListSource;

                if (source.HasValue())
                {
                    return source.GetList();
                }

                return component as IList;
            }

            protected internal bool IsExpanded(int row)
            {
                return ExpandedRow.HasValue && ExpandedRow.Value == row;
            }

            protected internal void ExpandRow(int row)
            {
                int begin = row + 1;
                int end = begin + 10;

                CollapseRow();
                ExpandedRow = begin - 1;

                for (int n = begin; n < end; n++)
                {
                    DummyRows.Add(n);
                }

                SetChildGridBounds(row);
                ChildGridContainer.Visible = true;

                View.UpdateScrolls();
            }

            protected internal bool CollapseRow()
            {
                if (ExpandedRow.HasValue)
                {
                    CollapseRow(ExpandedRow.Value);
                    return true;
                }

                return false;
            }

            protected internal void CollapseRow(int row)
            {
                DummyRows.Clear();
                ExpandedRow = null;
                ChildGridContainer.Visible = false;

                View.UpdateScrolls();
            }

            protected void SetChildGridBounds(int row)
            {
                Rectangle bounds = View.GetRowRectangle(row - View.TopRowIndex);

                if (ChildGridContainer == null)
                {
                    ChildGridContainer = new TabEdit
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Left,
                        MaximumSize = new Size(Screen.PrimaryScreen.WorkingArea.Width, View.RowHeight * 10),
                    };

                    View.Controls.Add(ChildGridContainer);
                }

                ChildGridContainer.ClearPages();

                foreach (object view in View.GetChildViews(row))
                {
                    ChildGridContainer.AddPage(new GridViewEdit
                    {
                        DataSource = view,
                        Padding = new Padding(0),
                    });
                }

                ChildGridContainer.SetBounds(bounds.Left, bounds.Bottom, bounds.Width, View.RowHeight * 10);
            }

            protected virtual void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
            {
                if (ListChanged.HasValue())
                {
                    ListChanged(sender, e.ToListChangedEventArgs());
                }
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                return GetEnumerator();
            }

            public IEnumerator<Row> GetEnumerator()
            {
                for (int n = 0; n < Items.Count; n++)
                {
                    yield return this[n];
                }
            }

            public void Dispose()
            {
                (List as IDisposable).DisposeSafely();

                Fields = null;
                List = null;
                Component = null;

                GC.SuppressFinalize(this);
            }
        }
    }
}