//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Runtime;

namespace System.Windows.Forms
{
    partial class ListViewEdit
    {
        public class RowCollection : Collection<Row>, IRowList, IDisposable
        {
            public RowCollection(ListView view)
                : this(view, new List<Row>())
            {
            }

            RowCollection(ListView view, List<Row> rows)
                : base(rows)
            {
                View = view;
                HiddenRows = new HashSet<Row>();
                CheckedRows = new HashSet<Row>();
                SelectedRows = new HashSet<Row>();
            }

            public event ListChangedEventHandler ListChanged;

            public ListView View
            {
                get;
                protected set;
            }

            protected HashSet<Row> HiddenRows;
            protected HashSet<Row> CheckedRows;
            protected HashSet<Row> SelectedRows;

            public Row New(object value)
            {
                return OnCreateItem(value, default(string), default(Image));
            }

            public Row New(object value, string text)
            {
                return OnCreateItem(value, text, default(Image));
            }

            public Row New(object value, string text, Image image)
            {
                return OnCreateItem(value, text, image);
            }

            public Row Add(object value)
            {
                var r = value as Row;

                if (r.HasValue())
                {
                    base.Add(r);
                }
                else
                {
                    base.Add(r = New(value));
                }

                return r;
            }

            public Row Add(object value, string text)
            {
                return Add(value, text, default(Image));
            }

            public Row Add(object value, string text, Image image)
            {
                return Add(New(value, text, image));
            }

            public void AddRange(Array array)
            {
                foreach (object value in array)
                {
                    Add(value);
                }

                if (!View.IsInitializing)
                {
                    View.Properties.HasChanges = true;
                }
            }

            public bool Remove(object value)
            {
                var row = value as Row ?? FindByKey(value);

                if (row.HasValue())
                {
                    if (base.Remove(row))
                    {
                        if (!View.IsInitializing)
                        {
                            View.Properties.HasChanges = true;
                        }

                        return true;
                    }
                }

                return false;
            }

            public void RemoveSelectedRows()
            {
                using (View.Begin())
                {
                    foreach (Row row in SelectedRows)
                    {
                        if (base.Remove(row))
                        {
                            View.Properties.HasChanges = true;
                        }
                    }
                }
            }

            public Row FindByKey(object key)
            {
                return Items.FirstOrDefault(r => Equals(r.Value, key));
            }

            public int IndexOfKey(object key)
            {
                Row r = FindByKey(key);

                if (r.HasValue())
                {
                    return r.Index;
                }

                return -1;
            }

            public void SelectAll()
            {
                SelectedRows = new HashSet<Row>(this);
            }

            public void ClearSelection()
            {
                SelectedRows.Clear();
            }

            public bool IsSelected(Row row)
            {
                return SelectedRows.Contains(row) || (View.SelectedRow >= 0 && View.SelectedRow == IndexOf(row));
            }

            public void ShowAll()
            {
                if (HiddenRows.Count > 0)
                {
                    using (View.Begin())
                    {
                        IEnumerator<Row> e = GetAllRows().ToList().GetEnumerator();

                        HideAll();

                        while (e.MoveNext())
                        {
                            e.Current.Show();
                        }
                    }
                }
            }

            public void Show(Row row, int index)
            {
                using (View.Begin())
                {
                    if (HiddenRows.Remove(row))
                    {
                        Insert(index, row);
                    }
                }
            }

            public void HideAll()
            {
                using (View.Begin())
                {
                    while (Count > 0)
                    {
                        Row r = this[0];

                        if (Remove(r))
                        {
                            HiddenRows.Add(r);
                        }
                    }
                }
            }

            public void Hide(Row row)
            {
                using (View.Begin())
                {
                    if (Remove(row))
                    {
                        HiddenRows.Add(row);
                    }
                }
            }

            public bool IsVisible(Row row)
            {
                return HiddenRows.Contains(row);
            }

            public bool IsChecked()
            {
                return CheckedRows.Count == Count;
            }

            public bool IsChecked(Row row)
            {
                return CheckedRows.Contains(row);
            }

            public void SetChecked(bool value)
            {
                if (value)
                {
                    CheckedRows = new HashSet<Row>(this);
                }
                else
                {
                    CheckedRows.Clear();
                }
            }

            public void SetChecked(Row row, bool value)
            {
                if (value)
                {
                    CheckedRows.Add(row);
                }
                else
                {
                    CheckedRows.Remove(row);
                }
            }

            public void SetSelected(Row row, bool value)
            {
                if (value)
                {
                    SelectedRows.Add(row);
                }
                else
                {
                    SelectedRows.Remove(row);
                }
            }

            public bool SupportsSorting
            {
                get { return true; }
            }

            public bool SupportsFiltering
            {
                get { return true; }
            }

            public void Sort()
            {
                ((List<Row>)Items).Sort(RowComparer.Default);
            }

            public void Sort(IComparer<Row> comparison)
            {
                ((List<Row>)Items).Sort(comparison);
            }

            public void ApplyFilter(string filterString)
            {
                IEnumerator<Row> e = GetAllRows().ToList().GetEnumerator();

                if (e.MoveNext())
                {
                    Func<object, object> func = ExpressionOperator.Parse(filterString).CreateDelegate(e.Current);

                    HideAll();

                    while (true)
                    {
                        if (Equals(func(e.Current), true))
                        {
                            e.Current.Show();
                        }
                        else
                        {
                            e.Current.Hide();
                        }

                        if (e.MoveNext())
                        {
                            continue;
                        }
                        else
                        {
                            break;
                        }
                    }

                    if (Count == 0 && HiddenRows.Count > 0)
                    {
                        HiddenRows.OrderBy(item => item.Ordinal).First().Show();
                    }
                }
            }

            public IEnumerable<Row> GetCheckedRows()
            {
                return CheckedRows;
            }

            public IEnumerable<Row> GetSelectedRows()
            {
                return SelectedRows;
            }

            protected override void ClearItems()
            {
                View.Properties.HasChanges = Count > 0;

                HiddenRows.Clear();
                CheckedRows.Clear();
                SelectedRows.Clear();

                base.ClearItems();

                if (View.Disposing)
                {
                    return;
                }

                OnListChanged(ListChangedType.Reset, 0);
            }

            protected override void InsertItem(int index, Row item)
            {
                if (View.Disposing)
                {
                    return;
                }

                item.Owner = this;
                base.InsertItem(index, item);
                item.Ordinal = item.Ordinal ?? index;
                OnListChanged(ListChangedType.ItemAdded, index);
            }

            protected override void RemoveItem(int index)
            {
                if (View.Disposing)
                {
                    return;
                }

                base.RemoveItem(index);
                OnListChanged(ListChangedType.ItemDeleted, index);
            }

            protected override void SetItem(int index, Row item)
            {
                if (View.Disposing)
                {
                    return;
                }

                base.SetItem(index, item);
                OnListChanged(ListChangedType.ItemChanged, index);
            }

            protected virtual Row OnCreateItem(object value, string text, Image image)
            {
                return new Row(this)
                {
                    Value = value,
                    Text = text,
                    Image = image
                };
            }

            protected virtual void OnListChanged(ListChangedType changedType, int index)
            {
                if (View.IsInitializing)
                {
                    return;
                }

                View.Properties.HasChanges = true;

                if (View.SelectedRow != -1)
                {
                    switch (changedType)
                    {
                        case ListChangedType.Reset:
                            View.SelectedRow = -1;
                            break;
                        case ListChangedType.ItemDeleted:
                            View.SelectedRow = index - 1;
                            break;
                    }
                }

                if (ListChanged.HasValue())
                {
                    ListChanged(this, new ListChangedEventArgs(changedType, index));
                }
            }

            public IEnumerable<Row> GetAllRows()
            {
                return this.Concat(HiddenRows).OrderBy(item => item.Ordinal);
            }

            public void Dispose()
            {
                View = null;
                GC.SuppressFinalize(this);
            }
        }
    }
}