//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Resources;

namespace System.Windows.Forms
{
    partial class ListViewEdit
    {
        public class Column : LabelEdit, ISupportInitialize, IComparer<Row>, IKeyedObject
        {
            public Column()
                : this(SizeType.AutoSize, 0)
            {
            }

            public Column(SizeType sizeType, float width)
            {
                using (this.Begin())
                {
                    AutoSize = false;
                    AllowResize = true;
                    Dock = DockStyle.Fill;
                    Margin = new Padding(0);
                    Padding = new Padding(0);

                    if (sizeType != SizeType.Percent)
                    {
                        MinimumSize = new Size(Math.Max(24, (int)width), 0);
                    }
                }

                Properties["CurrentWidth"] = width;
                Properties["CurrentSizeType"] = sizeType;

                DrawArgs = new DrawTextEventArgs { FormatFlags = TextFormatFlags.VerticalCenter | TextFormatFlags.EndEllipsis };
            }

            protected int Init;
            protected new DrawTextEventArgs DrawArgs;
            protected new internal ColumnCollection Owner;

            public event Func<Row, string> CellDisplayText;

            public void BeginInit()
            {
                Init++;
            }

            public void EndInit()
            {
                Init--;
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public virtual bool AllowSort
            {
                get { return Owner.View.Items.SupportsSorting && (bool)Properties["AllowSort"]; }
                set { Properties["AllowSort"] = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public virtual bool CanFilter
            {
                get { return AllowFilter; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public virtual bool AllowFilter
            {
                get { return Owner.View.Items.SupportsFiltering && (bool)Properties["AllowFilter"]; }
                set { Properties["AllowFilter"] = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public virtual bool AllowResize
            {
                get;
                set;
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public virtual bool Browsable
            {
                get { return (bool)Properties["Browsable", true]; }
                set { Properties["Browsable"] = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public Color CellColor
            {
                get;
                set;
            }

            public override Border3DSide BorderStyle
            {
                get { return Border3DSide.Right; }
                set { }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public SortOrder SortOrder
            {
                get;
                set;
            }

            public bool IsExpandable
            {
                get;
                protected set;
            }

            public virtual Type PropertyType
            {
                get { return (EditValueObject ?? string.Empty).GetType(); }
            }

            public override string Text
            {
                get { return base.Text; }
                set
                {
                    if (!Equals(base.Text, value))
                    {
                        base.Text = value;

                        if (Owner.HasValue())
                        {
                            Owner.View.Properties.HasChanges = true;
                        }
                    }
                }
            }

            public int Index
            {
                get { return Owner.IndexOf(this); }
            }

            public virtual ColumnStyle Style
            {
                get
                {
                    var panel = Parent as TableLayoutPanel;

                    if (panel.HasValue())
                    {
                        TableLayoutPanelCellPosition position = panel.GetPositionFromControl(this);

                        if (position.HasValue() && position.Column >= 0)
                        {
                            return panel.ColumnStyles[position.Column];
                        }
                    }

                    return default(ColumnStyle);
                }
            }

            public SizeType SizeType
            {
                get { return (SizeType)Properties["CurrentSizeType", SizeType.AutoSize]; }
                set
                {
                    if (!Equals(SizeType, value))
                    {
                        Properties["CurrentSizeType"] = value;
                        Owner.View.Properties.HasChanges = true;
                    }
                }
            }

            public float SizeValue
            {
                get { return (float)Properties["CurrentWidth",0F]; }
                set
                {
                    if (!Equals(SizeValue, value))
                    {
                        Properties["CurrentWidth"] = value;

                        if (SizeType == SizeType.Absolute)
                        {
                            Width = (int)value;
                        }

                        Owner.View.Properties.HasChanges = true;
                    }
                }
            }

            public int MinWidth
            {
                get { return MinimumSize.Width; }
                set
                {
                    if (!Equals(MinWidth, value))
                    {
                        using (this.Begin())
                        {
                            MinimumSize = new Size(value, MinimumSize.Height);

                            if (Owner.HasValue())
                            {
                                Owner.View.Properties.HasChanges = true;
                            }
                        }
                    }
                }
            }

            public int MaxWidth
            {
                get { return MaximumSize.Width; }
                set
                {
                    if (!Equals(MaxWidth, value))
                    {
                        using (this.Begin())
                        {
                            if (MinimumSize.Width > value)
                            {
                                MinWidth = value;
                            }

                            MaximumSize = new Size(value, MaximumSize.Height);
                            Owner.View.Properties.HasChanges = true;
                        }
                    }
                }
            }

            public int VisibleIndex
            {
                get { return (int)Properties["VisibleIndex", Index]; }
                set
                {
                    if (!Equals(VisibleIndex, value))
                    {
                        Properties["VisibleIndex"] = value;
                        Owner.View.Properties.HasChanges = true;
                    }
                }
            }

            protected override void OnMouseDown(MouseEventArgs e)
            {
                if (e.Button == MouseButtons.Left)
                {
                    if (AllowSort)
                    {
                        switch (SortOrder)
                        {
                            case SortOrder.Ascending:
                                SortOrder = SortOrder.Descending;
                                break;
                            case SortOrder.None:
                            case SortOrder.Descending:
                                SortOrder = SortOrder.Ascending;
                                break;
                        }

                        Invalidate(false);
                        Owner.View.Items.Sort(this);
                        Owner.View.Invalidate(false);
                    }
                }

                base.OnMouseDown(e);
            }

            protected internal virtual bool OnCellClick(Point point, int row)
            {
                if (GlyphButtons.Count > 0)
                {
                }

                return false;
            }

            protected override void OnPaintValue(Graphics g, Rectangle bounds, Image image, object value)
            {
                var r = value as Row;

                if (r.HasValue())
                {
                    OnPaintCell(g, bounds, r);
                    OnPaintCellBorders(g, bounds, r);
                }
                else
                {
                    OnPaintCaption(g, bounds, image);
                }
            }

            protected virtual void OnPaintCaption(Graphics g, Rectangle bounds, Image image)
            {
                bounds.Offset(3, 0);

                DrawArgs.Text = Text;
                DrawArgs.Font = Font;
                DrawArgs.Bounds = bounds;
                DrawArgs.ForeColor = ForeColor;

                g.DrawText(DrawArgs);

                bounds.Offset(-3, 0);

                if (image.HasValue())
                {
                    g.DrawImage(image, bounds.Right - 24, bounds.Top + bounds.Height / 2 - 8);
                }

                if (SortOrder != SortOrder.None)
                {
                    g.DrawImage(SortOrder == SortOrder.Ascending ? Images016.SortAscending : Images016.SortDescending, bounds.Right - 24, bounds.Top + bounds.Height / 2 - 8);
                }
            }

            protected virtual void OnPaintCell(Graphics g, Rectangle bounds, Row row)
            {
                DrawArgs.Text = DisplayText(row);
                DrawArgs.Font = Font;
                DrawArgs.Bounds = bounds;
                DrawArgs.ForeColor = ForeColor;

                g.DrawText(DrawArgs);
            }

            protected virtual void OnPaintCellBorders(Graphics g, Rectangle bounds, Row row)
            {
                if (Owner.View.CellBorderColor.IsEmpty)
                {
                    return;
                }

                bounds.Offset(-1, 0);
                g.DrawBorder(Border3DSide.Bottom | Border3DSide.Right, Owner.View.CellBorderColor, bounds);
                bounds.Offset(1, 0);
            }

            protected override Size OnCalculateSize()
            {
                Size newSize = base.OnCalculateSize();
                int newWidth = newSize.Width + Math.Max(Padding.Horizontal, 6);

                if (MinWidth > 0)
                {
                    newWidth = Math.Max(newWidth, MinWidth);
                }

                if (MaxWidth > 0)
                {
                    newWidth = Math.Min(newWidth, MaxWidth);
                }

                newSize.Width = newWidth;

                return newSize;
            }

            public string DisplayText(Row row)
            {
                if (CellDisplayText.HasValue())
                {
                    return CellDisplayText(row);
                }

                return OnDisplayText(row);
            }

            public virtual string OnDisplayText(Row row)
            {
                return row.Text;
            }

            public virtual object GetValue(Row row)
            {
                return row.Text;
            }

            public int Compare(Row row, Row other)
            {
                int n = OnCompareRow(row, other);

                if (SortOrder == SortOrder.Descending)
                {
                    return -n;
                }

                return n;
            }

            protected virtual int OnCompareRow(Row row, Row other)
            {
                return OnCompareValue(row.Value, other.Value);
            }

            protected virtual int OnCompareValue(object value, object other)
            {
                var a = value as IComparable;
                var b = other as IComparable;

                if (a.HasValue() && b.HasValue())
                {
                    return a.CompareTo(b);
                }

                return StringComparer.InvariantCultureIgnoreCase.Compare((value ?? string.Empty).ToString(), (other ?? string.Empty).ToString());
            }

            protected override bool OnUpdateLayout(bool performLayout)
            {
                if (Owner.HasValue())
                {
                    return base.OnUpdateLayout(performLayout);
                }

                return false;
            }

            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);

                if (disposing)
                {
                    Owner = null;
                }
            }
        }
    }
}