//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Resources;

namespace System.Windows.Forms
{
    partial class ListViewEdit
    {
        public class ExpandableColumn : Column
        {
            public ExpandableColumn()
                : base(SizeType.Absolute, 24)
            {
                BorderStyle = default(Border3DSide);
            }

            public override bool AllowSort
            {
                get { return false; }
                set { }
            }

            public override bool CanFilter
            {
                get { return false; }
            }

            public override bool AllowFilter
            {
                get { return false; }
                set { }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override string Text
            {
                get { return string.Empty; }
                set { }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override Image Image
            {
                get { return Images016.ExpandNode; }
                set { }
            }

            protected internal override bool OnCellClick(Point point, int row)
            {
                if (Owner.View.List.IsExpanded(row))
                {
                    Owner.View.List.CollapseRow();
                }
                else
                {
                    Owner.View.List.ExpandRow(row);
                }

                return true;
            }

            protected override void OnPaintCaption(Graphics g, Rectangle bounds, Image image)
            {
            }

            protected override void OnPaintCell(Graphics g, Rectangle bounds, Row row)
            {
                Image image = Owner.View.List.IsExpanded(row.Index) ? Images016.CollapseNode : Images016.ExpandNode;

                g.DrawImage(image, bounds.Left + (bounds.Width - 16) / 2, bounds.Top + (bounds.Height - 16) / 2);
            }
        }
    }
}
