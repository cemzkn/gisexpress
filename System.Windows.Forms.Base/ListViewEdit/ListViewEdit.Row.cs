//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    partial class ListViewEdit
    {
        public class Row : ISupportProperty, IComparable, IDisposable
        {
            public Row()
            {
            }

            public Row(IRowCollection owner)
            {
                Owner = owner;
            }

            protected string ItemText;
            protected Image ItemImage;
            protected internal int DropIndex;
            protected internal int? Ordinal;

            public IRowCollection Owner
            {
                get;
                protected internal set;
            }

            public virtual string Text
            {
                get { return ItemText ?? (Value ?? string.Empty).ToString(); }
                set { ItemText = value; }
            }

            public Image Image
            {
                get;
                set;
            }

            public object Value
            {
                get;
                set;
            }

            public bool Visible
            {
                get { return Owner.IsVisible(this); }
            }

            public virtual bool Checked
            {
                get { return Owner.IsChecked(this); }
                set { Owner.SetChecked(this, value); }
            }

            public bool Selected
            {
                get { return Owner.IsSelected(this); }
                set { Owner.SetSelected(this, value); }
            }

            public int Index
            {
                get { return Owner.IndexOf(this); }
            }

            public void Show()
            {
                Show(Owner.Count);
            }

            public void Show(int index)
            {
                Owner.Show(this, index);
            }

            public void Hide()
            {
                Owner.Hide(this);
            }

            string ISupportProperty.ComponentName
            {
                get { return default(string); }
            }

            Type ISupportProperty.GetPropertyType(string name)
            {
                return Owner.View.Columns[name].PropertyType;
            }

            object ISupportProperty.GetPropertyValue(string name)
            {
                return Owner.View.Columns[name].GetValue(this);
            }

            public override string ToString()
            {
                return Text;
            }

            public int CompareTo(object obj)
            {
                throw new NotImplementedException();
            }

            public override bool Equals(object obj)
            {
                if (obj == null)
                {
                    return false;
                }

                return GetHashCode() == obj.GetHashCode();
            }

            public override int GetHashCode()
            {
                return (Value ?? int.MinValue).GetHashCode();
            }

            public virtual void Dispose()
            {
                Owner = null;
                GC.SuppressFinalize(this);
            }
        }
    }
}
