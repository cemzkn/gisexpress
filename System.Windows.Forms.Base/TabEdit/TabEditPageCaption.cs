//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class TabEditPageCaption : LabelEdit
    {
        public TabEditPageCaption(TabEditPage owner)
        {
            Owner = owner;

            Margin = new Padding(0, 6, 0, 0);
            Padding = new Padding(8, 0, 8, 0);

            MinimumSize = new Size(16, 26);
            TextAlign = ContentAlignment.MiddleCenter;
        }

        protected new readonly TabEditPage Owner;

        protected override bool ShowFocusRectangle
        {
            get { return false; }
        }

        public override Border3DSide BorderStyle
        {
            get
            {
                if (Owner.TabPageIndex == 0)
                {
                    return Border3DSide.Left | Border3DSide.Top | Border3DSide.Right;
                }

                return Border3DSide.Top | Border3DSide.Right;
            }
        }

        protected override void OnClick(EventArgs e)
        {
            Owner.Parent.OnCaptionClick(new TabEditEventArgs
            {
                Action = TabControlAction.Selecting,
                TabPage = Owner,
                TabPageIndex = Owner.TabPageIndex
            });

            Owner.Activate();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            if (!OSEnvironment.IsWindows && !Owner.IsActive)
            {
                e.Graphics.DrawBorder(Border3DSide.Right, 0, 0, Width, Height);
            }
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            if (e.Button == MouseButtons.Right)
            {
                Owner.Parent.TabCaptionMenu.Show(this, new Point(0, Bottom - Padding.Horizontal));
            }
        }

        protected override void OnMouseEnter(EventArgs e)
        {
            if (!Owner.IsActive)
            {
                BackColor = ApplicationAppereance.Colors.ControlHot;
                ForeColor = ApplicationAppereance.Colors.ControlText;
            }

            base.OnMouseEnter(e);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            if (!Owner.IsActive)
            {
                BackColor = ApplicationAppereance.Colors.Control;
                ForeColor = ApplicationAppereance.Colors.ControlText;
            }

            base.OnMouseLeave(e);
        }
    }
}
