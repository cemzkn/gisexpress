//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    public class TabEditPage : BaseEdit
    {
        public TabEditPage(string name)
        {
            Name = name;
            Enabled = false;
            Dock = DockStyle.Fill;

            Margin = new Padding(0);
            Padding = new Padding(0);
            Caption = new TabEditPageCaption(this);

            Hide();
        }

        public new TabEdit Parent
        {
            get { return base.Parent as TabEdit; }
        }

        public TabEditPageCaption Caption
        {
            get;
            protected set;
        }

        public override string Text
        {
            get { return Caption.Text; }
            set { Caption.Text = value; }
        }

        [Browsable(false)]
        public int TabPageIndex
        {
            get { return Parent.HasValue() ? Parent.TabPages.IndexOf(this) : -1; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Image Image
        {
            get { return Caption.Image; }
            set { Caption.Image = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual bool CanActive
        {
            get { return Parent.HasValue() && !IsActive; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual bool CanRemove
        {
            get;
            protected set;
        }

        public bool IsActive
        {
            get { return Parent.HasValue() && Parent.SelectedTab == this; }
        }

        public void Activate()
        {
            if (CanActive)
            {
                Parent.SelectedTab = this;
            }
        }

        public void Deactivate()
        {
            Hide();
            Enabled = false;

            Caption.BackColor = ApplicationAppereance.Colors.Control;
            Caption.ForeColor = ApplicationAppereance.Colors.ControlText;

            if (Parent.HasValue() && Parent.SelectedIndex < 0 && Parent.PreviousTab.HasValue())
            {
                Parent.PreviousTab.Activate();
            }
        }

        public bool Remove()
        {
            return OnRemove();
        }

        protected virtual bool OnRemove()
        {
            if (CanRemove && Parent.HasValue())
            {
                return Parent.TabPages.Remove(this);
            }

            return false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if (Visible)
            {
                Caption.BackColor = ApplicationAppereance.Colors.DocumentActiveCaption;
                Caption.ForeColor = ApplicationAppereance.Colors.DocumentActiveCaptionText;
                Caption.Show();
            }

            base.OnVisibleChanged(e);
        }
    }
}
