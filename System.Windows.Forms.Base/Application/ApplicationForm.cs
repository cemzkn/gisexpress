//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Configuration;
using System.Drawing;
using System.Resources;
using System.Threading;
using System.Windows.Forms.Ribbon;

namespace System.Windows.Forms
{
    public partial class ApplicationForm : RibbonForm
    {
        static ApplicationForm()
        {
            if (DeveloperEnvironment.RuntimeMode && ApplicationConfiguration.Current.HasValue())
            {
                Application.ThreadException += OnThreadException;
                Localization.Language = ApplicationConfiguration.Current.Language.Name;
            }
        }

        ApplicationFormHeader HeaderControl;
        ApplicationFormFooter FooterControl;

        [Category(Categories.Appearance)]
        public string HeaderCaption
        {
            get { return Header.Caption; }
            set { Header.Caption = value; }
        }

        [Category(Categories.Appearance)]
        public string HeaderTitle
        {
            get { return Header.Title; }
            set { Header.Title = value; }
        }

        [DefaultValue(false)]
        [Category(Categories.Appearance)]
        public bool ShowHeader
        {
            get { return Controls.Contains(Header); }
            set
            {
                if (value)
                {
                    ShowIcon = false;
                    Controls.Add(Header);
                }
                else
                {
                    Controls.Remove(Header);
                }
            }
        }

        [DefaultValue(false)]
        [Category(Categories.Appearance)]
        public bool ShowFooter
        {
            get { return Controls.Contains(Footer); }
            set
            {
                if (value)
                {
                    Controls.Add(Footer);
                }
                else
                {
                    Controls.Remove(Footer);
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ApplicationFormHeader Header
        {
            get { return HeaderControl ?? (HeaderControl = new ApplicationFormHeader()); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ApplicationFormFooter Footer
        {
            get { return FooterControl ?? (FooterControl = new ApplicationFormFooter()); }
        }

        [ConfigurationValue(1)]
        public new FormWindowState WindowState
        {
            get { return base.WindowState; }
            set { base.WindowState = value; }
        }

        [ConfigurationValue(2)]
        public new Size Size
        {
            get { return base.Size; }
            set
            {
                if (IsNormal)
                {
                    SetBoundsCore(Left, Top, value.Width, value.Height, BoundsSpecified.Size);
                }
            }
        }

        [ConfigurationValue(3)]
        public new Point Location
        {
            get { return base.Location; }
            set
            {
                if (IsNormal)
                {
                    SetBoundsCore(value.X, value.Y, Width, Height, BoundsSpecified.Location);
                }
            }
        }

        protected override void OnAcceptAction(DialogResult result)
        {
            Footer.Buttons["OK"].Enabled = false;
            Footer.Buttons["OK"].ImageAlign = ContentAlignment.MiddleLeft;
            Footer.Buttons["OK"].StartAnimate(Images016.Wait);
            Footer.Buttons["OK"].Invalidate(false);

            base.OnAcceptAction(result);
        }

        protected override void OnAcceptActionCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            using (sender as IDisposable)
            {
                Footer.Buttons["OK"].StopAnimate();
                Footer.Buttons["OK"].Enabled = true;

                if (e.Error.IsNull())
                {
                    base.OnAcceptActionCompleted(sender, e);
                }
                else
                {
                    e.Error.Print();
                    PopupMessage.Show(Footer.Buttons["OK"], e.Error.Message, MessageBoxIcon.Error, ContentAlignment.TopCenter);
                }
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            if (DesignMode)
            {
                return;
            }

            try
            {
                Opacity = 0.0;

                if (ApplicationConfiguration.Current.HasValue())
                {
                    ApplicationConfiguration.Current.ComponentSettings.Load(this);
                    base.OnLoad(e);
                }
                else
                {
                    base.OnLoad(e);
                }
            }
            finally
            {
                Opacity = 1.0;
            }
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);

            if (!e.Cancel)
            {
                if (DialogResult == DialogResult.OK)
                {
                    OnAcceptChanges();
                }

                if (ApplicationConfiguration.Current.HasValue())
                {
                    if (ApplicationConfiguration.Current.ComponentSettings.Save(this))
                    {
                        ApplicationConfiguration.Current.Save();
                    }
                }
            }
        }

        protected virtual void OnAcceptChanges()
        {
        }

        protected static void OnThreadException(object sender, ThreadExceptionEventArgs e)
        {
            e.Exception.ShowMessage();
        }
    }
}
