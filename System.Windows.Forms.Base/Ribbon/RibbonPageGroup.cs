//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;

namespace System.Windows.Forms.Ribbon
{
    public class RibbonPageGroup
    {
        public RibbonPageGroup(string name, int height, int rowCount)
        {
            NumRows = rowCount;

            Body = new TablePanelEdit
            {
                Name = name,
                Margin = new Padding(0, 3, 0, 3),
                Padding = new Padding(0, 0, 3, 0),
                AutoSizeMode = AutoSizeMode.GrowAndShrink
            };

            Body.AddColumn();

            for (int n = 0; n < NumRows; n++)
            {
                Body.AddRow(SizeType.Absolute, 26);
            }

            Commands = new List<RibbonToolbarButton>();
        }

        protected int NumRows;
        protected RibbonToolbarButton Previous;
        protected internal TablePanelEdit Body;

        public RibbonPage Page
        {
            get;
            protected internal set;
        }

        public List<RibbonToolbarButton> Commands
        {
            get;
            protected set;
        }

        public string Name
        {
            get { return Body.Name; }
        }

        public string Text
        {
            get { return Body.Text; }
            set { Body.Text = value; }
        }

        public bool Enabled
        {
            get { return Body.Enabled; }
            set { Body.Enabled = value; }
        }

        public void AddCommand(RibbonToolbarButton value)
        {
            AddCommand(value, false);
        }

        public void AddCommand(RibbonToolbarButton value, bool beginGroup)
        {
            Commands.Add(value);

            if (value.Visible = (value.Visibility & RibbonCommandVisibility.Toolbar) == RibbonCommandVisibility.Toolbar)
            {
                if (beginGroup || (Previous.HasValue() && Body.GetRow(Previous) == NumRows - 1))
                {
                    Body.InsertVerticalSeperator();
                    Previous = null;
                }

                if (value.LargeImage.IsNull())
                {
                    if (Previous.IsNull() || Body.GetRowSpan(Previous) == NumRows)
                    {
                        Body.InsertColumn(value);
                    }
                    else
                    {
                        Body.Controls.Add(value, Body.ColumnStyles.Count - 2, Body.GetRow(Previous) + 1);
                    }
                }
                else
                {
                    Body.InsertColumn(value);
                    Body.SetRowSpan(value, Body.RowStyles.Count);
                }

                Previous = value;
            }
        }

        public RibbonToolbarButton this[string name]
        {
            get { return Commands.FirstOrDefault(item => item.Name.EqualsIgnoreCase(name) || name.EndsWith(string.Concat('.', item.Name))); }
        }

        public bool Remove()
        {
            return Page.Groups.Remove(this);
        }
    }
}
