//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace System.Windows.Forms.Ribbon
{
    public class RibbonPageGroupCollection : IEnumerable<RibbonPageGroup>
    {
        public RibbonPageGroupCollection(RibbonPage page)
        {
            Page = page;
            Groups = new List<RibbonPageGroup>();
        }

        protected RibbonPage Page;
        protected List<RibbonPageGroup> Groups;

        public int Count
        {
            get { return Groups.Count; }
        }

        public RibbonPageGroup Add(string name)
        {
            return Add(name, name);
        }

        public RibbonPageGroup Add(string name, string caption)
        {
            var group = new RibbonPageGroup(name, Page.Ribbon.Height, Page.Ribbon.RowCount)
            {
                Page = Page,
                Text = caption
            };

            Groups.Add(group);
            Page.Content.InsertColumn(group.Body);

            return group;
        }

        public bool Remove(RibbonPageGroup group)
        {
            return Groups.Remove(group) && Page.Content.RemoveColumn(group.Body);
        }

        public RibbonPageGroup this[int index]
        {
            get { return Groups[index]; }
        }

        public RibbonPageGroup this[string name]
        {
            get { return Groups.FirstOrDefault(item => item.Name.EqualsIgnoreCase(name)); }
        }

        public IEnumerator<RibbonPageGroup> GetEnumerator()
        {
            return Groups.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
