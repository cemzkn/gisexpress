//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Resources;

namespace System.Windows.Forms.Ribbon
{
    [ToolboxItem(false)]
    public class RibbonControl : TabEdit
    {
        public RibbonControl()
        {
            Height = 120;
            RowCount = 3;
            AutoSize = false;
            Dock = DockStyle.Top;
            Alignment = TabAlignment.Top;
            Menu = new ApplicationMenu(this);
            TabPages.Add(string.Empty, Images016.ApplicationMenu);
        }

        public RibbonForm Form
        {
            get { return FindForm() as RibbonForm; }
        }

        public ApplicationMenu Menu
        {
            get;
            protected set;
        }

        public new RibbonPageCollection TabPages
        {
            get { return (RibbonPageCollection)base.TabPages; }
        }

        public new RibbonPage SelectedTab
        {
            get { return base.SelectedTab as RibbonPage; }
            set { base.SelectedTab = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Border3DSide PageBorderStyle
        {
            get;
            set;
        }

        public RibbonToolbarButton AddCommand(string name, Image image, Image largeImage, EventHandler onClick, string groupName)
        {
            return AddCommand(name, image, largeImage, onClick, groupName, " ", RibbonCommandVisibility.Toolbar);
        }

        public RibbonToolbarButton AddCommand(string name, Image image, Image largeImage, EventHandler onClick, string groupName, RibbonCommandVisibility visibility)
        {
            return AddCommand(name, image, largeImage, onClick, groupName, " ", visibility);
        }

        public RibbonToolbarButton AddCommand(string name, Image image, Image largeImage, EventHandler onClick, string groupName, string pageName, RibbonCommandVisibility visibility)
        {
            var page = TabPages[pageName] ?? TabPages.Add(pageName);
            var beginGroup = page.Groups.Count > 0 && page.Groups[groupName].IsNull();
            var group = page.Groups[groupName] ?? page.Groups.Add(groupName);

            var command = new RibbonToolbarButton
            {
                Name = name,
                Text = Localization.Localize(name),
                Visibility = visibility,
                SmallImage = image,
                LargeImage = largeImage
            };

            foreach (RowStyle row in group.Body.RowStyles)
            {
                row.Height = Height / RowCount;

                if (RowCount == 1)
                {
                    row.Height -= 6;
                }
            }

            command.Click += onClick;
            group.AddCommand(command, beginGroup);

            return command;
        }

        public bool RemoveCommand(string name)
        {
            RibbonToolbarButton command = FindCommand(name);

            if (command.HasValue())
            {
                if (GetGroupByName(command.GroupName).Commands.Remove(command))
                {
                    using (command)
                    {
                        var panel = command.Parent as TablePanelEdit;
                        var n = panel.Controls.IndexOf(command);

                        if (n > 0)
                        {
                            var previous = panel.Controls[n - 1] as VerticalLine;

                            if (previous.HasValue())
                            {
                                panel.RemoveColumn(previous);
                            }
                        }

                        panel.RemoveColumn(command);
                        panel.Controls.Remove(command);
                        return true;
                    }
                }
            }

            return false;
        }

        public RibbonPageGroup GetGroupByName(string name)
        {
            foreach (RibbonPage page in TabPages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    if (group.Name.EqualsIgnoreCase(name))
                    {
                        return group;
                    }
                }
            }

            return null;
        }

        public RibbonToolbarButton FindCommand(string name)
        {
            RibbonToolbarButton value;

            foreach (RibbonPage page in TabPages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    if ((value = group[name]).HasValue())
                    {
                        return value;
                    }
                }
            }

            return null;
        }

        public IEnumerable<RibbonToolbarButton> GetCommands()
        {
            foreach (RibbonPage page in TabPages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    foreach (RibbonToolbarButton command in group.Commands)
                    {
                        yield return command;
                    }
                }
            }
        }

        public RibbonToolbarButton FindCommand(Keys key)
        {
            RibbonToolbarButton command = Menu.Items.FirstOrDefault(c => c.Enabled && c.Shortcut == key);

            if (command.IsNull())
            {
                command = GetCommands().FirstOrDefault(c => c.Enabled && c.Shortcut == key);
            }

            if (command.IsNull() && Form.HasValue() && Form.StatusManagerControl.HasValue())
            {
                command = Form.StatusManagerControl.Items.FirstOrDefault(c => c.Enabled && c.Shortcut == key);
            }

            return command;
        }

        public bool PerformCommand(Keys key)
        {
            RibbonToolbarButton command = FindCommand(ModifierKeys | key);

            if (command.HasValue() && command.Enabled)
            {
                command.PerformClick(this, EventArgs.Empty);
                return true;
            }

            return false;
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (!PerformCommand(e.KeyCode))
            {
                base.OnKeyDown(e);
            }
        }

        protected override TabEditPageCollection OnCreatePageCollection()
        {
            return new RibbonPageCollection(this);
        }

        protected internal override void OnCaptionClick(TabEditEventArgs e)
        {
            if (e.TabPageIndex == 0)
            {
                Rectangle bounds = GetTabRect(0);
                Menu.ShowPopup(bounds.Left, bounds.Bottom);
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if (SelectedIndex <= 0)
            {
                SelectedIndex = 1;
            }

            base.OnVisibleChanged(e);
        }

        protected internal virtual void OnPaintPage(RibbonPage page, PaintEventArgs e)
        {
            page.Content.BorderStyle = PageBorderStyle;
        }
    }
}
