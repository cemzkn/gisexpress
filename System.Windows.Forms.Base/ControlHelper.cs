//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Reflection;
using System.Resources;
using System.Windows.Forms.VisualStyles;
using ContentAlignment = System.Drawing.ContentAlignment;

namespace System.Windows.Forms
{
    public static class ControlHelper
    {
        static ControlHelper()
        {
            if (DeveloperEnvironment.RuntimeMode)
            {
                Localization.Register();
                RegisterAttributes();
                KeysConverter = new KeysConverter();
            }

            Graphics = Graphics.FromHwnd(IntPtr.Zero);
        }

        public static readonly Graphics Graphics;
        public static ApplicationForm ProgressForm;
        public static readonly KeysConverter KeysConverter;

        public static class Brushes
        {
            public static Brush Highlight = new SolidBrush(ApplicationAppereance.Colors.ControlHot);
            public static Brush HighlightText = new SolidBrush(ApplicationAppereance.Colors.ControlHighlightText);
        }

        public static class Pens
        {
            public static Pen HighlightBorder = new Pen(ApplicationAppereance.Colors.ControlHighlightBorder) { LineJoin = LineJoin.Round };
            public static StringFormat DisplayFormat = new StringFormat(StringFormatFlags.DisplayFormatControl | StringFormatFlags.NoWrap);
        }

        public static void RegisterAll()
        {
            // This method exists to call static constructor
        }

        public static bool ShowInputDialog(IWin32Window owner, string caption, out string value)
        {
            using (var inputDialog = new ApplicationForm { Width = 300, Height = 120, Text = caption, StartPosition = FormStartPosition.CenterParent })
            {
                TextEdit edit;

                inputDialog.ShowFooter = true;
                inputDialog.Padding = new Padding(8);
                inputDialog.Footer.DisplayButtons = MessageBoxButtons.OKCancel;
                inputDialog.Body.Controls.Add(edit = new TextEdit { Dock = DockStyle.Fill });

                if (inputDialog.ShowDialog(owner) == DialogResult.OK)
                {
                    value = edit.Text;
                    return true;
                }

                value = null;
                return false;
            }
        }

        public static void ShowProgressBar(IWin32Window owner, string caption)
        {
            if (ProgressForm.IsNull())
            {
                ProgressForm = new ApplicationForm
                {
                    Width = 300,
                    Height = 70,
                    Opacity = 0.0,
                    Text = caption,
                    CloseBox = false,
                    ShowIcon = false,
                    ShowInTaskbar = false,
                    FormBorderStyle = FormBorderStyle.FixedDialog,
                    StartPosition = FormStartPosition.CenterParent,
                };

                ProgressForm.Body.Padding = new Padding(6);
                ProgressForm.Body.Controls.Add(new ProgressEdit
                {
                    Marquee = true,
                    Dock = DockStyle.Fill
                });

                ProgressForm.ShowDialog(owner, 0x100);
            }
        }

        public static void HideProgressBar()
        {
            if (ProgressForm.HasValue())
            {
                using (ProgressForm)
                {
                    ProgressForm.Close();
                }

                ProgressForm = null;
            }
        }

        public static void SetCenterParent(this Form value)
        {
            SetCenterParent(value, default(Form));
        }

        public static void SetCenterParent(this Form value, Form owner)
        {
            Form parent = owner ?? value.Owner ?? value.ParentForm;

            if (parent.HasValue())
            {
                value.Location = new Point(parent.Left + (parent.Width - value.Width) / 2, parent.Top + (parent.Height - value.Height) / 2);
            }
        }

        public static void DrawEnterRect(Graphics g, int x, int y, int width, int height)
        {
            DrawEnterRect(g, new Rectangle(x, y, width, height));
        }

        public static void DrawEnterRect(Graphics g, Rectangle rect)
        {
            g.DrawRectangle(SystemPens.Highlight, rect);
            g.DrawRectangle(SystemPens.Window, rect.Left - 1, rect.Top - 1, rect.Width + 2, rect.Height + 2);
            g.DrawRectangle(SystemPens.Highlight, rect.Left - 2, rect.Top - 2, rect.Width + 4, rect.Height + 4);
        }

        public static string GetString(this Keys value)
        {
            if (value == Keys.None)
            {
                return string.Empty;
            }

            return KeysConverter.ConvertTo(value, Types.String) as string;
        }

        public static void UpdateSize(this Label c)
        {
            UpdateSize(c, c.Padding);
        }

        public static void UpdateSize(this Label c, int left, int top, int right, int bottom)
        {
            UpdateSize(c, new Padding(left, top, right, bottom));
        }

        public static void UpdateSize(this Label c, Padding padding)
        {
            Size preferredSize = MeasureText(string.Concat(' ', c.Text, ' '), c.Font);

            preferredSize.Width += padding.Horizontal;
            preferredSize.Height += padding.Vertical;

            if (c.Image.HasValue())
            {
                switch (c.ImageAlign)
                {
                    case ContentAlignment.TopLeft:
                    case ContentAlignment.TopRight:
                    case ContentAlignment.MiddleLeft:
                    case ContentAlignment.MiddleRight:
                    case ContentAlignment.BottomLeft:
                    case ContentAlignment.BottomRight:
                        preferredSize.Width += c.Image.Width + padding.Left;
                        preferredSize.Height = Math.Max(preferredSize.Height, c.Image.Height + padding.Vertical);
                        break;
                    case ContentAlignment.TopCenter:
                    case ContentAlignment.MiddleCenter:
                    case ContentAlignment.BottomCenter:
                        preferredSize.Height += c.Image.Height + padding.Vertical;
                        preferredSize.Width = Math.Max(preferredSize.Width, c.Image.Width + padding.Horizontal);
                        break;
                }
            }

            c.Width = preferredSize.Width;
            c.Height = preferredSize.Height;
        }

        public static Size MeasureText(string s, Font font)
        {
            return MeasureText(default(Graphics), s, font, Size.Empty, TextFormatFlags.Default);
        }

        public static Size MeasureText(Graphics g, string s, Font font)
        {
            return MeasureText(g, s, font, Size.Empty, TextFormatFlags.Default);
        }

        public static Size MeasureText(string s, Font font, TextFormatFlags flags)
        {
            return MeasureText(default(Graphics), s, font, Size.Empty, flags);
        }

        public static Size MeasureText(Graphics g, string s, Font font, TextFormatFlags flags)
        {
            return MeasureText(g, s, font, Size.Empty, flags);
        }

        public static Size MeasureText(string s, Font font, Size proposedSize, TextFormatFlags flags)
        {
            return MeasureText(default(Graphics), s, font, proposedSize, flags);
        }

        public static Size MeasureText(Graphics g, string s, Font font, Size proposedSize, TextFormatFlags flags)
        {
            return TextRenderer.MeasureText(g ?? Graphics, s, font, proposedSize, flags);
        }

        public static void DrawCheckBox(this Graphics g, Rectangle bounds, bool enabled, bool value)
        {
            if (value)
            {
                g.DrawImage(Images016.Checked, bounds.Left, bounds.Top + (bounds.Height - 16) / 2, 16, 16);
            }
            else
            {
                g.DrawImage(Images016.Unchecked, bounds.Left, bounds.Top + (bounds.Height - 16) / 2, 16, 16);
            }
        }

        public static void DrawRadioButton(this Graphics g, Rectangle bounds, bool enabled, bool value)
        {
            if (value)
            {
                g.DrawImage(Images016.RadioChecked, bounds.Left, bounds.Top + (bounds.Height - 16) / 2, 16, 16);
            }
            else
            {
                g.DrawImage(Images016.RadioUnchecked, bounds.Left, bounds.Top + (bounds.Height - 16) / 2, 16, 16);
            }
        }

        public static void DrawGlyphButton(this Graphics g, GlyphButtonType buttonType, int left, int top, int width, int height)
        {
            DrawGlyphButton(g, buttonType, default(Image), left, top, width, height, true, true);
        }

        public static void DrawGlyphButton(this Graphics g, GlyphButtonType buttonType, Image image, int left, int top, int width, int height)
        {
            DrawGlyphButton(g, buttonType, image, left, top, width, height, true, true);
        }

        public static void DrawGlyphButton(this Graphics g, GlyphButtonType buttonType, Image image, int left, int top, int width, int height, bool enabled, bool value)
        {
            Color foreColor = enabled ? SystemColors.ControlText : SystemColors.GrayText;

            using (var brush = new SolidBrush(foreColor))
            {
                using (var pen = new Pen(foreColor) { LineJoin = LineJoin.Round })
                {
                    var center = new Point(left + width / 2, top + height / 2);

                    g.SetHighQuality();

                    switch (buttonType)
                    {
                        case GlyphButtonType.Check:
                            ControlHelper.DrawCheckBox(g, Rectangle.FromLTRB(center.X - 4, center.Y - 4, center.X + 4, center.Y + 4), enabled, value);
                            break;

                        case GlyphButtonType.Radio:
                            ControlHelper.DrawRadioButton(g, Rectangle.FromLTRB(center.X - 4, center.Y - 4, center.X + 4, center.Y + 4), enabled, value);
                            break;

                        case GlyphButtonType.Clear:
                            pen.Width = 2;
                            pen.Color = SystemColors.Window;
                            brush.Color = SystemColors.ButtonShadow;
                            g.FillEllipse(brush, center.X / 2 - 2, center.Y / 2 - 2, center.X + 5, center.Y + 5);
                            g.DrawLine(pen, center.X - 4, center.Y - 4, center.X + 4, center.Y + 4);
                            g.DrawLine(pen, center.X - 4, center.Y + 4, center.X + 4, center.Y - 4);
                            break;

                        case GlyphButtonType.Close:
                            g.DrawLine(pen, center.X - 4, center.Y - 4, center.X + 4, center.Y + 4);
                            g.DrawLine(pen, center.X - 4, center.Y + 4, center.X + 4, center.Y - 4);
                            break;

                        case GlyphButtonType.Down:
                            g.FillPolygon(brush, new[] { new Point(center.X - 4, center.Y - 2), new Point(center.X + 4, center.Y - 2), new Point(center.X, center.Y + 2) });
                            break;

                        case GlyphButtonType.Ellipsis:
                            g.DrawEllipse(SystemPens.ControlText, center.X - 3, center.Y, 1, 1);
                            g.DrawEllipse(SystemPens.ControlText, center.X, center.Y, 1, 1);
                            g.DrawEllipse(SystemPens.ControlText, center.X + 3, center.Y, 1, 1);
                            break;

                        case GlyphButtonType.Glyph:
                            if (image.HasValue()) g.DrawImage(image, center.X - image.Width / 2, center.Y - image.Height / 2);
                            break;
                    }
                }
            }
        }

        public static void DrawComboButton(this Graphics g, int left, int top, int width, int height, ButtonState state)
        {
            ControlPaint.DrawComboButton(g, left, top, width, height, state);
        }

        public static void DrawMinimizeButton(this Graphics g, Rectangle bounds)
        {
            using (var pen = new Pen(ApplicationAppereance.Colors.Border, 1F))
            {
                g.DrawLine(pen, bounds.Left, bounds.Bottom, bounds.Right, bounds.Bottom);
                g.DrawLine(pen, bounds.Left, bounds.Bottom - 1, bounds.Right, bounds.Bottom - 1);
            }
        }

        public static void DrawMaximizeButton(this Graphics g, Rectangle bounds)
        {
            using (var pen = new Pen(ApplicationAppereance.Colors.Border, 1F))
            {
                g.DrawLine(pen, bounds.Left, bounds.Top + 1, bounds.Right, bounds.Top + 1);
                g.DrawLine(pen, bounds.Left, bounds.Top + 2, bounds.Right, bounds.Top + 2);
                g.DrawRectangle(pen, bounds.Left, bounds.Top, bounds.Width, bounds.Height);
            }
        }

        public static void DrawRestoreButton(this Graphics g, Rectangle bounds)
        {
            using (var pen = new Pen(ApplicationAppereance.Colors.Border, 1F))
            {
                g.DrawLine(pen, bounds.Left + 3, bounds.Top - 1, bounds.Right + 2, bounds.Top - 1);
                g.DrawRectangle(pen, bounds.Left + 3, bounds.Top, bounds.Width - 2, bounds.Height - 3);

                g.DrawLine(pen, bounds.Left, bounds.Top + 3, bounds.Right - 1, bounds.Top + 3);
                g.DrawRectangle(pen, bounds.Left, bounds.Top + 4, bounds.Width - 2, bounds.Height - 3);
            }
        }

        public static void DrawCloseButton(this Graphics g, Rectangle bounds)
        {
            using (var pen = new Pen(ApplicationAppereance.Colors.Border, 1.6F))
            {
                g.DrawLine(pen, bounds.Left, bounds.Top, bounds.Right, bounds.Bottom);
                g.DrawLine(pen, bounds.Left, bounds.Bottom, bounds.Right, bounds.Top);
            }
        }

        public static void DrawSizeGrip(this Graphics g, int x, int y, int width, int height)
        {
            DrawSizeGrip(g, new Rectangle(x, y, width, height));
        }

        public static void DrawSizeGrip(this Graphics g, Rectangle bounds)
        {
            ControlPaint.DrawSizeGrip(g, ApplicationAppereance.Colors.Border, bounds);
        }

        public static void DrawBorder(this Graphics g, Border3DSide borderStyle, Rectangle bounds)
        {
            DrawBorder(g, borderStyle, ApplicationAppereance.Colors.Border, bounds.X, bounds.Y, bounds.Width, bounds.Height);
        }

        public static void DrawBorder(this Graphics g, Border3DSide borderStyle, int x, int y, int width, int height)
        {
            DrawBorder(g, borderStyle, ApplicationAppereance.Colors.Border, x, y, width, height);
        }

        public static void DrawBorder(this Graphics g, Border3DSide borderStyle, Color color, Rectangle bounds)
        {
            DrawBorder(g, borderStyle, color, bounds.X, bounds.Y, bounds.Width, bounds.Height);
        }

        public static void DrawBorder(this Graphics g, Border3DSide borderStyle, Color color, int x, int y, int width, int height)
        {
            if (borderStyle != default(Border3DSide))
            {
                using (var path = new GraphicsPath())
                {
                    using (Pen pen = new Pen(color))
                    {
                        float penWidth = pen.Width;

                        if ((borderStyle & Border3DSide.Left) == Border3DSide.Left)
                        {
                            path.StartFigure();
                            path.AddLine(x, y, x, y + height - penWidth);
                        }

                        if ((borderStyle & Border3DSide.Top) == Border3DSide.Top)
                        {
                            path.StartFigure();
                            path.AddLine(x, y, x + width - penWidth, y);
                        }

                        if ((borderStyle & Border3DSide.Bottom) == Border3DSide.Bottom)
                        {
                            path.StartFigure();
                            path.AddLine(x, y + height - penWidth, x + width - penWidth, y + height - penWidth);
                        }

                        if ((borderStyle & Border3DSide.Right) == Border3DSide.Right)
                        {
                            path.StartFigure();
                            path.AddLine(x + width - penWidth, y, x + width - penWidth, y + height - penWidth);
                        }

                        g.DrawPath(pen, path);
                    }
                }
            }
        }

        public static void DrawToolbarButton(this Graphics g, Rectangle bounds, ToolBarState state)
        {
            DrawToolbarButton(g, bounds, state, true);
        }

        public static void DrawToolbarButton(this Graphics g, Rectangle bounds, ToolBarState state, bool stroke)
        {
            switch (state)
            {
                case ToolBarState.Hot:
                    g.FillRectangle(ApplicationAppereance.Brushes.ControlHot, bounds.X, bounds.Y, bounds.Width, bounds.Height - 1);
                    if (stroke) g.DrawRectangle(ApplicationAppereance.Pens.ControlHotBorder, bounds.X, bounds.Y, bounds.Width - 1, bounds.Height - 1);
                    break;

                case ToolBarState.Checked:
                case ToolBarState.HotChecked:
                    g.FillRectangle(ApplicationAppereance.Brushes.ControlHotChecked, bounds.X, bounds.Y, bounds.Width, bounds.Height - 1);
                    if (stroke) g.DrawRectangle(ApplicationAppereance.Pens.ControlHotCheckedBorder, bounds.X, bounds.Y, bounds.Width - 1, bounds.Height - 1);
                    break;

                case ToolBarState.Disabled:
                    g.FillRectangle(ApplicationAppereance.Brushes.ControlHotDisabled, bounds.X, bounds.Y, bounds.Width, bounds.Height - 1);
                    break;

                case ToolBarState.Pressed:
                    g.FillRectangle(ApplicationAppereance.Brushes.ControlPressed, bounds.X, bounds.Y, bounds.Width, bounds.Height - 1);
                    if (stroke) g.DrawRectangle(ApplicationAppereance.Pens.ControlPressedBorder, bounds.X, bounds.Y, bounds.Width - 1, bounds.Height - 1);
                    break;
            }
        }

        public static void DrawDocumentCaption(this Graphics g, Rectangle rect, Font font, string text, bool isActive, bool isFocused)
        {
            Color bgColor = isActive ? ApplicationAppereance.Colors.DocumentActiveCaption : ApplicationAppereance.Colors.DocumentInactiveCaption;
            Color foreColor = isActive ? ApplicationAppereance.Colors.DocumentActiveCaptionText : ApplicationAppereance.Colors.DocumentInactiveCaptionText;

            if (isActive && !isFocused)
            {
                bgColor = Color.FromArgb(100, bgColor);
            }

            using (var brush = new SolidBrush(bgColor))
            {
                rect.Inflate(-2, 0);
                g.FillRectangle(brush, rect);
            }

            if (!string.IsNullOrEmpty(text))
            {
                g.DrawText(new DrawTextEventArgs
                {
                    Text = text,
                    Font = font,
                    Bounds = rect,
                    ForeColor = foreColor,
                    FormatFlags = TextFormatFlags.VerticalCenter | TextFormatFlags.HorizontalCenter
                });
            }
        }

        public static bool SetProperty(this Control c, string name, object value)
        {
            if (c.HasValue())
            {
                return c.GetType().SetProperty(c, name, value);
            }

            return false;
        }

        public static void SetEnabled(this Control c, bool enabled)
        {
            if (c.HasValue())
            {
                c.Enabled = enabled;
            }
        }

        public static bool RemoveBorders(this Control c)
        {
            return RemoveBorders(c, default(Border3DSide));
        }

        public static bool RemoveBorders(this Control c, Border3DSide exceptSide)
        {
            if (c.HasValue())
            {
                return SetProperty(c, "BorderStyle", BorderStyle.None) || SetProperty(c, "BorderStyle", exceptSide);
            }

            return false;
        }

        static bool SetBorderStyle(Control c, PropertyInfo property, object value)
        {
            if (property.HasValue())
            {
                property.SetValue(c, value, null);
                return true;
            }

            return false;
        }

        public static bool SetBounds(Control c, BoundsSpecified specified, ref Rectangle bounds)
        {
            return SetBounds(c, specified, Rectangle.Empty, ref bounds);
        }

        public static bool SetBounds(Control c, BoundsSpecified specified, Rectangle maximizedBounds, ref Rectangle bounds)
        {
            switch (specified)
            {
                case BoundsSpecified.X:
                    if (bounds.X == c.Left) return false;
                    break;
                case BoundsSpecified.Y:
                    if (bounds.Y == c.Top) return false;
                    break;
                case BoundsSpecified.Location:
                    if (bounds.X == c.Left && bounds.Y == c.Top) return false;
                    break;
                case BoundsSpecified.Width:
                    if (bounds.Width == c.Width) return false;
                    break;
                case BoundsSpecified.Height:
                    if (bounds.Height == c.Height) return false;
                    break;
                case BoundsSpecified.Size:
                    if (bounds.Width == c.Width && bounds.Height == c.Height) return false;
                    break;
            }

            if (bounds.X != c.Left || bounds.Y != c.Top || bounds.Width != c.Width || bounds.Height != c.Height)
            {
                if (ValidateBounds(c, maximizedBounds, ref bounds))
                {
                    return true;
                }
            }

            return false;
        }

        public static bool ValidateBounds(this Control c, Rectangle maximizedBounds, ref Rectangle rect)
        {
            if (!c.MinimumSize.IsEmpty)
            {
                if (rect.Width < c.MinimumSize.Width)
                {
                    return false;
                }

                if (rect.Height < c.MinimumSize.Height)
                {
                    return false;
                }
            }

            if (!c.MaximumSize.IsEmpty)
            {
                if (rect.Width > c.MaximumSize.Width)
                {
                    return false;
                }

                if (rect.Height > c.MaximumSize.Height)
                {
                    return false;
                }
            }

            if (!maximizedBounds.IsEmpty)
            {
                if (rect.Width > maximizedBounds.Width)
                {
                    return false;
                }

                if (rect.Height > maximizedBounds.Height)
                {
                    return false;
                }

                if (rect.Left < maximizedBounds.Left)
                {
                    rect.X = maximizedBounds.Left;
                }
                else if (rect.Right > maximizedBounds.Right)
                {
                    rect.X = maximizedBounds.Right - c.Width;
                }

                if (rect.Top < maximizedBounds.Top)
                {
                    rect.Y = maximizedBounds.Top;
                }
                else if (rect.Top > maximizedBounds.Bottom - c.Height)
                {
                    rect.Y = maximizedBounds.Bottom - c.Height;
                }
            }

            return true;
        }

        public static Type ColorEditorType
        {
            get { return ApplicationEnvironment.GetType("System.Windows.Forms.ColorDropDownEdit, System.Windows.Forms.ColorEdit"); }
        }

        static void RegisterAttributes()
        {
            TypeDescriptor.AddAttributes(Types.Byte, new TypeConverterAttribute(typeof(NumericConverter<byte>)));
            TypeDescriptor.AddAttributes(Types.SByte, new TypeConverterAttribute(typeof(NumericConverter<sbyte>)));
            TypeDescriptor.AddAttributes(Types.Int16, new TypeConverterAttribute(typeof(NumericConverter<short>)));
            TypeDescriptor.AddAttributes(Types.Int32, new TypeConverterAttribute(typeof(NumericConverter<int>)));
            TypeDescriptor.AddAttributes(Types.Int64, new TypeConverterAttribute(typeof(NumericConverter<long>)));
            TypeDescriptor.AddAttributes(Types.UInt16, new TypeConverterAttribute(typeof(NumericConverter<ushort>)));
            TypeDescriptor.AddAttributes(Types.UInt32, new TypeConverterAttribute(typeof(NumericConverter<uint>)));
            TypeDescriptor.AddAttributes(Types.UInt64, new TypeConverterAttribute(typeof(NumericConverter<ulong>)));
            TypeDescriptor.AddAttributes(Types.Single, new TypeConverterAttribute(typeof(NumericConverter<float>)));
            TypeDescriptor.AddAttributes(Types.Double, new TypeConverterAttribute(typeof(NumericConverter<double>)));
            TypeDescriptor.AddAttributes(Types.Decimal, new TypeConverterAttribute(typeof(NumericConverter<decimal>)));
            TypeDescriptor.AddAttributes(Types.Boolean, new TypeConverterAttribute(typeof(LocalizedBooleanConverter)));
            TypeDescriptor.AddAttributes(Types.DateTime, new TypeConverterAttribute(typeof(LocalizedDateTimeConverter)));

            TypeDescriptor.AddAttributes(Types.String, new EditorAttribute(typeof(TextEdit), Types.Control));
            TypeDescriptor.AddAttributes(Types.Boolean, new EditorAttribute(typeof(CheckEdit), Types.Control));
            TypeDescriptor.AddAttributes(Types.Byte, new EditorAttribute(typeof(NumericEdit<Byte>), Types.Control));
            TypeDescriptor.AddAttributes(Types.SByte, new EditorAttribute(typeof(NumericEdit<SByte>), Types.Control));
            TypeDescriptor.AddAttributes(Types.Int16, new EditorAttribute(typeof(NumericEdit<Int16>), Types.Control));
            TypeDescriptor.AddAttributes(Types.Int32, new EditorAttribute(typeof(NumericEdit<Int32>), Types.Control));
            TypeDescriptor.AddAttributes(Types.Int64, new EditorAttribute(typeof(NumericEdit<Int64>), Types.Control));
            TypeDescriptor.AddAttributes(Types.UInt16, new EditorAttribute(typeof(NumericEdit<UInt16>), Types.Control));
            TypeDescriptor.AddAttributes(Types.UInt32, new EditorAttribute(typeof(NumericEdit<UInt32>), Types.Control));
            TypeDescriptor.AddAttributes(Types.UInt64, new EditorAttribute(typeof(NumericEdit<UInt64>), Types.Control));
            TypeDescriptor.AddAttributes(Types.Single, new EditorAttribute(typeof(NumericEdit<Single>), Types.Control));
            TypeDescriptor.AddAttributes(Types.Double, new EditorAttribute(typeof(NumericEdit<Double>), Types.Control));
            TypeDescriptor.AddAttributes(Types.Decimal, new EditorAttribute(typeof(NumericEdit<Decimal>), Types.Control));
            TypeDescriptor.AddAttributes(Types.DateTime, new EditorAttribute(typeof(DateTimeEdit), Types.Control));
            TypeDescriptor.AddAttributes(Types.TimeSpan, new EditorAttribute(typeof(TimeSpanEdit), Types.Control));
            TypeDescriptor.AddAttributes(Types.Color, new EditorAttribute(ColorEditorType, Types.Control));
        }
    }
}
