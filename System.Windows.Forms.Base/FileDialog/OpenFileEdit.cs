//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Resources;

namespace System.Windows.Forms
{
    public partial class OpenFileEdit : UserControl
    {
        protected PanelEdit PanelTop;
        protected TextEdit TextSearch;
        protected TextEdit TextLocation;
        protected ButtonEdit ButtonUp;
        protected ButtonEdit ButtonForward;
        protected ButtonEdit ButtonBack;
        protected SplitEdit SplitEdit;
        protected PropertyListEdit ListLeft;
        protected GridViewEdit ListRight;
        protected ButtonEdit ButtonRefresh;

        public OpenFileEdit()
        {
            InitializeComponent();

            Paths = new FifoCollection<string>(10);
            TextSearch.NullText = string.Concat(Localization.Localize("Search"), " : ");

            ButtonBack.Enabled = false;
            ButtonBack.BorderStyle = default(Border3DSide);
            ButtonBack.Image = Images016.ArrowLeft;
            ButtonBack.Title = Localization.Localize("Backward");
            ButtonBack.Click += OnNavigateButtonClick;

            ButtonForward.Enabled = false;
            ButtonForward.BorderStyle = default(Border3DSide);
            ButtonForward.Image = Images016.ArrowRight;
            ButtonForward.Title = Localization.Localize("Forward");
            ButtonForward.Click += OnNavigateButtonClick;

            ButtonUp.BorderStyle = default(Border3DSide);
            ButtonUp.Image = Images016.ArrowUp;
            ButtonUp.Title = Localization.Localize("Up");
            ButtonUp.Click += OnNavigateButtonClick;

            ButtonRefresh.BorderStyle = default(Border3DSide);
            ButtonRefresh.Image = Images016.Refresh;
            ButtonRefresh.Title = Localization.Localize("Refresh");
            ButtonRefresh.Click += OnNavigateButtonClick;

            ListRight.View.CellBorderColor = Color.Empty;
            ListRight.View.ColumnLayout += OnFileSystemColumnLayout;
            ListRight.View.KeyDown += OnFileSystemKeyDown;
            ListRight.View.ItemDoubleClick += OnFileSystemDoubleClick;

            ListLeft.ItemHeight = 36;
            ListLeft.SelectedObject = new FileDialogDescriptor();
            ListLeft.ItemClick += OnSelectedCategoryChanged;

            TextLocation.EditValueChanged += OnLocationChanged;

            SplitEdit.Panel1.Width = 180;
            SplitEdit.Panel1.MinWidth = 140;
            SplitEdit.Panel1.MaxWidth = 240;

            if (DeveloperEnvironment.RuntimeMode)
            {
                OnSelectedCategoryChanged(this, EventArgs.Empty);
            }
        }

        public event EventHandler ItemDoubleClick;

        public event EventHandler SelectedIndexChanged
        {
            add { ListRight.View.SelectedIndexChanged += value; }
            remove { ListRight.View.SelectedIndexChanged -= value; }
        }

        protected readonly FifoCollection<string> Paths;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool MultiSelect
        {
            get { return ListRight.MultiSelect; }
            set { ListRight.MultiSelect = value; }
        }

        public int CategoriesWidth
        {
            get { return SplitEdit.Panel1.Width; }
            set { SplitEdit.Panel1.Width = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ISupportFileFilter FilterSupport
        {
            get;
            set;
        }

        public bool Select(FileInfo value)
        {
            if (value.Exists)
            {
                CurrentDirectory = value.Directory;
                ListViewEdit.Row r = ListRight.Rows.FirstOrDefault(e => ((FileSystemItem)e.Value).File.HasValue() && ((FileSystemItem)e.Value).File.FullName.EqualsIgnoreCase(value.FullName));

                if (r.HasValue())
                {
                    ListRight.EditValue = r.Value;
                    return true;
                }
            }

            return false;
        }

        public FileSystemItem SelectedItem
        {
            get
            {
                if (ListRight.View.SelectedRow >= 0)
                {
                    return ListRight.SelectedRow.Value as FileSystemItem;
                }

                return default(FileSystemItem);
            }
        }

        public FileSystemItem[] SelectedItems
        {
            get { return ListRight.SelectedRows.Select(e => e.Value as FileSystemItem).ToArray(); }
        }

        public DirectoryInfo CurrentDirectory
        {
            get
            {
                var value = ListRight.DataSource as FileSystemItemCollection;

                if (value.HasValue())
                {
                    return value.Directory;
                }

                return default(DirectoryInfo);
            }
            set
            {
                if ((CurrentDirectory.IsNull() || !CurrentDirectory.IsEquivalent(value)) && value.ExistsAsync())
                {
                    UpdateFileList(this, value.FullName);
                }
            }
        }

        public override void Refresh()
        {
            OnNavigateButtonClick(ButtonRefresh, EventArgs.Empty);
            base.Refresh();
        }

        protected void OnFileSystemColumnLayout()
        {
            if (ListRight.Columns.Contains("Name"))
            {
                ListRight.Columns["Name"].MinWidth = 200;

                ListRight.Columns["LastWriteTime"].MinWidth = 110;
                ListRight.Columns["LastWriteTime"].CellColor = ApplicationAppereance.Colors.GrayText;

                ListRight.Columns["Type"].MinWidth = 90;
                ListRight.Columns["Type"].CellColor = ApplicationAppereance.Colors.GrayText;

                ListRight.Columns["Size"].MinWidth = 90; ListRight.Columns["Size"].TextAlign = ContentAlignment.MiddleRight;
                ListRight.Columns["Size"].CellColor = ApplicationAppereance.Colors.GrayText;

                ListRight.Columns["Size"].CellDisplayText -= OnDisplayText;
                ListRight.Columns["Size"].CellDisplayText += OnDisplayText;
            }
        }

        protected void OnSelectedCategoryChanged(object sender, EventArgs e)
        {
            if (ListLeft.SelectedItem.HasValue())
            {
                UpdateFileList(sender, ListLeft.SelectedItem.PropertyDescriptor.GetValue(this) as string);
            }
        }

        protected void OnFileSystemKeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Back:
                    OnNavigateButtonClick(ButtonUp, e);
                    break;
                case Keys.Enter:
                    OnFileSystemDoubleClick(sender, e);
                    break;
            }
        }

        protected string OnDisplayText(ListViewEdit.Row row)
        {
            var item = row.Value as FileSystemItem;

            if (item.HasValue() && item.Size > 0)
            {
                return "{0:N0} KB".FormatInvariant(Math.Max(1, item.Size / 1024));
            }

            return string.Empty;
        }

        protected void OnNavigateButtonClick(object sender, EventArgs e)
        {
            if (sender == ButtonUp && ButtonUp.Enabled)
            {
                UpdateFileList(sender, CurrentDirectory.Parent.FullName);
            }
            else if (sender == ButtonBack && ButtonBack.Enabled)
            {
                if (Paths.MovePrevious())
                {
                    UpdateFileList(sender, Paths.Current);
                }
            }
            else if (sender == ButtonForward && ButtonForward.Enabled)
            {
                if (Paths.MoveNext())
                {
                    UpdateFileList(sender, Paths.Current);
                }
            }
            else if (sender == ButtonRefresh && CurrentDirectory.HasValue())
            {
                UpdateFileList(sender, CurrentDirectory.FullName);
            }
        }

        protected void OnFileSystemDoubleClick(object sender, EventArgs e)
        {
            if (ListRight.SelectedRow.HasValue())
            {
                if (SelectedItem.Folder.HasValue())
                {
                    UpdateFileList(sender, SelectedItem.Folder.FullName);
                }

                ItemDoubleClick.InvokeSafely(sender, e);
            }
        }

        protected void OnLocationChanged(object sender, EventArgs e)
        {
            string path = TextLocation.EditValue as string;

            if (Directory.Exists(path))
            {
                UpdateFileList(sender, path);
            }
        }

        protected void UpdateFileList(object sender, string path)
        {
            var fileSystems = new FileSystemItemCollection(FilterSupport, path);

            if (sender != ButtonBack && sender != ButtonForward)
            {
                Paths.Add(path);
            }

            ButtonBack.Enabled = Paths.CanMovePrevious;
            ButtonForward.Enabled = Paths.CanMoveNext;

            ListRight.DataSource = fileSystems;

            TextLocation.EditValueChanged -= OnLocationChanged;
            TextLocation.EditValue = fileSystems.Directory.FullName;
            TextLocation.EditValueChanged += OnLocationChanged;

            ButtonUp.Enabled = fileSystems.Directory.Parent.HasValue();
        }

        protected void InitializeComponent()
        {
            this.SplitEdit = new System.Windows.Forms.SplitEdit();
            this.ListLeft = new System.Windows.Forms.PropertyListEdit();
            this.PanelTop = new System.Windows.Forms.PanelEdit();
            this.ButtonRefresh = new System.Windows.Forms.ButtonEdit();
            this.TextSearch = new System.Windows.Forms.TextEdit();
            this.TextLocation = new System.Windows.Forms.TextEdit();
            this.ButtonUp = new System.Windows.Forms.ButtonEdit();
            this.ButtonForward = new System.Windows.Forms.ButtonEdit();
            this.ButtonBack = new System.Windows.Forms.ButtonEdit();
            this.ListRight = new System.Windows.Forms.GridViewEdit();
            this.SplitEdit.Panel1.SuspendLayout();
            this.SplitEdit.Panel2.SuspendLayout();
            this.SplitEdit.SuspendLayout();
            this.PanelTop.SuspendLayout();
            this.SuspendLayout();
            // 
            // SplitEdit
            // 
            this.SplitEdit.Dock = System.Windows.Forms.DockStyle.Fill;
            this.SplitEdit.Location = new System.Drawing.Point(0, 36);
            this.SplitEdit.Name = "SplitEdit";
            this.SplitEdit.Padding = new System.Windows.Forms.Padding(3);
            // 
            // SplitEdit.Panel1
            // 
            this.SplitEdit.Panel1.Controls.Add(this.ListLeft);
            this.SplitEdit.Panel1.Name = "Panel1";
            // 
            // SplitEdit.Panel2
            // 
            this.SplitEdit.Panel2.Controls.Add(this.ListRight);
            this.SplitEdit.Panel2.Name = "Panel2";
            // 
            // ListLeft
            // 
            this.ListLeft.Dock = System.Windows.Forms.DockStyle.Fill;
            this.ListLeft.Location = new System.Drawing.Point(1, 1);
            this.ListLeft.Name = "ListLeft";
            this.ListLeft.Padding = new System.Windows.Forms.Padding(1);
            this.ListLeft.Size = new System.Drawing.Size(118, 308);
            this.ListLeft.TabIndex = 0;
            this.ListLeft.TabStop = false;
            // 
            // PanelTop
            // 
            this.PanelTop.Controls.Add(this.ButtonRefresh);
            this.PanelTop.Controls.Add(this.TextSearch);
            this.PanelTop.Controls.Add(this.TextLocation);
            this.PanelTop.Controls.Add(this.ButtonUp);
            this.PanelTop.Controls.Add(this.ButtonForward);
            this.PanelTop.Controls.Add(this.ButtonBack);
            this.PanelTop.Dock = System.Windows.Forms.DockStyle.Top;
            this.PanelTop.Location = new System.Drawing.Point(0, 0);
            this.PanelTop.Name = "PanelTop";
            this.PanelTop.Padding = new System.Windows.Forms.Padding(3);
            this.PanelTop.Size = new System.Drawing.Size(539, 36);
            this.PanelTop.TabIndex = 3;
            // 
            // ButtonRefresh
            // 
            this.ButtonRefresh.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.ButtonRefresh.Location = new System.Drawing.Point(283, 6);
            this.ButtonRefresh.Name = "ButtonRefresh";
            this.ButtonRefresh.Size = new System.Drawing.Size(24, 24);
            this.ButtonRefresh.TabIndex = 2;
            // 
            // TextSearch
            // 
            this.TextSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.TextSearch.Location = new System.Drawing.Point(313, 8);
            this.TextSearch.MaxLength = 32767;
            this.TextSearch.MinimumSize = new System.Drawing.Size(16, 22);
            this.TextSearch.Name = "TextSearch";
            this.TextSearch.Padding = new System.Windows.Forms.Padding(3);
            this.TextSearch.Size = new System.Drawing.Size(220, 22);
            this.TextSearch.TabIndex = 1;
            // 
            // TextLocation
            // 
            this.TextLocation.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.TextLocation.Location = new System.Drawing.Point(96, 8);
            this.TextLocation.MaxLength = 32767;
            this.TextLocation.MinimumSize = new System.Drawing.Size(16, 22);
            this.TextLocation.Name = "TextLocation";
            this.TextLocation.Padding = new System.Windows.Forms.Padding(3);
            this.TextLocation.Size = new System.Drawing.Size(181, 22);
            this.TextLocation.TabIndex = 1;
            // 
            // ButtonUp
            // 
            this.ButtonUp.Location = new System.Drawing.Point(66, 6);
            this.ButtonUp.Name = "ButtonUp";
            this.ButtonUp.Size = new System.Drawing.Size(24, 24);
            this.ButtonUp.TabIndex = 0;
            // 
            // ButtonForward
            // 
            this.ButtonForward.Location = new System.Drawing.Point(36, 6);
            this.ButtonForward.Name = "ButtonForward";
            this.ButtonForward.Size = new System.Drawing.Size(24, 24);
            this.ButtonForward.TabIndex = 0;
            // 
            // ButtonBack
            // 
            this.ButtonBack.Location = new System.Drawing.Point(6, 6);
            this.ButtonBack.Name = "ButtonBack";
            this.ButtonBack.Size = new System.Drawing.Size(24, 24);
            this.ButtonBack.TabIndex = 0;
            // 
            // ListRight
            // 
            this.ListRight.Dock = System.Windows.Forms.DockStyle.Fill;
            this.ListRight.Location = new System.Drawing.Point(3, 0);
            this.ListRight.Name = "ListRight";
            this.ListRight.Padding = new System.Windows.Forms.Padding(1);
            this.ListRight.Size = new System.Drawing.Size(410, 310);
            this.ListRight.TabIndex = 1;
            this.ListRight.TabStop = false;
            // 
            // OpenFileEdit
            // 
            this.Controls.Add(this.SplitEdit);
            this.Controls.Add(this.PanelTop);
            this.Name = "OpenFileEdit";
            this.Size = new System.Drawing.Size(539, 352);
            this.SplitEdit.Panel1.ResumeLayout(false);
            this.SplitEdit.Panel2.ResumeLayout(false);
            this.SplitEdit.ResumeLayout(false);
            this.PanelTop.ResumeLayout(false);
            this.ResumeLayout(false);

        }
    }
}
