//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Drawing;
using System.IO;
using System.Linq;

namespace System.Windows.Forms
{
    public partial class FileDialogBase : ApplicationForm, ISupportFileFilter
    {
        public FileDialogBase()
        {
            InitializeComponent();

            ShowIcon = true;
            ShowFooter = true;
            MinimizeBox = false;
            MaximizeBox = false;
            ShowInTaskbar = false;
            Padding = new Padding(6);
            MinimumSize = new Size(780, 460);
            StartPosition = FormStartPosition.CenterScreen;

            Text = Localization.Localize(GetType().Name);
            LabelFileName.Text = Localization.Localize("FileName");

            Footer.DisplayButtons = MessageBoxButtons.OKCancel;

            DropDownFile.ReadOnly = false;
            DropDownFile.EditValueChanged += OnFileNameChanged;
            DropDownFilter.SelectedIndexChanged += OnFilterIndexChanged;

            FileEdit.ItemDoubleClick += OnItemDoubleClick;
            FileEdit.SelectedIndexChanged += OnSelectedChanged;
            FileEdit.FilterSupport = this;
            FileEdit.Select();
        }

        protected OpenFileEdit FileEdit;
        protected LabelEdit LabelFileName;
        protected DropDownEdit DropDownFile;
        protected DropDownEdit DropDownFilter;
        protected HashSet<string> AllFilters;

        public bool MultiSelect
        {
            get { return FileEdit.MultiSelect; }
            set { FileEdit.MultiSelect = value; }
        }

        [ConfigurationValue]
        public string CurrentDirectory
        {
            get { return FileEdit.CurrentDirectory.HasValue() ? FileEdit.CurrentDirectory.FullName : default(string); }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    FileEdit.CurrentDirectory = new DirectoryInfo(value);
                }
            }
        }

        [ConfigurationValue]
        public int CategoriesWidth
        {
            get { return FileEdit.CategoriesWidth; }
            set { FileEdit.CategoriesWidth = value; }
        }

        public HashSet<string> Extensions
        {
            get
            {
                if (DropDownFilter.SelectedIndex >= 0)
                {
                    return DropDownFilter.SelectedRow.Value as HashSet<string>;
                }

                return default(HashSet<string>);
            }
        }

        public void AddFilter(string name, params string[] extensions)
        {
            AddFilter(name, (IEnumerable<string>)extensions);
        }

        public void AddFilter(string name, IEnumerable<string> extensions)
        {
            if (AllFilters.IsNull())
            {
                AllFilters = AllFilters ?? new HashSet<string>(extensions, StringComparer.InvariantCultureIgnoreCase);
            }
            else
            {
                AllFilters = new HashSet<string>(AllFilters.Concat(extensions), StringComparer.InvariantCultureIgnoreCase);
            }

            DropDownFilter.Items.Add(new HashSet<string>(extensions, StringComparer.InvariantCultureIgnoreCase), name);
        }

        public virtual FileInfo File
        {
            get
            {
                if (FileEdit.SelectedItem.HasValue() && FileEdit.SelectedItem.File.HasValue())
                {
                    return FileEdit.SelectedItem.File;
                }

                return new FileInfo(Path.ChangeExtension(Path.Combine(CurrentDirectory, DropDownFile.Text), Extensions.First()));
            }
        }

        public virtual FileInfo[] Files
        {
            get { return FileEdit.SelectedItems.Select(e => e.File).ToArray(); }
        }

        public string FileName
        {
            get { return File.HasValue() ? File.FullName : default(string); }
            set
            {
                DropDownFile.EditValueChanged -= OnFileNameChanged;
                DropDownFile.EditValue = new FileInfo(value).Name;
                DropDownFile.EditValueChanged += OnFileNameChanged;
            }
        }

        public int FilterIndex
        {
            get { return DropDownFilter.SelectedIndex; }
            set { DropDownFilter.SelectedIndex = value; }
        }

        bool ISupportFileFilter.IsFiltered(FileInfo file)
        {
            if (DropDownFilter.SelectedIndex >= 0)
            {
                HashSet<string> e = Extensions;

                if (e.HasValue() && e.Count > 0)
                {
                    return !e.Contains(file.Extension);
                }
            }

            return false;
        }

        protected void OnItemDoubleClick(object sender, EventArgs e)
        {
            if (FileEdit.SelectedItem.HasValue() && FileEdit.SelectedItem.File.HasValue())
            {
                DialogResult = DialogResult.OK;
                Close();
            }
        }

        protected void OnFileNameChanged(object sender, EventArgs e)
        {
            var path = DropDownFile.EditValue as string;

            if (path.IsValidPath())
            {
                var file = new FileInfo(path);
                var directory = new DirectoryInfo(path);

                if (file.Exists)
                {
                    if (FileEdit.Select(file))
                    {
                        OnItemDoubleClick(sender, e);
                    }
                }
                else if (directory.Exists)
                {
                    FileEdit.CurrentDirectory = directory;
                }
            }
        }

        protected void OnSelectedChanged(object sender, EventArgs e)
        {
            if (FileEdit.SelectedItem.HasValue() && FileEdit.SelectedItem.File.HasValue())
            {
                FileName = FileEdit.SelectedItem.File.FullName;
            }
        }

        protected void OnFilterIndexChanged(object sender, EventArgs e)
        {
            FileEdit.Refresh();
        }

        protected override void OnShown(EventArgs e)
        {
            base.OnShown(e);

            OnValidateFilter(e);

            if (FilterIndex < 0)
            {
                FilterIndex = 0;
            }

            if (FileEdit.CurrentDirectory.IsNull())
            {
                FileEdit.CurrentDirectory = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
            }
        }

        protected virtual void OnValidateFilter(EventArgs e)
        {
        }

        void InitializeComponent()
        {
            this.FileEdit = new System.Windows.Forms.OpenFileEdit();
            this.LabelFileName = new System.Windows.Forms.LabelEdit();
            this.DropDownFile = new System.Windows.Forms.DropDownEdit();
            this.DropDownFilter = new System.Windows.Forms.DropDownEdit();
            this.Body.SuspendLayout();
            this.SuspendLayout();
            // 
            // Body
            // 
            this.Body.Controls.Add(this.FileEdit);
            this.Body.Size = new System.Drawing.Size(796, 339);
            // 
            // FileEdit
            // 
            this.FileEdit.Dock = System.Windows.Forms.DockStyle.Fill;
            this.FileEdit.Location = new System.Drawing.Point(0, 0);
            this.FileEdit.Name = "FileEdit";
            this.FileEdit.Size = new System.Drawing.Size(796, 339);
            this.FileEdit.TabIndex = 0;
            // 
            // LabelFileName
            // 
            this.LabelFileName.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.LabelFileName.Location = new System.Drawing.Point(7, 417);
            this.LabelFileName.Name = "LabelFileName";
            this.LabelFileName.Padding = new System.Windows.Forms.Padding(3);
            this.LabelFileName.Size = new System.Drawing.Size(63, 17);
            this.LabelFileName.TabIndex = 1;
            this.LabelFileName.TabStop = false;
            this.LabelFileName.Text = "File Name";
            this.LabelFileName.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // DropDownFile
            // 
            this.DropDownFile.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.DropDownFile.Location = new System.Drawing.Point(76, 415);
            this.DropDownFile.MaxLength = 32767;
            this.DropDownFile.MinimumSize = new System.Drawing.Size(16, 22);
            this.DropDownFile.Name = "DropDownFile";
            this.DropDownFile.Padding = new System.Windows.Forms.Padding(3);
            this.DropDownFile.Size = new System.Drawing.Size(332, 24);
            this.DropDownFile.TabIndex = 0;
            this.DropDownFile.Text = "dropDownEdit1";
            // 
            // DropDownFilter
            // 
            this.DropDownFilter.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.DropDownFilter.Location = new System.Drawing.Point(414, 415);
            this.DropDownFilter.MaxLength = 32767;
            this.DropDownFilter.MinimumSize = new System.Drawing.Size(16, 22);
            this.DropDownFilter.Name = "DropDownFilter";
            this.DropDownFilter.Padding = new System.Windows.Forms.Padding(3);
            this.DropDownFilter.Size = new System.Drawing.Size(191, 24);
            this.DropDownFilter.TabIndex = 2;
            // 
            // FileOpenDialog
            // 
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.DropDownFilter);
            this.Controls.Add(this.LabelFileName);
            this.Controls.Add(this.DropDownFile);
            this.Name = "FileOpenDialog";
            this.ShowFooter = true;
            this.Controls.SetChildIndex(this.DropDownFile, 0);
            this.Controls.SetChildIndex(this.LabelFileName, 0);
            this.Controls.SetChildIndex(this.DropDownFilter, 0);
            this.Controls.SetChildIndex(this.Body, 0);
            this.Body.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }
    }
}
