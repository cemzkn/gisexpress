//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms.VisualStyles;

namespace System.Windows.Forms
{
    public class PopupContainerEdit : TextEdit
    {
        public PopupContainerEdit()
        {
            BorderStyle = Border3DSide.All;
            GlyphButtons.Add(GlyphButtonType.Down);
        }

        DateTime ClosedTime;
        ToolStripControlHost Host;

        public PopupContainerControl Popup
        {
            get;
            protected set;
        }

        protected PopupContainerControl ChildPopup;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoClose
        {
            get { return Popup.HasValue() ? Popup.AutoClose : true; }
            set
            {
                if (Popup.HasValue())
                {
                    Popup.AutoClose = value;
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Control Control
        {
            get { return Host.Control; }
            set
            {
                if (Popup.IsNull() && value.HasValue())
                {
                    Host = new PopupControlHost(value);
                    Popup = new PopupContainerControl(this);

                    Popup.Opening += OnPopupOpening;
                    Popup.Opened += OnPopupOpened;
                    Popup.Closing += OnPopupClosing;
                    Popup.Closed += OnPopupClosed;

                    Popup.Items.Clear();
                    Popup.Items.Add(Host);
                }
            }
        }

        public bool IsClosed
        {
            get { return Popup.IsNull() || (!Popup.Visible && DateTime.Now.Subtract(ClosedTime).TotalMilliseconds > 0x100); }
        }

        public void ShowPopup()
        {
            ShowPopup(ScreenLocation.X, ScreenLocation.Y + Height - 1);
        }

        public void ShowPopup(Point screenLocation)
        {
            ShowPopup(screenLocation.X, screenLocation.Y);
        }

        public void ShowPopup(int x, int y)
        {
            OnPopupShow(x, y);
        }

        protected virtual void OnPopupShow(int x, int y)
        {
            if (Enabled && IsClosed && Popup.HasValue())
            {
                if (Parent.IsNull())
                {
                    Location = new Point(x, y);
                }

                Popup.Show(x, y);
            }
        }

        public void Close()
        {
            Popup.Close();
        }

        public virtual bool IsInactive
        {
            get { return Enabled; }
        }

        protected override void OnClick(EventArgs e)
        {
            if (ReadOnly)
            {
                ShowPopup();
            }
            else
            {
                base.OnClick(e);
            }
        }

        protected override void OnButtonClick(GlyphButton button, EventArgs e)
        {
            if (button.ButtonType == GlyphButtonType.Down)
            {
                ShowPopup();
            }
        }

        protected virtual void OnPopupOpening(object sender, CancelEventArgs e)
        {
            if (!e.Cancel)
            {
                var c = sender as PopupContainerControl;

                if (c.HasValue())
                {
                    var parent = c.OwnerEdit.GetOwner() as PopupContainerControl;

                    if (parent.HasValue())
                    {
                        (parent.OwnerEdit.ChildPopup = c).Closed += OnChildPopupClosed;
                    }
                }
            }
        }

        protected virtual void OnChildPopupClosed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            var c = sender as PopupContainerControl;

            if (c.HasValue())
            {
                var parent = c.OwnerEdit.GetOwner() as PopupContainerControl;

                if (parent.HasValue() && parent.OwnerEdit.ChildPopup.HasValue())
                {
                    parent.OwnerEdit.ChildPopup.Closed -= OnChildPopupClosed;
                    parent.OwnerEdit.ChildPopup = null;

                    if (c.Contains(Cursor.Position) || parent.Contains(Cursor.Position))
                    {
                        parent.Opening -= parent.OwnerEdit.OnPopupOpening;
                        parent.Visible = true;
                        parent.Opening += parent.OwnerEdit.OnPopupOpening;
                    }
                    else
                    {
                        parent.Close();
                    }
                }
            }
        }

        protected virtual void OnPopupOpened(object sender, EventArgs e)
        {
            if (!ReadOnly)
            {
                EditValueObject = Text;
                this.UpdateFocus();
                BeginEdit();
            }
        }

        protected virtual void OnPopupClosing(object sender, ToolStripDropDownClosingEventArgs e)
        {
            if (!e.Cancel)
            {
                var popup = sender as PopupContainerControl;

                if (popup.HasValue() && popup.OwnerEdit.ChildPopup.HasValue())
                {
                    e.Cancel = true;
                }
            }
        }

        protected virtual void OnPopupClosed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            ClosedTime = DateTime.Now;
            Invalidate(false);
            PerformCompleted();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            if (Focused)
            {
                if (CanSelect)
                {
                    e.Graphics.DrawToolbarButton(ClientRectangle, ToolBarState.Hot, false);
                }
            }

            PaintValue(e.Graphics, ClientRectangle, EditValue);
            e.Graphics.DrawBorder(BorderStyle, ClientRectangle);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (Popup.HasValue())
                {
                    Popup.Items.Clear();
                    Popup.Opening -= OnPopupOpening;
                    Popup.Opened -= OnPopupOpened;
                    Popup.Closing -= OnPopupClosing;
                    Popup.Closed -= OnPopupClosed;
                }

                Popup.DisposeSafely();
                Host.DisposeSafely();
                Control.DisposeSafely();

                Popup = null;
                Host = null;
            }

            base.Dispose(disposing);
        }
    }
}
