//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;

namespace System.Windows.Forms
{
    public partial class DockManager
    {
        public DockManager(BaseForm owner)
        {
            Owner = owner;
            DockPanels = new Dictionary<DockStyle, TabEdit>();
        }

        protected Dictionary<DockStyle, TabEdit> DockPanels;

        public BaseForm Owner
        {
            get;
            protected set;
        }

        public void BringToFront()
        {
            DockPanels.Values.ForEach(item => item.BringToFront());
        }

        public void SendToBack()
        {
            DockPanels.Values.ForEach(item => item.SendToBack());
        }

        public IDockPanel Find(string name)
        {
            foreach (TabEdit item in DockPanels.Values)
            {
                var panel = item.TabPages[name] as DockPanel;

                if (panel.HasValue())
                {
                    return panel;
                }
            }

            return default(IDockPanel);
        }

        public IDockPanel AddPanel(string name, DockStyle dockStyle)
        {
            return AddPanel(name, default(Control), dockStyle);
        }

        public IDockPanel AddPanel(string name, Control control, DockStyle dockStyle)
        {
            var value = default(TabEdit);
            var panel = OnCreateDockPanel(name);
            var container = Owner.Body.Controls.OfType<SplitEdit>().FirstOrDefault();

            if (container.IsNull())
            {
                container = new SplitEdit
                {
                    Dock = DockStyle.Fill,
                    Padding = new Padding(3)
                };

                container.Panel1.MinWidth = 240;
                container.Panel1.MaxWidth = 400;

                Owner.Body.Controls.Add(container);
            }

            if (!DockPanels.TryGetValue(dockStyle, out value))
            {
                value = new TabEdit
                {
                    Dock = dockStyle,
                    ShowHeader = true,
                    Padding = new Padding(0),
                    Alignment = GetTabAlignment(dockStyle)
                };

                switch (dockStyle)
                {
                    case DockStyle.Left:
                        value.Dock = DockStyle.Fill;
                        container.Panel1.Controls.Add(value);
                        break;
                    
                    case DockStyle.Bottom:
                        value.Height = 240;
                        value.BorderStyle = Border3DSide.Top;
                        container.Panel2.Controls.Add(value);
                        value.BringToFront();
                        break;
                }

                DockPanels.Add(dockStyle, value);
            }

            panel.Control = control;
            panel.Closed += (s, e) =>
            {
                if (value.TabPages.Count == 0)
                {
                    RemovePanel(dockStyle);
                }
            };

            value.TabPages.Add(panel);

            return panel;
        }

        public bool RemovePanel(DockStyle dockStyle)
        {
            TabEdit value;

            if (DockPanels.TryGetValue(dockStyle, out value) && DockPanels.Remove(dockStyle))
            {
                value.Dispose();
                return true;
            }

            return false;
        }

        protected virtual TabAlignment GetTabAlignment(DockStyle dockStyle)
        {
            return TabAlignment.Top;
        }

        protected virtual DockPanel OnCreateDockPanel(string name)
        {
            return new DockPanel(name);
        }
    }
}
