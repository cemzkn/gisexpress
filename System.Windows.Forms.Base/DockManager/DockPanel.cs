//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    partial class DockManager
    {
        protected class DockPanel : TabEditPage, IDockPanel
        {
            public DockPanel(string name)
                : base(name)
            {
                Name = name;
                Padding = new Padding(1);
                BackColor = ApplicationAppereance.Colors.Window;
            }

            public event EventHandler Closed;
            public event CancelEventHandler Closing;

            public new DockManager Owner
            {
                get { return FormBase.DockManager; }
            }

            public int Index
            {
                get;
                set;
            }

            public bool AllowHide
            {
                get;
                set;
            }

            public bool AllowClose
            {
                get { return CanRemove; }
                set { CanRemove = value; }
            }

            public DockStyle DockStyle
            {
                get { return Parent.HasValue() ? Parent.Dock : DockStyle.None; }
            }

            public override Border3DSide SizableSides
            {
                get
                {
                    switch (DockStyle)
                    {
                        case DockStyle.Top:
                            return Border3DSide.Bottom;
                        case DockStyle.Left:
                            return Border3DSide.Right;
                        case DockStyle.Right:
                            return Border3DSide.Left;
                        case DockStyle.Bottom:
                            return Border3DSide.Top;
                    }

                    return default(Border3DSide);
                }
            }

            public new Size Size
            {
                get { return Parent.Size; }
                set { Parent.Size = value; }
            }

            public new Size MinimumSize
            {
                get { return Parent.MinimumSize; }
                set { Parent.MinimumSize = value; }
            }

            public new Size MaximumSize
            {
                get { return Parent.MaximumSize; }
                set { Parent.MaximumSize = value; }
            }

            public Control Control
            {
                get { return Controls.Cast<Control>().FirstOrDefault(); }
                set
                {
                    SuspendLayout();
                    Controls.Clear();

                    if (value.HasValue())
                    {
                        value.SuspendLayout();
                        value.Dock = DockStyle.Fill;
                        Controls.Add(value);
                        value.ResumeLayout();
                    }

                    ResumeLayout();
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                base.OnPaint(e);
                e.Graphics.DrawBorder(Border3DSide.All, ClientRectangle);
            }

            public void Close()
            {
                Remove();
            }

            protected override bool OnRemove()
            {
                var e = new CancelEventArgs();

                Closing.InvokeSafely(this, e);

                if (e.Cancel)
                {
                    return false;
                }
                else if (base.OnRemove())
                {
                    Closed.InvokeSafely(this, EventArgs.Empty);
                    return true;
                }

                return false;
            }
        }
    }
}