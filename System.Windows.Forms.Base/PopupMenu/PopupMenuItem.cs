//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Windows.Forms.VisualStyles;
using ContentAlignment = System.Drawing.ContentAlignment;

namespace System.Windows.Forms
{
    partial class PopupMenuEdit
    {
        public class Item : MenuItem
        {
            public Item()
            {
                OwnerDraw = true;
                DrawArgs = new DrawTextEventArgs();
            }

            protected DrawTextEventArgs DrawArgs;

            protected PopupMenuEdit Menu
            {
                get { return (PopupMenuEdit)Parent; }
            }

            public Image Image
            {
                get;
                set;
            }

            protected override void OnMeasureItem(MeasureItemEventArgs e)
            {
                using (var c = new LabelEdit { Text = string.Concat(Text, ((Keys)Shortcut).GetString()), Image = Image, ImageAlign = ContentAlignment.MiddleLeft, TextAlign = ContentAlignment.MiddleRight, Padding = new Padding(6) })
                {
                    e.ItemWidth = c.PreferredSize.Width;
                    e.ItemHeight = Math.Max(Menu.ItemHeight, c.PreferredSize.Height);
                }

                base.OnMeasureItem(e);
            }

            protected override void OnDrawItem(DrawItemEventArgs e)
            {
                var isSelected = (e.State & DrawItemState.Selected) == DrawItemState.Selected;
                var isDisabled = (e.State & DrawItemState.Disabled) == DrawItemState.Disabled;
                var rect = new Rectangle(e.Bounds.Left + Menu.ItemWidth, e.Bounds.Top, e.Bounds.Width - Menu.ItemWidth, e.Bounds.Height);

                e.Graphics.FillRectangle(SystemBrushes.Control, e.Bounds);
                e.Graphics.DrawToolbarButton(e.Bounds, isSelected ? ToolBarState.HotChecked : ToolBarState.Normal);

                rect.Offset(6, 0);

                DrawArgs.Text = Text;
                DrawArgs.Bounds = rect;
                DrawArgs.FormatFlags = TextFormatFlags.VerticalCenter;
                DrawArgs.ForeColor = isDisabled ? ApplicationAppereance.Colors.GrayText : isSelected ? ApplicationAppereance.Colors.ControlHighlightText : ApplicationAppereance.Colors.ControlText;

                e.Graphics.DrawText(DrawArgs);

                if (Image.HasValue())
                {
                    if (isDisabled)
                    {
                        using (var img = Image.MakeDisableEffect())
                        {
                            e.Graphics.DrawImage(img, e.Bounds.Left + 3, e.Bounds.Top + 3, 16, 16);
                        }
                    }
                    else
                    {
                        e.Graphics.DrawImage(Image, e.Bounds.Left + 3, e.Bounds.Top + 3, 16, 16);
                    }
                }

                if (Shortcut != Shortcut.None)
                {
                    DrawArgs.Bounds.Offset(-9, 0);
                    DrawArgs.Text = ((Keys)Shortcut).GetString();
                    DrawArgs.FormatFlags = TextFormatFlags.VerticalCenter | TextFormatFlags.Right;

                    e.Graphics.DrawText(DrawArgs);
                }
            }
        }
    }
}