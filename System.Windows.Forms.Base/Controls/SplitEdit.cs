//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms.Design;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    [Designer(typeof(Designer))]
    public class SplitEdit : BaseEdit
    {
        public SplitEdit()
        {
            TabStop = false;
            InitializeComponent();
        }

        Point DragAt;
        Point DragLocation;

        Panel Panel1Value;
        Control Splitter;
        Panel Panel2Value;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Panel Panel1
        {
            get { return Panel1Value ?? (Panel1Value = new Panel { Dock = DockStyle.Left, BorderStyle = default(Border3DSide), Width = 120 }); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Panel Panel2
        {
            get { return Panel2Value ?? (Panel2Value = new Panel { Dock = DockStyle.Fill, Padding = new Padding(5, 1, 1, 1), BorderStyle = default(Border3DSide) }); }
        }

        protected void InitializeComponent()
        {
            Padding = new Padding(1);

            Controls.Add(Panel1);
            Controls.Add(Panel2);
            Controls.Add(Splitter = new VerticalLine(4) { Dock = DockStyle.None, ForeColor = Color.Transparent, Cursor = Cursors.SizeWE });

            Splitter.MouseDown += OnSplitterMouseDown;
            Splitter.MouseMove += OnSplitterMouseMove;
            Splitter.MouseUp += DragEnd;
            Splitter.MouseLeave += DragEnd;

            Panel2.BringToFront();
            Splitter.BringToFront();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            if (!DragLocation.IsEmpty)
            {
                using (var pen = new Pen(Color.Orange, 3))
                {
                    e.Graphics.DrawLine(pen, DragLocation.X, Top, DragLocation.X + 3, Bottom);
                }
            }
        }

        protected void OnSplitterMouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                int left;

                if (CanMove(out left))
                {
                    DragAt = Cursor.Position;

                    Splitter.Dock = DockStyle.None;
                    Splitter.Left = left;
                    Splitter.Height = Height;
                    Splitter.BackColor = ApplicationAppereance.Colors.Border;
                    Splitter.BringToFront();
                }
            }
        }

        protected void OnSplitterMouseMove(object sender, MouseEventArgs e)
        {
            if (!DragAt.IsEmpty)
            {
                int left;

                if (CanMove(out left))
                {
                    Splitter.Left = left;
                    Splitter.Height = Height;
                    Invalidate(false);
                }
            }
        }

        protected void DragEnd(object sender, EventArgs e)
        {
            if (!DragAt.IsEmpty)
            {
                int width = Splitter.Left - Padding.Left;

                if (width < Panel1.MinWidth )
                {
                    width = Panel1.MinWidth;
                }

                if (width > Panel1.MaxWidth)
                {
                    width = Panel1.MaxWidth;
                }

                DragAt = Point.Empty;
                Panel1.Width = width;
                Splitter.BackColor = Color.Transparent;
            }
        }

        protected bool CanMove(out int left)
        {
            int delta = DragAt.IsEmpty ? 0 : Cursor.Position.X - DragAt.X;
            int width = (left = (Panel1.Right + delta)) - Padding.Left;

            if (width >= Panel1.MinWidth && (width <= Panel1.MaxWidth || Panel1.MaxWidth.IsZero()))
            {
                return true;
            }

            return false;
        }

        public class Panel : BaseEdit
        {
            public Panel()
            {
                Padding = new Padding(1);
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public int MinWidth
            {
                get { return base.MinimumSize.Width; }
                set { base.MinimumSize = new Size(value, 0); }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public int MaxWidth
            {
                get { return base.MaximumSize.Width; }
                set { base.MaximumSize = new Size(value, 0); }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public override DockStyle Dock
            {
                get { return base.Dock; }
                set { base.Dock = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public new Padding Padding
            {
                get { return base.Padding; }
                set { base.Padding = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public new Point Location
            {
                get { return base.Location; }
                set { base.Location = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public new Size Size
            {
                get { return base.Size; }
                set { base.Size = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public new bool TabStop
            {
                get { return base.TabStop; }
                set { base.TabStop = value; }
            }

            [Browsable(false)]
            [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
            public new int TabIndex
            {
                get { return base.TabIndex; }
                set { base.TabIndex = value; }
            }

            protected override void OnSizeChanged(EventArgs e)
            {
                var owner = Parent as SplitEdit;

                base.OnSizeChanged(e);

                if (owner.HasValue() && owner.Splitter.HasValue() && Dock == DockStyle.Left)
                {
                    owner.Splitter.Left = Right;
                    owner.Splitter.Height = Parent.Height;
                }
            }

            protected override void OnPaint(PaintEventArgs e)
            {
                if (DeveloperEnvironment.DesignMode)
                {
                    BorderStyle = Border3DSide.All;
                }

                base.OnPaint(e);
            }
        }

        public class Designer : ControlDesigner
        {
            public override void Initialize(IComponent component)
            {
                var edit = component as SplitEdit;

                base.Initialize(component);

                EnableDesignMode(edit.Panel1, "Panel1");
                EnableDesignMode(edit.Panel2, "Panel2");
            }
        }
    }
}
