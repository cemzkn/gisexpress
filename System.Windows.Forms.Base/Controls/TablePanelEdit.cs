//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    public class TablePanelEdit : TableLayoutPanel
    {
        public TablePanelEdit()
        {
            base.AutoSize = true;
            base.AutoSizeMode = AutoSizeMode.GrowAndShrink;

            TabStop = false;
            PaintEmptyCells = false;

            SetStyle(ControlStyles.Selectable, false);
            SetStyle(ControlStyles.SupportsTransparentBackColor, true);
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool TransparentHit
        {
            get;
            set;
        }

        [Category(Categories.Appearance)]
        [DefaultValue(default(Border3DSide))]
        public new Border3DSide BorderStyle
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool PaintEmptyCells
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Border3DSide CellBorderStyle
        {
            get;
            set;
        }

        public void Clear()
        {
            RowCount = 0;
            ColumnCount = 0;
            Controls.Clear();
            RowStyles.Clear();
            ColumnStyles.Clear();
        }

        public int AddColumn()
        {
            return AddColumn(SizeType.AutoSize, 0);
        }

        public int AddColumn(SizeType sizeType, float width)
        {
            int n = ColumnStyles.Add(new ColumnStyle(sizeType, Math.Max(0, width)));
            ColumnCount = ColumnStyles.Count;
            return n;
        }

        public int AddRow()
        {
            return AddRow(SizeType.AutoSize, 0);
        }

        public int AddRow(SizeType sizeType, float height)
        {
            int n = RowStyles.Add(new RowStyle(sizeType, height));
            RowCount = RowStyles.Count;
            return n;
        }

        public Rectangle GetBounds()
        {
            return new Rectangle(0, 0, Width, Height);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            if (Visible && Controls.Count > 0)
            {
                e.Graphics.DrawBorder(BorderStyle, GetBounds());
            }
        }

        public Control AddSeperator()
        {
            if (RowCount == 1)
            {
                return AddVerticalSeperator();
            }
            else if (ColumnCount == 1)
            {
                return AddHorizontalSeperator();
            }

            return default(Control);
        }

        public VerticalLine AddVerticalSeperator()
        {
            var line = new VerticalLine();

            Controls.Add(line, AddColumn(), 0);
            SetRowSpan(line, RowCount);

            return line;
        }

        public VerticalLine InsertVerticalSeperator()
        {
            return InsertVerticalSeperator(0);
        }

        public VerticalLine InsertVerticalSeperator(int row)
        {
            var line = new VerticalLine();

            InsertColumn(line, row, SizeType.Absolute, 8);

            if (row == 0)
            {
                SetRowSpan(line, RowCount);
            }

            return line;
        }

        public HorizontalLine AddHorizontalSeperator()
        {
            var line = new HorizontalLine();

            Controls.Add(line, 0, AddRow(SizeType.Absolute, 1));
            SetColumnSpan(line, ColumnCount);

            return line;
        }

        public ColumnStyle InsertColumn(Control control)
        {
            return InsertColumn(control, 0, SizeType.AutoSize, 0F);
        }

        public ColumnStyle InsertColumn(Control control, int row)
        {
            return InsertColumn(control, row, SizeType.AutoSize, 0F);
        }

        public ColumnStyle InsertColumn(Control control, SizeType sizeType, float width)
        {
            return InsertColumn(control, 0, sizeType, width);
        }

        public ColumnStyle InsertColumn(Control control, int row, SizeType sizeType, float width)
        {
            ColumnStyle value;
            int n = Math.Max(0, ColumnStyles.Count - 1);

            //todo
            ColumnStyles.Insert(n, value = new ColumnStyle(sizeType, width));
            Controls.Add(control, n, row);
            ColumnCount = ColumnStyles.Count;

            return value;
        }

        public bool RemoveColumn(Control control)
        {
            if (control.HasValue())
            {
                int row = GetRow(control);
                int column = GetColumn(control);

                if (column >= 0)
                {
                    using (control)
                    {
                        for (int n = column + 1; n < ColumnCount; n++)
                        {
                            Control c = GetControlFromPosition(n, row);

                            if (c.HasValue())
                            {
                                SetColumn(c, n - 1);
                            }
                        }

                        Controls.Remove(control);

                        if (ColumnCount > 0)
                        {
                            ColumnStyles.RemoveAt(ColumnCount - 1);
                            ColumnCount = ColumnStyles.Count;
                        }
                    }

                    return true;
                }
            }

            return false;
        }

        protected override void OnCellPaint(TableLayoutCellPaintEventArgs e)
        {
            base.OnCellPaint(e);

            if (CellBorderStyle != default(Border3DSide))
            {
                if (PaintEmptyCells || GetControlFromPosition(e.Column, e.Row).HasValue())
                {
                    e.Graphics.DrawBorder(CellBorderStyle, e.CellBounds);
                }
            }
        }

        protected override void WndProc(ref Message e)
        {
            base.WndProc(ref e);

            if (TransparentHit)
            {
                this.WndProcTransparentHit(ref e);
            }
        }
    }
}