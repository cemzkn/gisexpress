//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    public class ProgressEdit : BaseEdit
    {
        public ProgressEdit()
        {
            MaximumValue = 100;
            MinimumSize = new Size(48, 16);
            BorderStyle = Border3DSide.All;
            BackColor = ApplicationAppereance.Colors.Window;
        }

        protected int Delta;
        protected Timer MarqueeTimer;
        protected Brush MarqueeBrush;
        protected const int MarqueeWidth = 64;

        [DefaultValue(false)]
        [Category(Categories.Appearance)]
        public bool Marquee
        {
            get { return MarqueeTimer.HasValue(); }
            set
            {
                if (value)
                {
                    if (MarqueeTimer.IsNull())
                    {
                        MarqueeTimer = new Timer { Enabled = false, Interval = 25 };
                        MarqueeTimer.Tick += OnTimerTick;
                    }

                    MarqueeTimer.Start();
                }
                else if (MarqueeTimer.HasValue())
                {
                    MarqueeTimer.Stop();
                    MarqueeTimer.DisposeSafely();
                    MarqueeTimer = null;
                }
            }
        }

        [DefaultValue(0)]
        [Category(Categories.Appearance)]
        public int Value
        {
            get { return (int)EditValueObject; }
            set
            {
                EditValue = value;
                Invalidate(false);
                Update();
            }
        }

        public override object EditValue
        {
            get { return EditValueObject; }
            set { EditValueObject = value; }
        }

        [DefaultValue(0)]
        [Category(Categories.Appearance)]
        public int MinimumValue
        {
            get;
            set;
        }

        [DefaultValue(100)]
        [Category(Categories.Appearance)]
        public int MaximumValue
        {
            get;
            set;
        }

        protected virtual void OnTimerTick(object sender, EventArgs e)
        {
            if (Delta < Width)
            {
                Delta += 3;
            }
            else
            {
                Delta = -MarqueeWidth;
            }

            Invalidate(false);
            Update();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            Rectangle bounds = ClientRectangle;

            if (bounds.Width > 0 && bounds.Height > 0)
            {
                if (Marquee)
                {
                    e.Graphics.FillRectangle(MarqueeBrush, Rectangle.FromLTRB(Math.Max(3, Delta), 3, Math.Min(Delta + MarqueeWidth, Width - 3), bounds.Bottom - 3));
                }
                else
                {
                    var percent = Value / (float)MaximumValue;
                    var fillRect = RectangleF.FromLTRB(3, 3, bounds.Width * percent - 3, bounds.Height - 3);

                    DrawArgs.Bounds = bounds;
                    DrawArgs.Text = "{0}%".FormatInvariant(percent * 100);
                    DrawArgs.Alignment = ContentAlignment.MiddleCenter;

                    e.Graphics.FillRectangle(ApplicationAppereance.Brushes.Highlight, fillRect);
                    e.Graphics.DrawText(DrawArgs);
                }
            }

            base.OnPaint(e);
        }

        protected override void OnSizeChanged(EventArgs e)
        {
            base.OnSizeChanged(e);

            if (ClientRectangle.Width > 0 && ClientRectangle.Height > 0)
            {
                MarqueeBrush = new LinearGradientBrush(ClientRectangle, ColorTranslator.FromHtml("#99BAE5"), ColorTranslator.FromHtml("#F9C17C"), LinearGradientMode.Horizontal);
            }
        }
    }
}
