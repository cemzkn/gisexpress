//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;

namespace System.Windows.Forms
{
    public class DateTimePickerEdit : BaseEdit, ISupportInitialize
    {
        public DateTimePickerEdit()
        {
            NumRows = 8;
            NumColumns = 7;
            ValueRegions = new ValueRegionCollection();
            Initialize();
        }

        protected int NumRows;
        protected int NumColumns;
        protected bool Initializing;
        protected DateTime PreviewDate;

        protected Point Point;
        protected ValueRegionCollection ValueRegions;

        protected DropDownEdit MonthsEdit;
        protected NumericEdit<int> YearEdit;

        public new DateTime EditValue
        {
            get { return (DateTime)base.EditValue; }
            set { base.EditValue = value; }
        }

        protected override void OnEditValueChanged()
        {
            using (this.Begin())
            {
                PreviewDate = EditValue;
                YearEdit.EditValue = EditValue.Year;
                MonthsEdit.EditValue = (Months)EditValue.Month;
            }

            base.OnEditValueChanged();
        }

        void ISupportInitialize.BeginInit()
        {
            Initializing = true;
        }

        void ISupportInitialize.EndInit()
        {
            Initializing = false;
        }

        protected void Initialize()
        {
            Padding = new Padding(8);
            MinimumSize = new Size(Padding.Horizontal + NumColumns * 36, Padding.Vertical + NumRows * 24);

            YearEdit = new NumericEdit<int>
            {
                Width = 48,
                MaxLength = 4,
                MinimumValue = 1900,
                MaximumValue = 9999,
            };

            MonthsEdit = new DropDownEdit
            {
                Width = 100,
                ItemHeight = YearEdit.Height
            };

            foreach (Months value in Enums.GetValues<Months>())
            {
                MonthsEdit.Items.Add(value, Enums.GetDisplayName(value));
            }

            YearEdit.EditValueChanged += OnPreviewDateChanged;
            MonthsEdit.SelectedIndexChanged += OnPreviewDateChanged;

            Controls.Add(YearEdit);
            Controls.Add(MonthsEdit);

            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);

            EditValue = DateTime.Now;
        }

        protected void ReDraw(Graphics g)
        {
            g.SetHighQuality();
            PaintCalendar(g);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            ReDraw(e.Graphics);
            base.OnPaint(e);
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (Point != e.Location)
            {
                Point = e.Location;
                Invalidate(false);
            }
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            Point = Point.Empty;
            Invalidate(false);
            base.OnMouseLeave(e);
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);
            this.UpdateFocus();
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                ValueRegion region = ValueRegions.FirstOrDefault(r => r.Bounds.Contains(e.Location));

                if (region.HasValue())
                {
                    if (region.Value is int)
                    {
                        using (this.Begin())
                        {
                            EditValue = new DateTime(PreviewDate.Year, PreviewDate.Month, (int)region.Value);
                        }
                    }
                    else if ('N'.Equals(region.Value))
                    {
                        using (this.Begin())
                        {
                            PreviewDate = PreviewDate.AddMonths(1);
                            YearEdit.EditValue = PreviewDate.Year;
                            MonthsEdit.EditValue = (Months)PreviewDate.Month;
                        }

                        Invalidate(false);
                        this.UpdateFocus();
                    }
                    else if ('P'.Equals(region.Value))
                    {
                        using (this.Begin())
                        {
                            PreviewDate = PreviewDate.AddMonths(-1);
                            YearEdit.EditValue = PreviewDate.Year;
                            MonthsEdit.EditValue = (Months)PreviewDate.Month;
                        }

                        Invalidate(false);
                        this.UpdateFocus();
                    }
                }
            }

            base.OnMouseUp(e);
        }

        protected void OnPreviewDateChanged(object sender, EventArgs e)
        {
            if (!Initializing && MonthsEdit.EditValue.HasValue())
            {
                PreviewDate = new DateTime(YearEdit.EditValue, (int)(Months)MonthsEdit.EditValue, 1);
                Invalidate(false);
                this.UpdateFocus();
            }
        }

        protected void PaintCalendar(Graphics g)
        {
            Rectangle rect = Rectangle.Empty;
            int rowHeight = (Height - Padding.Vertical) / NumRows;

            ValueRegions.Clear();

            for (int n = 0; n < NumRows; n++)
            {
                rect.X = Padding.Left;
                rect.Y = Padding.Top + n * rowHeight;
                rect.Width = Width - Padding.Horizontal;
                rect.Height = rowHeight;

                switch (n)
                {
                    case 0:
                        OnPaintHeader(g, rect);
                        break;
                    case 1:
                        OnPaintDays(g, rect);
                        break;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        OnPaintWeek(g, rect, PreviewDate.Year, PreviewDate.Month, n - 2);
                        break;
                }
            }
        }

        protected virtual void OnPaintHeader(Graphics g, Rectangle bounds)
        {
            int centerY = (bounds.Top + bounds.Bottom) / 2;

            MonthsEdit.Location = new Point(bounds.Left + (bounds.Width - MonthsEdit.Width - YearEdit.Width - 16) / 2, bounds.Top + (bounds.Height - MonthsEdit.Height) / 2);
            YearEdit.Location = new Point(MonthsEdit.Right + 8, bounds.Top + (bounds.Height - YearEdit.Height) / 2);

            using (var path = new GraphicsPath())
            {
                using (var pen = new Pen(Color.Empty, 5) { StartCap = LineCap.ArrowAnchor })
                {
                    path.AddLine(bounds.Left + pen.Width + 1, centerY, bounds.Left + pen.Width + 2, centerY);

                    pen.Color = ValueRegions.Add(path.GetBounds(g.Transform, pen), 'P').Contains(Point) ? ApplicationAppereance.Colors.Highlight : ForeColor;
                    g.DrawPath(pen, path);
                }

                using (var pen = new Pen(Color.Empty, 5) { EndCap = LineCap.ArrowAnchor })
                {
                    path.Reset();
                    path.AddLine(bounds.Right - pen.Width - 3, centerY, bounds.Right - pen.Width - 2, centerY);

                    pen.Color = ValueRegions.Add(path.GetBounds(g.Transform, pen), 'N').Contains(Point) ? ApplicationAppereance.Colors.Highlight : ForeColor;
                    g.DrawPath(pen, path);
                }
            }
        }

        protected virtual void OnPaintDays(Graphics g, Rectangle bounds)
        {
            Rectangle rect = bounds;

            rect.Width = bounds.Width / 7;

            var args = new DrawTextEventArgs
            {
                Font = Font,
                Bounds = bounds,
                ForeColor = ForeColor,
                Alignment = ContentAlignment.MiddleCenter
            };

            for (int n = 0; n < 7; n++)
            {
                rect.X = Padding.Left + n * rect.Width;

                args.Bounds = rect;
                args.Text = Enums.GetDisplayName((ShortDays)n + 1);

                g.DrawText(args);
            }

            g.DrawBorder(Border3DSide.Bottom, bounds);
        }

        protected virtual void OnPaintWeek(Graphics g, Rectangle bounds, int year, int month, int week)
        {
            Rectangle buttonRect;
            Rectangle rect = bounds;
            DateTime value = new DateTime(year, month, 1);

            rect.Width = bounds.Width / 7;
            value = value.AddDays(Math.Max(0, week * 7 - (GetDayOfWeek(value) - 1)));

            var args = new DrawTextEventArgs
            {
                Bounds = bounds,
                Font = Font,
                Alignment = ContentAlignment.MiddleCenter,
                FormatFlags = TextFormatFlags.EndEllipsis
            };

            for (int n = 0; n < 7; n++)
            {
                rect.X = Padding.Left + n * rect.Width;
                args.Bounds = rect;

                if (GetDayOfWeek(value) == n + 1 && value.Month == month)
                {
                    args.ForeColor = ForeColor;
                    args.Text = Convert.ToString(value.Day);

                    if (EditValue.Date == value.Date)
                    {
                        buttonRect = rect;
                        buttonRect.Inflate(-1, -1);

                        g.DrawToolbarButton(buttonRect, Forms.VisualStyles.ToolBarState.HotChecked);
                    }
                    else if (ValueRegions.Add(rect, value.Day).Contains(Point))
                    {
                        buttonRect = rect;
                        buttonRect.Inflate(-1, -1);

                        g.DrawToolbarButton(buttonRect, Forms.VisualStyles.ToolBarState.Hot);
                    }

                    g.DrawText(args);

                    value = value.AddDays(1);
                }
            }
        }

        protected int GetDayOfWeek(DateTime value)
        {
            return value.DayOfWeek == DayOfWeek.Sunday ? 7 : (int)value.DayOfWeek;
        }

        protected class ValueRegion
        {
            public object Value;
            public Rectangle Bounds;
        }

        protected class ValueRegionCollection : Collection<ValueRegion>
        {
            public bool Contains(Point point)
            {
                return Items.Any(r => r.Bounds.Contains(point));
            }

            public Rectangle Add(RectangleF bounds, object value)
            {
                return Add(bounds.ToRectangle(), value);
            }

            public Rectangle Add(Rectangle bounds, object value)
            {
                Add(new ValueRegion
                {
                    Value = value,
                    Bounds = bounds
                });

                return bounds;
            }
        }
    }
}
