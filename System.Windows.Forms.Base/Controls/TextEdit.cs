//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Globalization;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    public class TextEdit : LabelEdit, IEditableObject
    {
        public TextEdit()
        {
            TabStop = true;
            SetStyle(ControlStyles.Selectable, true);

            MinimumSize = new Size(16, 22);
            BorderStyle = Border3DSide.All;
            BackColor = ApplicationAppereance.Colors.Window;
        }

        protected TextEditBase BaseEditValue;
        protected const char PasswordCharValue = '●';

        public override bool AutoSize
        {
            get { return false; }
            set { }
        }

        [DefaultValue(false)]
        [Category(Categories.Appearance)]
        public bool IsPassword
        {
            get { return PasswordChar.Equals(PasswordCharValue); }
            set { PasswordChar = PasswordCharValue; }
        }

        [Browsable(false)]
        [DefaultValue(PasswordCharValue)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public char PasswordChar
        {
            get { return OwnerEdit.PasswordChar; }
            set { OwnerEdit.PasswordChar = value; }
        }

        protected internal TextEditBase OwnerEdit
        {
            get
            {
                if (BaseEditValue.IsNull())
                {
                    Controls.Add(BaseEditValue = OnCreateBaseEdit());
                }

                return BaseEditValue;
            }
        }

        public void BeginEdit()
        {
            BeginEdit(Point.Empty, default(ITypeDescriptorContext));
        }

        protected override void OnBeginEdit(Point point, ITypeDescriptorContext context)
        {
            Invalidate(false);
            OwnerEdit.BeginEdit(context);
        }

        public void CancelEdit()
        {
        }

        public void EndEdit()
        {
            var e = new CancelEventArgs();

            OnValidating(e);

            if (e.Cancel)
            {
                OwnerEdit.Show();
            }
            else
            {
                OwnerEdit.Hide();
                OnLeave(e);
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override ContentAlignment TextAlign
        {
            get { return base.TextAlign; }
            set
            {
                switch (value)
                {
                    case ContentAlignment.TopRight:
                    case ContentAlignment.MiddleRight:
                    case ContentAlignment.BottomRight:
                        OwnerEdit.TextAlign = HorizontalAlignment.Right;
                        break;
                    case ContentAlignment.TopLeft:
                    case ContentAlignment.MiddleLeft:
                    case ContentAlignment.BottomLeft:
                        OwnerEdit.TextAlign = HorizontalAlignment.Left;
                        break;
                    default:
                        OwnerEdit.TextAlign = HorizontalAlignment.Center;
                        break;
                }

                base.TextAlign = value;
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual bool Locked
        {
            get { return OwnerEdit.ReadOnly; }
            set { OwnerEdit.ReadOnly = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override bool ReadOnly
        {
            get { return OwnerEdit.ReadOnly; }
            set { OwnerEdit.ReadOnly = value; }
        }

        public override DockStyle Dock
        {
            get
            {
                return base.Dock;
            }
            set
            {
                base.Dock = value;
                base.AutoSize = value != DockStyle.Fill;
            }
        }

        public int MaxLength
        {
            get { return OwnerEdit.MaxLength; }
            set
            {
                OwnerEdit.MaxLength = value;

                if (value > 0)
                {
                    Width = Math.Max(Width, ControlHelper.MeasureText(new string('0', value), Font).Width + Padding.Horizontal);
                }
            }
        }

        [Browsable(false)]
        public string SelectedText
        {
            get { return OwnerEdit.SelectedText; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public CharacterCasing CharacterCasing
        {
            get { return OwnerEdit.CharacterCasing; }
            set { OwnerEdit.CharacterCasing = value; }
        }

        protected override void OnClick(EventArgs e)
        {
            base.OnClick(e);
            OnEnter(e);
            OwnerEdit.Select();
        }

        protected override void OnEnter(EventArgs e)
        {
            base.OnEnter(e);
            BeginEdit();
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            if (OwnerEdit.Visible)
            {
                e.Graphics.DrawBorder(BorderStyle, ClientRectangle);
            }
            else
            {
                base.OnPaint(e);
            }
        }

        protected override string OnDisplayText(object value, IFormatProvider provider)
        {
            if (IsPassword)
            {
                return new string(PasswordChar, OwnerEdit.Text.Length);
            }

            return base.OnDisplayText(value, provider);
        }

        protected virtual TextEditBase OnCreateBaseEdit()
        {
            return new TextEditBase(this);
        }

        protected internal class TextEditBase : TextBox, ISupportInitialize
        {
            public TextEditBase(TextEdit owner)
            {
                Owner = owner;
                Visible = false;
                ShortcutsEnabled = false;
                BorderStyle = BorderStyle.None;
                BackColor = ApplicationAppereance.Colors.Window;
            }

            protected byte Init;
            protected TextEdit Owner;

            public void BeginInit()
            {
                Init++;
            }

            public void EndInit()
            {
                Init--;
            }

            public void BeginEdit(ITypeDescriptorContext context)
            {
                if (Init == 0)
                {
                    if (Visible)
                    {
                        UpdateValue(context);
                    }
                    else
                    {
                        using (this.Begin())
                        {
                            Font = Owner.Font;
                            SetBoundsCore(Owner.Padding.Left, (Owner.Height - Height) / 2, Owner.Width - Owner.Padding.Horizontal - 3, Height, BoundsSpecified.All);
                            Show();

                            if (context.IsNull())
                            {
                                UpdateValue(context);
                            }
                        }
                    }
                }
            }

            protected void UpdateValue(ITypeDescriptorContext context)
            {
                if (!Equals(Text, Owner.EditValue ?? string.Empty))
                {
                    Text = Convert.ToString(Owner.EditValue, CultureInfo.InvariantCulture);
                }

                SelectAll();
                Select();
            }

            protected override void OnTextChanged(EventArgs e)
            {
                if (!Equals(Owner.Text, Text))
                {
                    Owner.Text = Text;
                }

                base.OnTextChanged(e);
            }

            protected override void OnKeyDown(KeyEventArgs e)
            {
                Owner.OnKeyDown(e);
                base.OnKeyDown(e);
            }

            protected internal void ProcessesMessage(ref Message e)
            {
                if (IsHandleCreated)
                {
                    Message e2 = e;
                    e2.HWnd = Handle;
                    base.WndProc(ref e2);
                }
            }

            protected override bool ProcessCmdKey(ref Message e, Keys keyData)
            {
                if (keyData == (Keys.Control | Keys.C))
                {
                    Clipboard.SetText(SelectionLength > 0 ? SelectedText : Text);
                }
                else if (keyData == (Keys.Control | Keys.X))
                {
                    if (SelectionLength > 0)
                    {
                        Clipboard.SetText(SelectedText);
                        SelectedText = string.Empty;
                    }
                    else
                    {
                        Clipboard.SetText(Text);
                        Text = string.Empty;
                    }
                }
                else if (keyData == (Keys.Control | Keys.V))
                {
                    SelectedText = Clipboard.GetText();
                }

                if (base.ProcessCmdKey(ref e, keyData))
                {
                    return true;
                }

                if (Visible)
                {
                    switch (keyData)
                    {
                        case Keys.Tab:
                            OnLeave(EventArgs.Empty);
                            return true;
                        case Keys.Enter:
                            OnLeave(EventArgs.Empty);
                            return true;
                        case Keys.Escape:
                            EndEdit(true);
                            return true;
                    }
                }

                return false;
            }

            protected override void OnFontChanged(EventArgs e)
            {
                Height = Font.Height;
                base.OnFontChanged(e);
            }

            protected override void OnReadOnlyChanged(EventArgs e)
            {
                BackColor = SystemColors.Window;
                base.OnReadOnlyChanged(e);
            }

            protected override void OnLeave(EventArgs e)
            {
                base.OnLeave(e);

                if (Init == 0)
                {
                    EndEdit(false);
                }
            }

            protected override void OnLostFocus(EventArgs e)
            {
                base.OnLostFocus(e);

                if (Init == 0)
                {
                    OnLeave(e);
                    Owner.OnLostFocus(e);
                }
            }

            protected override void OnValidating(CancelEventArgs e)
            {
                base.OnValidating(e);

                if (Init == 0)
                {
                    OnLeave(e);
                }
            }

            protected void EndEdit(bool cancel)
            {
                if (Init == 0)
                {
                    using (this.Begin())
                    {
                        if (!cancel)
                        {
                            Owner.EditValue = Owner.OnParse(Text);
                        }

                        Owner.EndEdit();
                    }
                }
            }

            protected override void WndProc(ref Message e)
            {
                if (!OSEnvironment.IsWindows)
                {
                    if (Init == 0 && Visible && e.Msg == (int)WindowsMessage.KillFocus)
                    {
                        return;
                    }
                }

                base.WndProc(ref e);
            }

            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);

                if (disposing)
                {
                    Owner = null;
                }
            }
        }
    }
}
