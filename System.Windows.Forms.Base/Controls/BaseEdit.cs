//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Text;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public partial class BaseEdit : ScrollableControl, ISupportEditValue, ISupportReadOnly, ISupportPaint
    {
        public BaseEdit()
        {
            SetStyle(ControlStyles.Selectable, false);
            SetStyle(ControlStyles.ResizeRedraw, true);
            SetStyle(ControlStyles.SupportsTransparentBackColor, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);

            TabStop = false;
            Font = ApplicationAppereance.Fonts.DefaultFont;

            DrawArgs = new DrawTextEventArgs
            {
                Alignment = ContentAlignment.MiddleLeft
            };
        }

        public event Action Completed;
        public event EventHandler EditValueChanged;

        protected Form Owner;
        protected PropertyCollection Props;
        protected DrawTextEventArgs DrawArgs;
        protected GlyphButtonCollection ButtonList;
        protected object EditValueObject;

        [Browsable(false)]
        public Form Form
        {
            get { return FindForm(); }
        }

        [Browsable(false)]
        public BaseForm FormBase
        {
            get { return Form as BaseForm; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual bool ReadOnly
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMouseOver
        {
            get { return Visible && Enabled && ClientRectangle.Contains(PointToClient(MousePosition)); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool PreviewTextEnabled
        {
            get { return PreviewText.HasValue(); }
            set { PreviewText = value ? new StringBuilder() : default(StringBuilder); }
        }

        [Browsable(false)]
        public StringBuilder PreviewText
        {
            get;
            protected set;
        }

        [Browsable(false)]
        public PropertyCollection Properties
        {
            get { return Props ?? (Props = new PropertyCollection()); }
        }

        [Browsable(false)]
        public GlyphButtonCollection GlyphButtons
        {
            get { return ButtonList ?? (ButtonList = new GlyphButtonCollection(this, ButtonClick)); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual Border3DSide BorderStyle
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual Border3DSide SizableSides
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Font Font
        {
            get { return base.Font; }
            set { base.Font = value; }
        }

        [Category(Categories.Appearance)]
        [DefaultValue(8.25F)]
        public virtual float FontSize
        {
            get { return Font.Size; }
            set { Font = new Font(Font.FontFamily, value, Font.Style, Font.Unit, Font.GdiCharSet); }
        }

        [Category(Categories.Appearance)]
        [DefaultValue(FontStyle.Regular)]
        public virtual FontStyle FontStyle
        {
            get { return Font.Style; }
            set { Font = new Font(Font.FontFamily, Font.Size, value, Font.Unit, Font.GdiCharSet); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Color BackColor
        {
            get { return base.BackColor; }
            set { base.BackColor = value; }
        }

        public void BeginEdit(Point point, ITypeDescriptorContext context)
        {
            if (Enabled)
            {
                OnBeginEdit(point, context);
            }
        }

        protected virtual void OnBeginEdit(Point point, ITypeDescriptorContext context)
        {
            GlyphButton button = GlyphButtons.GetButtonPointAt(point);

            if (button.HasValue())
            {
                GlyphButtons.OnButtonClick(button, EventArgs.Empty);
            }
            else
            {
                PerformClick();
            }
        }

        [Browsable(false)]
        [DefaultValue(default(string))]
        public string NullText
        {
            get;
            set;
        }

        [Browsable(false)]
        [DefaultValue(default(string))]
        public override string Text
        {
            get { return base.Text; }
            set { base.Text = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual object EditValue
        {
            get { return EditValueObject; }
            set
            {
                if (!Equals(EditValueObject, value))
                {
                    base.Text = OnDisplayText(EditValueObject = value);
                    OnEditValueChanged();
                }
            }
        }

        protected virtual void OnEditValueChanged()
        {
            Properties.HasChanges = true;
            Invalidate(false);
            EditValueChanged.InvokeSafely(this, EventArgs.Empty);
        }

        public new bool Disposing
        {
            get;
            protected set;
        }

        [Browsable(false)]
        public bool ShiftModifier
        {
            get { return ModifierKeys == Keys.Shift; }
        }

        [Browsable(false)]
        public bool ControlModifier
        {
            get { return ModifierKeys == Keys.Control; }
        }

        [Browsable(false)]
        public virtual Rectangle WorkingArea
        {
            get
            {
                var dx = default(int);
                var dy = default(int);

                if (VerticalScroll.Visible || Height < AutoScrollMinSize.Height)
                {
                    dx = SystemInformation.VerticalScrollBarWidth;
                }

                if (HorizontalScroll.Visible || Width < AutoScrollMinSize.Width)
                {
                    dy = SystemInformation.HorizontalScrollBarHeight;
                }

                return new Rectangle(Padding.Left, Padding.Top, Width - Padding.Horizontal - dx, Height - Padding.Vertical - dy);
            }
        }

        [Browsable(false)]
        public Point ScreenLocation
        {
            get { return PointToScreen(Point.Empty); }
        }

        [Browsable(false)]
        public Rectangle ScreenBounds
        {
            get { return RectangleToScreen(ClientRectangle); }
        }

        public void PerformClick()
        {
            OnClick(EventArgs.Empty);
        }

        public void PerformCompleted()
        {
            Completed.InvokeSafely();
        }

        protected void ButtonClick(object sender, EventArgs e)
        {
            var button = sender as GlyphButton;

            if (button.HasValue())
            {
                OnButtonClick(button, e);
            }
        }

        protected virtual void OnButtonClick(GlyphButton button, EventArgs e)
        {
        }

        protected void SendKey(Keys keys)
        {
            SendKeys.Send(string.Concat("{", Enums.GetName(keys).ToUpperInvariant(), "}"));
        }

        public virtual void PaintValue(PaintValueEventArgs e)
        {
            OnPaintValue(e.Graphics, e.Bounds, default(Image), e.Value);
        }

        public void PaintValue(Graphics g, Rectangle bounds, object value)
        {
            OnPaintValue(g, bounds, default(Image), value);
        }

        public bool UpdateLayout(bool performLayout)
        {
            if (!IsDisposed && !Disposing && Width > 0)
            {
                if (Properties.HasChanges || performLayout)
                {
                    try
                    {
                        if (OnUpdateLayout(performLayout))
                        {
                            return true;
                        }
                    }
                    finally
                    {
                        Properties.HasChanges = false;
                    }
                }
            }

            return false;
        }

        protected virtual bool OnUpdateLayout(bool performLayout)
        {
            return true;
        }

        protected override bool ShowFocusCues
        {
            get { return false; }
        }

        protected virtual bool ShowFocusRectangle
        {
            get { return CanSelect; }
        }

        protected override void OnGotFocus(EventArgs e)
        {
            if (ShowFocusRectangle)
            {
                Invalidate(false);
            }

            base.OnGotFocus(e);
        }

        protected override void OnLostFocus(EventArgs e)
        {
            if (ShowFocusRectangle)
            {
                Invalidate(false);
            }

            base.OnLostFocus(e);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            e.Graphics.DrawBorder(BorderStyle, ClientRectangle);

            if (ShowFocusRectangle && Focused)
            {
                ControlPaint.DrawFocusRectangle(e.Graphics, ClientRectangle);
            }
        }

        protected void OnPaintValue(Graphics g, Rectangle bounds, object value)
        {
            OnPaintValue(g, bounds, default(Image), value);
        }

        protected virtual void OnPaintValue(Graphics g, Rectangle bounds, Image image, object value)
        {
            string s = OnDisplayText(value);

            DrawArgs.Font = Font;
            DrawArgs.Bounds = bounds;

            if (string.IsNullOrEmpty(s))
            {
                if (!string.IsNullOrEmpty(NullText))
                {
                    DrawArgs.Text = NullText;
                    DrawArgs.ForeColor = ApplicationAppereance.Colors.GrayText;
                    g.DrawText(DrawArgs);
                }
            }
            else
            {
                DrawArgs.Text = s;
                DrawArgs.ForeColor = ForeColor;
                g.DrawText(DrawArgs);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            ControlExtensions.UpdateFocus(this);
            base.OnMouseDown(e);
        }

        protected override bool IsInputKey(Keys keyData)
        {
            switch (keyData)
            {
                case Keys.Up:
                case Keys.Down:
                case Keys.PageUp:
                case Keys.PageDown:
                case Keys.Home:
                case Keys.End:
                    return true;
            }

            return base.IsInputKey(keyData);
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Back)
            {
                if (PreviewTextEnabled && PreviewText.Length > 0)
                {
                    PreviewText.Length--;
                    OnPreviewTextChanged(PreviewText.ToString());
                }
            }

            base.OnKeyDown(e);
        }

        protected override void OnKeyPress(KeyPressEventArgs e)
        {
            base.OnKeyPress(e);

            if (PreviewTextEnabled && !char.IsControl(e.KeyChar))
            {
                PreviewText.Append(e.KeyChar);
                OnPreviewTextChanged(PreviewText.ToString());
            }
        }

        protected virtual void OnPreviewTextChanged(string value)
        {
        }

        protected override void OnParentChanged(EventArgs e)
        {
            Form c = Form;

            if (c.HasValue())
            {
                if (Owner.HasValue())
                {
                    Owner.SizeChanged -= OnFormSizeChanged;
                }

                (Owner = c).SizeChanged += OnFormSizeChanged;
            }

            base.OnParentChanged(e);
        }

        protected virtual void OnFormSizeChanged(object sender, EventArgs e)
        {
        }

        public string DisplayText(object value, IFormatProvider provider)
        {
            return OnDisplayText(value, provider);
        }

        protected string OnDisplayText(object value)
        {
            return OnDisplayText(value, Localization.Language);
        }

        protected virtual string OnDisplayText(object value, IFormatProvider provider)
        {
            return value as string ?? Convert.ToString(value, provider);
        }

        protected override void Dispose(bool disposing)
        {
            try
            {
                if (disposing)
                {
                    if (Owner.HasValue())
                    {
                        Owner.SizeChanged -= OnFormSizeChanged;
                        Owner = null;
                    }
                }

                base.Dispose(Disposing = disposing);
            }
            catch (Exception e)
            {
                e.Print();
            }
        }
    }
}
