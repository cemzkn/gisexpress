//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class GlyphButton : ButtonEdit
    {
        public GlyphButton(GlyphButtonType buttonType)
        {
            ButtonType = buttonType;

            Size = new Size(17, 17);
            SetStyle(ControlStyles.Opaque, false);
            SetStyle(ControlStyles.SupportsTransparentBackColor, true);
            BackColor = Color.Transparent;
            BorderStyle = default(Border3DSide);
        }

        public int Index
        {
            get { return Parent.Controls.IndexOf<GlyphButton>(this) + 1; }
        }

        public GlyphButtonType ButtonType
        {
            get;
            set;
        }

        public bool Value
        {
            get;
            set;
        }

        public bool Contains(Point point)
        {
            UpdateLocation();
            return Bounds.Contains(point);
        }

        protected virtual void UpdateLocation()
        {
            var n = Index;

            if (n > 0)
            {
                Location = new Point(Parent.Width - (n * Width) - (n * 5), (int)Math.Floor((Parent.Height - Height) / 2f));
            }
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            if (Parent.HasValue())
            {
                UpdateLocation();
                e.Graphics.DrawGlyphButton(ButtonType, Image, 0, 0, Width, Height, Enabled, Value);
            }
        }

        public void PaintValue(PaintValueEventArgs e)
        {
            PaintValue(e.Graphics, e.Bounds);
        }

        public void PaintValue(Graphics g, Rectangle bounds)
        {
            var n = Index;

            if (n > 0)
            {
                g.DrawGlyphButton(ButtonType, Image, bounds.Right - (n * Width) - (n * 5), bounds.Top + (bounds.Height - Height) / 2, Width, Height, Enabled, Value);
            }
        }
    }
}