//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    public class GlyphButtonCollection : IEnumerable<GlyphButton>
    {
        public GlyphButtonCollection(BaseEdit owner, EventHandler onClick)
        {
            Owner = owner;
            AllowClick = true;

            if (onClick.HasValue())
            {
                ButtonClick += onClick;
            }
        }

        public event EventHandler ButtonClick;

        static List<GlyphButton> Radios;

        protected BaseEdit Owner;
        protected bool AllowClick;

        public int Count
        {
            get { return this.Count(); }
        }

        public int Width
        {
            get { return this.Sum(c => c.Width); }
        }

        public void Clear()
        {
            foreach (GlyphButton item in this.ToArray())
            {
                Owner.Controls.Remove(item);
            }
        }

        public GlyphButton Add(GlyphButtonType buttonType)
        {
            return Add(buttonType, default(Image), default(string), false);
        }

        public GlyphButton Add(GlyphButtonType buttonType, bool value)
        {
            return Add(buttonType, default(Image), default(string), value);
        }

        public GlyphButton Add(GlyphButtonType buttonType, Image img)
        {
            return Add(buttonType, img, default(string), false);
        }

        public GlyphButton Add(GlyphButtonType buttonType, Image img, string title, bool value)
        {
            var button = new GlyphButton(buttonType);

            button.Image = img;
            button.Title = title;
            button.Value = value;

            Owner.Controls.Add(button);

            button.Click += OnButtonClick;
            button.SendToBack();

            if (GlyphButtonType.Radio == buttonType)
            {
                Radios = Radios ?? new List<GlyphButton>();
                Radios.Add(button);
            }

            return button;
        }

        public GlyphButton this[GlyphButtonType buttonType]
        {
            get { return this.ToArray().FirstOrDefault(item => item.ButtonType == buttonType); }
        }

        public void Remove(GlyphButtonType buttonType)
        {
            GlyphButton button = this[buttonType];

            if (button.HasValue())
            {
                Owner.Controls.Remove(button);
            }
        }

        public bool Contains(GlyphButtonType buttonType)
        {
            return this[buttonType].HasValue();
        }

        public GlyphButton GetButtonPointAt(Point point)
        {
            return this.FirstOrDefault(item => item.Contains(point));
        }

        public void PaintValue(Graphics g, Rectangle bounds)
        {
            this.ForEach(c => c.PaintValue(g, bounds));
        }

        protected internal void OnButtonClick(object sender, EventArgs e)
        {
            var button = sender as GlyphButton;

            switch (button.ButtonType)
            {
                case GlyphButtonType.Check:
                    button.Value = !button.Value;
                    button.Refresh();
                    break;

                case GlyphButtonType.Radio:
                    Radios.ForEach(i => i.Value = false);
                    button.Value = true;
                    button.Refresh();
                    break;
            }

            if (AllowClick)
            {
                try
                {
                    AllowClick = false;
                    ButtonClick.InvokeSafely(sender, e);
                }
                finally
                {
                    AllowClick = true;
                }
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public IEnumerator<GlyphButton> GetEnumerator()
        {
            return Owner.Controls.Cast<Control>().OfType<GlyphButton>().GetEnumerator();
        }
    }
}
