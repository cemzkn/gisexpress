//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Resources;

namespace System.Windows.Forms
{
    public class CheckEdit : LabelEdit, ISupportEditValue, ISupportPaint
    {
        public CheckEdit()
        {
            Height = 19;
            TabStop = true;
            Padding = new Padding(0);
            BackColor = Color.Transparent;
            SetStyle(ControlStyles.Selectable, true);
        }

        public event EventHandler CheckedChanged;

        protected bool Flag;

        public bool IsRadio
        {
            get;
            set;
        }

        public int RadioGroupIndex
        {
            get;
            set;
        }

        protected override void OnBeginEdit(Point point, ITypeDescriptorContext context)
        {
            OnClick(EventArgs.Empty);
        }

        public override object EditValue
        {
            get { return Checked; }
            set { Checked = (bool)value; }
        }

        public bool Checked
        {
            get { return Flag; }
            set
            {
                if (Flag != value)
                {
                    Flag = value;
                    Invalidate(false);
                    OnCheckedChanged(EventArgs.Empty);
                }
            }
        }

        public override Image Image
        {
            get
            {
                if (IsRadio)
                {
                    return Checked ? Images016.RadioChecked : Images016.RadioUnchecked;
                }

                return Checked ? Images016.Checked : Images016.Unchecked;
            }
            set { }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Color BackColor
        {
            get;
            set;
        }

        protected override void OnClick(EventArgs e)
        {
            if (IsRadio && Checked)
            {
                return;
            }

            Checked = !Checked;
            PerformCompleted();
        }

        protected override void OnKeyUp(KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Enter:
                case Keys.Space:
                    OnClick(e);
                    break;
            }

            base.OnKeyUp(e);
        }

        protected virtual void OnCheckedChanged(EventArgs e)
        {
            if (IsRadio)
            {
                var groupControls = Parent.GetControls<CheckEdit>(true);

                foreach (CheckEdit edit in groupControls)
                {
                    if (edit != this && edit.IsRadio && edit.RadioGroupIndex == RadioGroupIndex)
                    {
                        edit.Flag = !Checked;
                        edit.Invalidate(false);
                    }
                }
            }

            CheckedChanged.InvokeSafely(this, e);
        }

        protected override void OnPaintValue(Graphics g, Rectangle bounds, Image image, object value)
        {
            if (Visible)
            {
                bool isChecked;

                if (value is bool)
                {
                    isChecked = (bool)value;
                }
                else
                {
                    isChecked = Equals(value, TypeDescriptor.GetConverter(Types.Boolean).ConvertToString(true));
                }

                bounds.Offset(3, 0);
                bounds.Width -= 3;

                if (image.IsNull())
                {
                    base.OnPaintValue(g, bounds, isChecked ? Images016.Checked : Images016.Unchecked, null);
                }
                else
                {
                    base.OnPaintValue(g, bounds, Image, Text);
                }
            }
        }
    }
}
