//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Linq;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    public class DropDownEdit : PopupContainerEdit, ISupportPaint
    {
        public DropDownEdit()
        {
            TabStop = true;
            ReadOnly = true;
            MaxDropDownItems = 10;
            Size = new Size(90, ItemHeight);
        }

        public event CancelEventHandler PopupOpening;
        public event EventHandler PopupOpened;

        public event EventHandler SelectedIndexChanged
        {
            add { OwnerEdit.View.SelectedIndexChanged += value; }
            remove { OwnerEdit.View.SelectedIndexChanged -= value; }
        }

        protected object InitObject;
        protected object EditValueOriginal;
        protected new ListViewEdit OwnerEdit;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool CheckBox
        {
            get { return List.CheckBox; }
            set { List.CheckBox = value; }
        }

        protected override void OnEnter(EventArgs e)
        {
            base.OnEnter(e);

            if (!IsClosed)
            {
                OwnerEdit.View.UpdateFocus();
            }
        }

        protected override void OnBeginEdit(Point point, ITypeDescriptorContext context)
        {
            Initialize(context);

            if (ReadOnly)
            {
                if (context.HasValue() && context.PropertyDescriptor.HasValue())
                {
                    ShowPopup();
                }
            }
            else
            {
                base.OnBeginEdit(point, context);
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public object DataSource
        {
            get { return List.View.DataSource; }
            set { List.View.DataSource = value; }
        }

        public override object EditValue
        {
            get
            {
                if (ReadOnly)
                {
                    return List.EditValue;
                }

                return base.EditValue;
            }
            set
            {
                if (!Equals(base.EditValue, value))
                {
                    base.EditValue = value;
                    List.EditValue = value;
                    OnEditValueChanged();
                    Invalidate(false);
                }
            }
        }

        public override bool IsInactive
        {
            get { return List.Rows.Count == 0; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int MaxDropDownItems
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int ItemHeight
        {
            get { return List.RowHeight; }
            set { MinimumSize = new Size(48, Height = List.RowHeight = value); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Color BackColor
        {
            get { return List.BackColor; }
            set { List.BackColor = value; }
        }

        public override bool Locked
        {
            get { return !base.Enabled; }
            set { base.Enabled = !value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override bool ReadOnly
        {
            get { return base.ReadOnly; }
            set
            {
                var view = List.View as DropDownViewEdit.DropDownView;
                
                base.ReadOnly = value;
                List.View.PreviewTextEnabled = value;

                if (view.HasValue())
                {
                    view.OwnerEdit = this;
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ListViewEdit.Row SelectedRow
        {
            get
            {
                if (List.View.SelectedRow >= 0)
                {
                    return List.View.Items[List.View.SelectedRow];
                }

                return default(ListViewEdit.Row);
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int SelectedIndex
        {
            get { return List.View.SelectedRow; }
            set
            {
                List.View.SelectedRow = value;
                Invalidate(false);
            }
        }

        public virtual ListViewEdit.IRowList Items
        {
            get { return List.Rows; }
        }

        protected ListViewEdit List
        {
            get
            {
                if (OwnerEdit.IsNull())
                {
                    OwnerEdit = OnCreateOwnerEdit();
                    OwnerEdit.HitItemEnabled = true;
                    OwnerEdit.Dock = DockStyle.Fill;
                    OwnerEdit.BorderStyle = default(Border3DSide);
                    OwnerEdit.BackColor = BackColor;
                    OwnerEdit.View.ItemClick += OnItemClick;

                    Control = OwnerEdit;
                }

                return OwnerEdit;
            }
        }

        protected override void OnPopupOpening(object sender, CancelEventArgs e)
        {
            PopupOpening.InvokeSafely(sender, e);

            if (!e.Cancel)
            {
                base.OnPopupOpening(sender, e);

                int maxWidth = Width;
                Padding padding = List.Padding + List.View.Padding;

                if (List.Rows.Count > 0)
                {
                    maxWidth = Math.Max(maxWidth, padding.Horizontal + List.Rows.Take(0x100).Max(item => ControlHelper.MeasureText(item.ToString(), Font).Width + (item.Image.IsNull() ? 0 : item.Image.Width)) + SystemInformation.VerticalScrollBarWidth);
                }

                EditValueOriginal = EditValue;
                List.MinimumSize = new Size(padding.Horizontal + maxWidth, padding.Vertical + ItemHeight + Math.Min(MaxDropDownItems, Items.Count) * ItemHeight + List.View.HeaderHeight);
            }
        }

        protected override void OnPopupOpened(object sender, EventArgs e)
        {
            base.OnPopupOpened(sender, e);

            if (List.View.PreviewTextEnabled)
            {
                using (List.View.Begin())
                {
                    List.View.Rows.ShowAll();
                    List.View.PreviewText.Clear();
                }

                List.View.UpdateLayout(true);
            }

            if (SelectedIndex > 0)
            {
                List.View.EnsureVisible(SelectedIndex);
            }

            PopupOpened.InvokeSafely(sender, e);
        }

        protected override void OnPopupClosed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            using (List.View.Begin())
            {
                if (List.View.PreviewTextEnabled)
                {
                    object value = EditValue;
                    List.View.PreviewText.Clear();
                    List.View.Rows.ShowAll();
                    EditValue = value;
                }

                if (e.CloseReason == ToolStripDropDownCloseReason.Keyboard)
                {
                    EditValue = EditValueOriginal;
                }
            }

            base.OnPopupClosed(sender, e);
        }

        protected override object OnParse(string value)
        {
            if (ReadOnly)
            {
                return EditValue;
            }

            return base.OnParse(value);
        }

        public override void PaintValue(PaintValueEventArgs e)
        {
            var bounds = e.Bounds;

            Initialize(e.Context);
            PaintValue(e.Graphics, bounds, e.Value);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            if (List.View.PreviewTextEnabled && List.View.PreviewText.Length > 0)
            {
                e.Graphics.FillRectangle(ApplicationAppereance.Brushes.Window, ClientRectangle);
                PaintValue(e.Graphics, ClientRectangle, List.View.PreviewText);
            }
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);
            Invalidate(false);
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);
            Invalidate(false);

            if (!ReadOnly)
            {
                BaseEditValue.Focus();
            }
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);

            switch (e.KeyCode)
            {
                case Keys.Enter:
                case Keys.Space:
                    ShowPopup();
                    break;
            }
        }

        protected override void OnPaintValue(Graphics g, Rectangle bounds, Image image, object value)
        {
            if (value is object[])
            {
                base.OnPaintValue(g, bounds, image, string.Join(", ", ((object[])value).Select(item => DisplayText(item, Localization.Language))));
            }
            else
            {
                ListViewEdit.Row row = Items.FindByKey(value);

                if (row.HasValue())
                {
                    List.View.PaintRow(g, bounds, row, row.Index, DrawItemState.ComboBoxEdit);
                }
                else
                {
                    base.OnPaintValue(g, bounds, image, value);
                }
            }

            if (ButtonList.HasValue())
            {
                ButtonList.PaintValue(g, bounds);
            }
        }

        protected void Initialize(ITypeDescriptorContext context)
        {
            if (context.HasValue())
            {
                if (InitObject.IsNull() || !Equals(InitObject, GetInitObject(context)))
                {
                    InitObject = GetInitObject(context);
                    OnInitialize(context);
                }
            }
        }

        protected virtual object GetInitObject(ITypeDescriptorContext context)
        {
            return context;
        }

        protected virtual void OnInitialize(ITypeDescriptorContext context)
        {
            var descriptor = context.PropertyDescriptor;

            if (descriptor.HasValue() && !descriptor.PropertyType.IsEnum && descriptor.Converter.HasValue())
            {
                if (descriptor.Converter.GetStandardValuesSupported(context))
                {
                    Items.Clear();

                    foreach (object item in descriptor.Converter.GetStandardValues(context))
                    {
                        Items.Add(item);
                    }
                }
            }
        }

        protected virtual ListViewEdit OnCreateOwnerEdit()
        {
            return new DropDownViewEdit(this);
        }

        protected virtual void OnItemClick(object sender, EventArgs e)
        {
            if (!CheckBox && !IsClosed)
            {
                Close();

                if (!ReadOnly)
                {
                    EndEdit();
                }
            }
        }

        public class DropDownViewEdit : ListViewEdit
        {
            public DropDownViewEdit(DropDownEdit ownerEdit)
            {
                OwnerEdit = ownerEdit;
            }

            protected DropDownEdit OwnerEdit;

            protected override ListView OnCreateView()
            {
                return new DropDownView(OwnerEdit);
            }

            public class DropDownView : ListView
            {
                public DropDownView(DropDownEdit ownerEdit)
                {
                    OwnerEdit = ownerEdit;
                }

                protected bool? FilterEnabled;
                protected internal DropDownEdit OwnerEdit;

                protected override void OnPreviewTextChanged(string value)
                {
                    if (PreviewTextEnabled && OwnerEdit.HasValue())
                    {
                        FilterEnabled = FilterEnabled ?? (FilterMode == ListViewFilterMode.Always || Items.Count > OwnerEdit.MaxDropDownItems);

                        if (FilterEnabled.Value && !OwnerEdit.IsClosed)
                        {
                            var c = Columns.OfType<Column>().FirstOrDefault();

                            if (c.HasValue())
                            {
                                Rows.ApplyFilter(string.Concat("[", c.Name, "] LikeAll '", value, "'"));
                                UpdateScrolls();
                                Redraw();
                                SelectedRow = 0;
                                OwnerEdit.Invalidate(false);
                            }
                        }
                    }
                }
            }
        }
    }
}
