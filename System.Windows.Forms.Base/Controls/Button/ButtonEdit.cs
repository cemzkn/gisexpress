//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    public class ButtonEdit : Button
    {
        public ButtonEdit()
        {
            BorderSize = 0;
            Cursor = Cursors.Default;
            FlatStyle = FlatStyle.Flat;
            BorderStyle = Border3DSide.All;
            BackColor = ApplicationAppereance.Colors.Control;
        }

        protected bool IsBusy;
        protected bool CancellationPending;
        protected ToolTip ToolTip;
        protected string ToolTipText;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new FlatButtonAppearance FlatAppearance
        {
            get { return base.FlatAppearance; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new FlatStyle FlatStyle
        {
            get { return base.FlatStyle; }
            set { base.FlatStyle = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Cursor Cursor
        {
            get { return base.Cursor; }
            set { base.Cursor = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool UseVisualStyleBackColor
        {
            get { return base.UseVisualStyleBackColor; }
            set { base.UseVisualStyleBackColor = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Title
        {
            get
            {
                return ToolTipText;
            }
            set
            {
                if (!string.IsNullOrEmpty(value) && !Equals(value, ToolTipText))
                {
                    ToolTip = ToolTip ?? new ToolTip();
                    ToolTip.SetToolTip(this, ToolTipText = value);
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Image Image
        {
            get { return base.Image; }
            set { base.Image = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int BorderSize
        {
            get { return FlatAppearance.BorderSize; }
            set { FlatAppearance.BorderSize = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Border3DSide BorderStyle
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Color BackColor
        {
            get { return base.BackColor; }
            set { base.BackColor = value; }
        }

        protected override bool ShowFocusCues
        {
            get { return false; }
        }

        protected override void OnGotFocus(EventArgs e)
        {
            Invalidate(false);
            base.OnGotFocus(e);
        }

        protected override void OnLostFocus(EventArgs e)
        {
            Invalidate(false);
            base.OnLostFocus(e);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            if (FlatAppearance.BorderSize == 0)
            {
                if (!string.IsNullOrEmpty(Text))
                {
                    e.Graphics.DrawBorder(BorderStyle, ClientRectangle);
                }
            }

            if (Focused && !string.IsNullOrEmpty(Text))
            {
                var bounds = ClientRectangle;
                bounds.Inflate(-3, -3);
                ControlPaint.DrawFocusRectangle(e.Graphics, bounds);
            }
        }

        protected override void OnEnabledChanged(EventArgs e)
        {
            if (BorderStyle != default(Border3DSide))
            {
                if (Enabled)
                {
                    ForeColor = ApplicationAppereance.Colors.ControlText;
                    BackColor = ApplicationAppereance.Colors.Control;
                }
                else if (!string.IsNullOrEmpty(Text))
                {
                    ForeColor = ApplicationAppereance.Colors.GrayText;
                    BackColor = ApplicationAppereance.Colors.ControlDisabled;
                }
            }

            base.OnEnabledChanged(e);
        }

        public virtual void StartAnimate(Image image)
        {
            ImageAnimator.Animate(Image = image, OnAnimateFrameChanged);
        }

        public virtual void OnAnimateFrameChanged(object sender, EventArgs e)
        {
            if (!IsBusy)
            {
                IsBusy = true;
                ImageAnimator.UpdateFrames(Image);
                this.InvokeAction(UpdateImage);
                IsBusy = false;
            }

            if (CancellationPending)
            {
                StopAnimate();
            }
        }

        protected void UpdateImage()
        {
            Invalidate(false);
        }

        public virtual void StopAnimate()
        {
            CancellationPending = true;

            if (!IsBusy)
            {
                ImageAnimator.StopAnimate(Image, OnAnimateFrameChanged);
                Image = null;
                UpdateImage();
            }
        }
    }
}
