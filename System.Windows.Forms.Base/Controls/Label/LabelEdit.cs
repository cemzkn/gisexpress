//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    public class LabelEdit : BaseEdit
    {
        public LabelEdit()
        {
            AutoSize = true;
            Padding = new Padding(3);
            BackColor = Color.Transparent;
            BorderStyle = default(Border3DSide);
            Font = ApplicationAppereance.Fonts.DefaultFont;
            RefreshAction = new Action(UpdateLabel);
        }

        protected Size TextSize;
        protected Size ImageSize;
        protected Action RefreshAction;

        [Browsable(true)]
        [Category(Categories.Appearance)]
        public override string Text
        {
            get { return base.Text; }
            set
            {
                if (!string.Equals(base.Text, value))
                {
                    base.Text = value;
                    this.InvokeAction(RefreshAction);
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override bool AutoSize
        {
            get { return base.AutoSize; }
            set
            {
                base.AutoSize = value;
                this.Properties.HasChanges = true;
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool Multiline
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override Color ForeColor
        {
            get { return Enabled ? base.ForeColor : SystemColors.GrayText; }
            set { base.ForeColor = value; }
        }

        public override float FontSize
        {
            get { return base.FontSize; }
            set
            {
                base.FontSize = value;
                this.Properties.HasChanges = true;
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual Image Image
        {
            get { return (Enabled ? Properties["ImageEnabled"] : Properties["ImageDisabled"]) as Image; }
            set
            {
                Properties["ImageEnabled"] = value;
                Properties["ImageDisabled"] = value.MakeDisableEffect();
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public virtual ContentAlignment ImageAlign
        {
            get { return (ContentAlignment)Properties["ImageAlign", ContentAlignment.MiddleLeft]; }
            set { Properties["ImageAlign"] = value; }
        }

        [Category(Categories.Appearance)]
        public virtual ContentAlignment TextAlign
        {
            get { return (ContentAlignment)Properties["TextAlign", ContentAlignment.MiddleLeft]; }
            set { Properties["TextAlign"] = value; }
        }

        [Category(Categories.Layout)]
        public new Padding Padding
        {
            get { return base.Padding; }
            set
            {
                base.Padding = value;
                Properties.HasChanges = true;
            }
        }

        public new Size PreferredSize
        {
            get
            {
                if (Properties.HasChanges)
                {
                    Properties.HasChanges = false;
                    ImageSize = Image.HasValue() ? Image.Size : Size.Empty;
                    TextSize = MeasureText(Text);

                    return OnCalculateSize();
                }

                return Size;
            }
        }

        protected override bool ShowFocusRectangle
        {
            get { return false; }
        }

        protected virtual object OnParse(string value)
        {
            return value;
        }

        protected void UpdateLabel()
        {
            Properties.HasChanges = true;
            UpdateLayout(true);
            Invalidate(false);
        }

        protected virtual Size MeasureText(string text)
        {
            var preferredSize = ControlHelper.MeasureText(text, Font, (Multiline ? TextFormatFlags.Default : TextFormatFlags.SingleLine) | TextFormatFlags.NoPrefix);

            preferredSize.Width += 6;

            if (Multiline && !ImageSize.IsEmpty)
            {
                Size newSize;
                var proposedSize = new Size(ImageSize.Width + Padding.Horizontal, preferredSize.Height * 2);

                do
                {
                    newSize = ControlHelper.MeasureText(text, Font, proposedSize, TextFormatFlags.WordBreak);
                    proposedSize.Width += Padding.Right;
                }
                while (newSize.Height > proposedSize.Height);

                return newSize;
            }

            return preferredSize;
        }

        protected override void OnParentChanged(EventArgs e)
        {
            if (Visible)
            {
                UpdateLayout(false);
            }

            base.OnParentChanged(e);
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if (Visible)
            {
                UpdateLayout(false);
            }

            base.OnVisibleChanged(e);
        }

        protected override bool OnUpdateLayout(bool performLayout)
        {
            if (AutoSize)
            {
                Size newSize = PreferredSize;

                if (Size.Width != newSize.Width || Size.Height != newSize.Height)
                {
                    Size = newSize;
                    return true;
                }
            }

            return false;
        }

        protected virtual Size OnCalculateSize()
        {
            if (AutoSize)
            {
                var newSize = new Size(TextSize.Width, TextSize.Height);

                if (!ImageSize.IsEmpty)
                {
                    switch (ImageAlign)
                    {
                        case ContentAlignment.TopLeft:
                        case ContentAlignment.TopRight:
                        case ContentAlignment.BottomLeft:
                        case ContentAlignment.BottomRight:
                            newSize.Width += ImageSize.Width + Padding.Left;
                            newSize.Height += ImageSize.Height;
                            break;
                        case ContentAlignment.MiddleLeft:
                        case ContentAlignment.MiddleRight:
                            newSize.Width += ImageSize.Width + Padding.Left;
                            newSize.Height = Math.Max(newSize.Height, ImageSize.Height);
                            break;
                        default:
                            newSize.Width = Math.Max(newSize.Width, ImageSize.Width);
                            newSize.Height += ImageSize.Height + Padding.Bottom;
                            break;
                    }
                }

                newSize.Width += Padding.Horizontal - 2;
                newSize.Height += Padding.Vertical - 2;

                return newSize;
            }

            return Size;
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            OnPaintValue(e.Graphics, ClientRectangle, Image, EditValue ?? Text);
            base.OnPaint(e);
        }

        protected override void OnPaintValue(Graphics g, Rectangle bounds, Image image, object value)
        {
            var displayText = OnDisplayText(value);
            var boundsText = bounds.GetBounds(TextAlign, MeasureText(displayText), Padding);

            if (image.HasValue())
            {
                var boundsImage = bounds.GetBounds(ImageAlign, image.Size, Padding);

                if (!boundsImage.IsEmpty)
                {
                    g.DrawImage(image, boundsImage.Left + (boundsImage.Width - image.Width) / 2, boundsImage.Top + (boundsImage.Height - image.Height) / 2);

                    switch (ImageAlign)
                    {
                        case ContentAlignment.TopLeft:
                        case ContentAlignment.BottomLeft:
                        case ContentAlignment.MiddleLeft:
                            bounds.Offset(boundsImage.Width + Padding.Left, 0);
                            break;
                    }
                }
            }

            if (string.IsNullOrEmpty(displayText))
            {
                base.OnPaintValue(g, bounds, image, value);
            }
            else
            {
                DrawArgs.Font = Font;
                DrawArgs.BackColor = BackColor;
                DrawArgs.ForeColor = ForeColor;
                DrawArgs.Text = displayText;
                DrawArgs.Bounds = boundsText;
                DrawArgs.Alignment = TextAlign;
                DrawArgs.Multiline = Multiline;

                DrawArgs.Bounds.X = bounds.X;
                DrawArgs.Bounds.Width = bounds.Width;

                g.DrawText(DrawArgs);
            }
        }
    }
}
