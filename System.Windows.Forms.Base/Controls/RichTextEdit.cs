//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Diagnostics;

namespace System.Windows.Forms
{
    public class RichTextEdit : BaseEdit
    {
        public RichTextEdit()
        {
            BorderStyle = Border3DSide.All;
            Padding = new Padding(6, 6, 1, 6);

            Controls.Add(OwnerEdit = new RichText
            {
                Dock = DockStyle.Fill
            });
        }

        protected RichTextBox OwnerEdit;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new bool Enabled
        {
            get { return OwnerEdit.Enabled; }
            set { OwnerEdit.Enabled = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Rtf
        {
            get { return OwnerEdit.Rtf; }
            set { OwnerEdit.Rtf = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RtfText
        {
            get { return OwnerEdit.Rtf; }
            set { Rtf = string.Concat(@"{\rtf1\ansi\ansicpg", Localization.Language.TextInfo.ANSICodePage, value, "}"); }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override string Text
        {
            get { return OwnerEdit.Text; }
            set { OwnerEdit.Text = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool DetectUrls
        {
            get { return OwnerEdit.DetectUrls; }
            set { OwnerEdit.DetectUrls = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override bool ReadOnly
        {
            get { return OwnerEdit.ReadOnly; }
            set { OwnerEdit.ReadOnly = value; }
        }

        protected override bool ShowFocusRectangle
        {
            get { return false; }
        }

        protected class RichText : RichTextBox
        {
            public RichText()
            {
                BorderStyle = BorderStyle.None;
            }

            protected override void OnLinkClicked(LinkClickedEventArgs e)
            {
                if (DetectUrls)
                {
                    Process.Start(e.LinkText);
                }

                base.OnLinkClicked(e);
            }

            protected override void OnReadOnlyChanged(EventArgs e)
            {
                if (ReadOnly)
                {
                    TabStop = false;
                    Cursor = Cursors.Default;
                    BackColor = ApplicationAppereance.Colors.Window;
                }
                else
                {
                    TabStop = true;
                    Cursor = DefaultCursor;
                }

                base.OnReadOnlyChanged(e);
            }

            protected override void OnBackColorChanged(EventArgs e)
            {
                if (Parent.HasValue())
                {
                    Parent.BackColor = BackColor;
                }

                base.OnBackColorChanged(e);
            }
        }
    }
}
