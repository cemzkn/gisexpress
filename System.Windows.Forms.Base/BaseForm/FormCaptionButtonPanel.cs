//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class FormCaptionButtonPanel : TablePanelEdit
    {
        public FormCaptionButtonPanel(string productName, string productLicense)
        {
            DrawArgs = new DrawTextEventArgs
            {
                Font = ApplicationAppereance.Fonts.CaptionFont
            };

            TransparentHit = true;
            Dock = DockStyle.Fill;

            Buttons = new HashSet<CaptionButton>();
            Buttons.Add(CaptionButton.Close);

            AddRow();
            AddColumn();
            AddColumn();
            AddColumn(SizeType.Percent, 100);

            Controls.Add(IconBox = new ImageEdit { SizeMode = PictureBoxSizeMode.CenterImage, Size = new Size(24, 24) }, 0, 0);
            Controls.Add(QuickToolbar = new FormQuickToolbar { Visible = false }, 1, 0);

            foreach (CaptionButton item in GetButtons())
            {
                AddColumn();
                Controls.Add(new FormCaptionButton(item), ColumnCount - 1, 0);
            }

            UpdateLayout();
            UpdateText(productName, productLicense);
        }

        protected bool HasText;
        protected string DefaultText;
        protected ImageEdit IconBox;
        protected internal readonly DrawTextEventArgs DrawArgs;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Image Icon
        {
            get { return IconBox.Image; }
            set { IconBox.Image = value; }
        }

        [Browsable(false)]
        public ISet<CaptionButton> Buttons
        {
            get;
            protected set;
        }

        [Browsable(false)]
        public FormQuickToolbar QuickToolbar
        {
            get;
            protected set;
        }

        public override string Text
        {
            get { return base.Text; }
            set
            {
                HasText = true;
                base.Text = value;
            }
        }

        public FormCaptionButton this[params CaptionButton[] buttons]
        {
            get { return Controls.Cast<Control>().Where(c => c is FormCaptionButton).Cast<FormCaptionButton>().FirstOrDefault(item => buttons.Contains(item.ButtonType)); }
        }

        public void MaximizeRestore()
        {
            var button = this[CaptionButton.Maximize, CaptionButton.Restore];

            if (button.HasValue())
            {
                button.PerformClick();
            }
        }

        public bool UpdateLayout()
        {
            if (Controls.Count > 0)
            {
                FormCaptionButton item;

                foreach (Control c in Controls)
                {
                    item = c as FormCaptionButton;

                    if (item.HasValue())
                    {
                        item.Visible = Buttons.Contains(item.ButtonType);
                    }
                }

                return true;
            }

            return false;
        }

        public void UpdateText(string productName, string productLicense)
        {
            if (string.IsNullOrEmpty(productLicense))
            {
                DefaultText = productName;
            }
            else
            {
                DefaultText = string.Concat(productName, " - ", productLicense);
            }

            Invalidate(false);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            if (OSEnvironment.IsWindows)
            {
                OnPaintText(e);
                base.OnPaint(e);
            }
            else
            {
                base.OnPaint(e);
            }
        }

        protected virtual void OnPaintText(PaintEventArgs e)
        {
            var bounds = ClientRectangle;

            bounds.Offset(30, 0);
            bounds.Width -= 60;

            DrawArgs.Bounds = bounds;
            DrawArgs.ForeColor = ForeColor;

            if (QuickToolbar.ButtonsCount == 0 && Icon.HasValue())
            {
                DrawArgs.Text = ApplicationEnvironment.ProductName;
                DrawArgs.FormatFlags = TextFormatFlags.Left | TextFormatFlags.VerticalCenter;
                e.Graphics.DrawText(DrawArgs);
                DrawArgs.Text = string.Empty;
            }
            else
            {
                DrawArgs.Text = DefaultText;
            }

            if (HasText)
            {
                DrawArgs.Text = Text;
            }

            if (!string.IsNullOrEmpty(DrawArgs.Text))
            {
                DrawArgs.FormatFlags = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter;
                e.Graphics.DrawText(DrawArgs);
            }
        }

        IEnumerable<CaptionButton> GetButtons()
        {
            yield return CaptionButton.Help;
            yield return CaptionButton.Minimize;
            yield return CaptionButton.Maximize;
            yield return CaptionButton.Close;
        }
    }
}
