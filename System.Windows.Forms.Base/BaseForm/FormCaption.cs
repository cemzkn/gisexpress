//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class FormCaption : BaseEdit
    {
        public FormCaption(string productName, string productLicense)
        {
            Name = "Caption";
            Dock = DockStyle.Top;
            Padding = new Padding(1);
            BorderStyle = Border3DSide.Bottom;
            MinimumSize = new Size(0, Height = 30);
            BackColor = ApplicationAppereance.Colors.WindowCaption;
            Controls.Add(CaptionButtonPanel = new FormCaptionButtonPanel(productName, productLicense));
        }

        protected FormCaptionButtonPanel CaptionButtonPanel;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Image Icon
        {
            get { return CaptionButtonPanel.Icon; }
            set { CaptionButtonPanel.Icon = value; }
        }

        public ISet<CaptionButton> CaptionButtons
        {
            get { return CaptionButtonPanel.Buttons; }
        }

        public IQuickToolbar QuickToolbar
        {
            get { return CaptionButtonPanel.QuickToolbar; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override string Text
        {
            get
            {
                return base.Text;
            }
            set
            {
                base.Text = value;

                if (CaptionButtonPanel.HasValue())
                {
                    CaptionButtonPanel.Text = value;
                    CaptionButtonPanel.Invalidate(false);
                }
            }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new string Name
        {
            get { return base.Name; }
            set { base.Name = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override DockStyle Dock
        {
            get { return base.Dock; }
            set { base.Dock = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Point Location
        {
            get { return base.Location; }
            set { base.Location = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Size Size
        {
            get { return base.Size; }
            set { base.Size = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new Size ClientSize
        {
            get { return base.ClientSize; }
            set { base.ClientSize = value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new int TabIndex
        {
            get { return base.TabIndex; }
            set { base.TabIndex = value; }
        }

        public void UpdateText(string productName, string productLicense)
        {
            CaptionButtonPanel.UpdateText(productName, productLicense);
        }

        protected override bool OnUpdateLayout(bool performLayout)
        {
            if (base.OnUpdateLayout(performLayout))
            {
                return CaptionButtonPanel.UpdateLayout();
            }

            return false;
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            SendToBack();
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);

            if (Visible)
            {
                UpdateLayout(false);
            }
        }

        protected override void WndProc(ref Message e)
        {
            base.WndProc(ref e);
            this.WndProcTransparentHit(ref e);
        }
    }
}
