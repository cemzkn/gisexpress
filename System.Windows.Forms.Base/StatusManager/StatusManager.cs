//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms.Ribbon;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class StatusManager : TablePanelEdit
    {
        public StatusManager(BaseForm owner)
        {
            var container = owner.Body.Controls.OfType<SplitEdit>().FirstOrDefault();

            Owner = owner;
            Dock = DockStyle.Bottom;
            AutoSizeMode = AutoSizeMode.GrowAndShrink;

            AddRow(SizeType.Absolute, 3);
            AddRow(SizeType.Absolute, Font.Height + 12);

            AddColumn(SizeType.Percent, 100);

            if (container.IsNull())
            {
                Owner.Body.Controls.Add(this);
            }
            else
            {
                container.Panel2.Controls.Add(this);
            }
        }

        protected bool BeginGroup;

        public BaseForm Owner
        {
            get;
            protected set;
        }

        public RibbonToolbarButton[] Items
        {
            get { return Controls.Cast<Control>().OfType<RibbonToolbarButton>().ToArray(); }
        }

        public new void AddSeperator()
        {
            BeginGroup = true;
        }

        public StatusToolbarLabel AddLabel(string name)
        {
            return AddLabel(name, default(Image));
        }

        public StatusToolbarLabel AddLabel(string name, Image image)
        {
            return AddLabel(name, image, ContentAlignment.MiddleLeft);
        }

        public StatusToolbarLabel AddLabel(string name, Image image, ContentAlignment alignment)
        {
            return (StatusToolbarLabel)AddControl(OnCreateLabel(), name, alignment, image, default(EventHandler));
        }

        public StatusToolbarButton AddButton(string name, Image image, Keys shortcut, EventHandler onClick)
        {
            return (StatusToolbarButton)AddControl(OnCreateButton(shortcut), name, ContentAlignment.MiddleLeft, image, onClick);
        }

        protected virtual StatusToolbarLabel OnCreateLabel()
        {
            return new StatusToolbarLabel();
        }

        protected virtual StatusToolbarButton OnCreateButton(Keys shortcut)
        {
            return new StatusToolbarButton { Shortcut = shortcut };
        }

        protected LabelEdit AddControl(LabelEdit c, string name, ContentAlignment alignment, Image image, EventHandler onClick)
        {
            c.Name = name;
            c.Anchor = AnchorStyles.None;
            c.TextAlign = alignment;

            if (image.HasValue())
            {
                c.ImageAlign = ContentAlignment.MiddleLeft;
                c.Image = BitmapExtensions.NewImage(image, Font.Height + 3, Font.Height + 3);
            }

            if (onClick.HasValue())
            {
                c.Click += onClick;
            }

            if (BeginGroup)
            {
                BeginGroup = false;
                InsertVerticalSeperator(1);
            }

            InsertColumn(c, 1);

            if (name.StartsWithIgnoreCase("Value."))
            {
                c.AutoSize = false;
            }
            else
            {
                Localization.Register(c, e => c.Text = e(name));
            }

            return c;
        }
    }
}
