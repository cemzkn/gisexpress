//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Resources;

namespace System.Windows.Forms
{
    public class ApplicationSplashForm : BaseForm
    {
        public ApplicationSplashForm()
        {
            Actions = new Collection<Action>();
            SafeActions = new Collection<Action>();
            FinalActions = new Collection<Action>();

            Text = string.Empty;
            FormBorderStyle = FormBorderStyle.FixedDialog;
            StartPosition = FormStartPosition.CenterScreen;

            IsBusy = true;
            ShowIcon = false;
            MinimizeBox = true;
            ShowInTaskbar = true;
            Size = MinimumSize = new Size(420, 210);

            try
            {
                InitImage();
                TileImage = Images048.SplashTile;

                TileTimer = new Timer { Enabled = false, Interval = 25 };
                TileTimer.Tick += OnTileTimerTick;
            }
            catch (Exception error)
            {
                error.Print();
                ApplicationEnvironment.Kill();
            }
        }

        protected float Delta;
        protected Timer TileTimer;
        protected Bitmap TileImage;
        protected Bitmap BodyImage;

        public bool IsBusy
        {
            get;
            protected set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Collection<Action> Actions
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Collection<Action> SafeActions
        {
            get;
            set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Collection<Action> FinalActions
        {
            get;
            set;
        }

        public bool IsAgreed(Form owner)
        {
            if (ApplicationConfiguration.Current.Security.Agreed)
            {
                return true;
            }

            return LicenseAgreementDialog.IsAccepted(owner);
        }

        public LicenseAgreementDialog LicenseAgreement
        {
            get { return ApplicationConfiguration.Current.Security.Agreed ? null : LicenseAgreementDialog.Default; }
        }

        protected override string ProductLicense
        {
            get { return Visible ? base.ProductLicense : default(string); }
        }

        public void DoActions()
        {
            DoActions(Actions);
            DoActions(SafeActions);
            DoActions(FinalActions);
        }

        public void DoActions(IList<Action> actions)
        {
            while (actions.Count > 0)
            {
                actions.First()();
                actions.RemoveAt(0);
            }
        }

        protected override void OnShown(EventArgs e)
        {
            try
            {
                base.OnShown(e);

                Refresh();
                TileTimer.Start();
                DoActions(Actions);

                //LicenseAgreementDialog.Register();

                if (SafeActions.HasValue())
                {
                    var background = new BackgroundWorker();

                    background.DoWork += BeginAction;
                    background.RunWorkerCompleted += ActionCompleted;
                    background.RunWorkerAsync();
                }
                else
                {
                    Completed();
                }
            }
            catch (Exception error)
            {
                error.Print();
                ApplicationEnvironment.Kill();
            }
        }

        void BeginAction(object sender, DoWorkEventArgs e)
        {
            if (LicenseManager.IsLicensed(typeof(ApplicationSplashForm)))
            {
                ApplicationEnvironment.Update();
                DoActions(SafeActions);
            }
        }

        void ActionCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            using (sender as IDisposable)
            {
                Completed();
            }
        }

        void Completed()
        {
            using (this)
            {
                DoActions(FinalActions);
                Close();
            }
        }

        protected override void OnBodyPaint(PaintEventArgs e)
        {
            try
            {
                if (BodyImage.HasValue())
                {
                    var g = e.Graphics;
                    var region = new Rectangle(-2 * Width, -2 * Height, 4 * Width, 4 * Height);

                    using (var brush = new TextureBrush(TileImage, WrapMode.Tile))
                    {
                        g.SetHighQuality();
                        g.RotateTransform(-30);
                        g.TranslateTransform(Delta, 0);
                        g.FillRectangle(brush, region);
                        g.ResetTransform();
                        g.DrawImageUnscaled(BodyImage, 0, 0);
                    }
                }
            }
            catch (Exception error)
            {
                error.Print();
            }
        }

        void InitImage()
        {
            Size bounds = Body.Size;
            Bitmap img = BitmapExtensions.NewImage(bounds.Width, bounds.Height);

            using (Graphics g = Graphics.FromImage(img))
            {
                using (var path = new GraphicsPath())
                {
                    var e = new DrawTextEventArgs();

                    var fontSize0 = 25.75F;
                    var fontSize1 = 15.25F;
                    var fontStyle = OSEnvironment.IsMac ? 0 : 1;

                    var padding = new Padding(8);
                    var rect = new Rectangle(padding.Left, padding.Top, bounds.Width - padding.Horizontal, bounds.Height - padding.Vertical);

                    var productBounds = Rectangle.Empty;
                    var imgSize = ApplicationAppereance.Images.LargeLogo.Size;

                    e.Alignment = ContentAlignment.MiddleCenter;
                    e.Origin = new PointF((rect.Width + imgSize.Width + padding.Left) / 2, rect.Height / 2);

                    path.AddString(ProductName, ApplicationAppereance.Fonts.DefaultFont.FontFamily, fontStyle, fontSize0, Point.Empty, default(StringFormat));
                    path.AlignPath(e, fontSize0);

                    g.SetHighQuality();
                    g.DrawPath3D(path, Color.FromArgb(96, 86, 76), 8);
                    g.DrawPath3D(path, Color.FromArgb(240, 240, 240));

                    productBounds = path.GetBounds().ToRectangle();

                    path.Reset();
                    path.AddString("®", ApplicationAppereance.Fonts.DefaultFont.FontFamily, fontStyle, fontSize1, new Point(productBounds.Right + 6, productBounds.Top - 6), default(StringFormat));
                    g.DrawPath3D(path, Color.FromArgb(96, 86, 76), 8);
                    g.DrawPath3D(path, Color.FromArgb(240, 240, 240));

                    productBounds = new Rectangle(productBounds.Left - imgSize.Width - padding.Left, productBounds.Top + (productBounds.Height - ApplicationAppereance.Images.LargeLogo.Height) / 2, imgSize.Width, imgSize.Height);

                    g.DrawImageUnscaled(ApplicationAppereance.Images.LargeLogo, productBounds.Left, productBounds.Top);

                    e.Alignment = ContentAlignment.TopLeft;
                    e.Origin = new PointF(rect.Width, rect.Height);

                    path.Reset();

                    if (string.IsNullOrEmpty(ProductLicense))
                    {
                        path.AddString(Localization.Localize("NoSubscriptionFound"), ApplicationAppereance.Fonts.DefaultFont.FontFamily, fontStyle, fontSize1 - 1, Point.Empty, default(StringFormat));
                    }
                    else
                    {
                        path.AddString(string.Concat(ProductLicense, " - ", ApplicationEnvironment.ProductVersion), ApplicationAppereance.Fonts.DefaultFont.FontFamily, fontStyle, fontSize1, Point.Empty, default(StringFormat));
                    }

                    path.AlignPath(e, fontSize1);

                    g.DrawPath3D(path, Color.FromArgb(56, 46, 36), 7);
                    g.DrawPath3D(path, Color.FromArgb(240, 240, 240));
                }
            }

            BodyImage.DisposeSafely();
            BodyImage = img;
        }

        void OnTileTimerTick(object sender, EventArgs e)
        {
            if (Delta < TileImage.Width)
            {
                Delta += .25f;
            }
            else
            {
                Delta = 0;
            }

            if (BodyImage.HasValue())
            {
                Body.Invalidate(false);
            }
        }

        protected override void OnUpdateCaption()
        {
            base.OnUpdateCaption();
            InitImage();
        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.DialogResult = IsBusy ? DialogResult.Cancel : DialogResult.OK;
            base.OnFormClosed(e);
        }

        public new void Close()
        {
            IsBusy = false;
            this.InvokeAction(base.Close);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                TileTimer.DisposeSafely();
                BodyImage.DisposeSafely();

                TileTimer = null;
                BodyImage = null;
            }

            base.Dispose(disposing);
        }
    }
}
