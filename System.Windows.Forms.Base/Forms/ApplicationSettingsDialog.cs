//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    public partial class ApplicationSettingsDialog : ApplicationForm, ICustomTypeDescriptor, IPropertySetter
    {
        public ApplicationSettingsDialog()
        {
            ShowHeader = true;
            ShowFooter = true;

            Size = new Size(580, 520);
            Footer.DisplayButtons = MessageBoxButtons.OK;

            MinimizeBox = false;
            FormBorderStyle = FormBorderStyle.FixedDialog;

            Body.Controls.Add(Tab = new TabEdit
            {
                ShowHeader = true,
                Dock = DockStyle.Fill
            });

            Localization.Register(this, e => Header.Caption = e("ApplicationSettings.Caption"));
            Localization.Register(this, e => Header.Title = e("ApplicationSettings.Title"));

            AddPage(new PropertyGridEdit { SelectedObject = this }, "ApplicationSettings.Caption");
            AddPage(About = new ApplicationAboutEdit(), "About", Border3DSide.Top).Padding = new Padding(1);
        }

        protected TabEdit Tab;
        protected ApplicationAboutEdit About;

        public virtual void SetDataSource(IPropertyGetter value)
        {
            About.SetDataSource(value);
        }

        protected TabEditPage AddPage(Control c, string caption, Border3DSide borderStyle = default(Border3DSide))
        {
            TabEditPage page = Tab.AddPage(c);

            page.BorderStyle = borderStyle;
            Localization.Register(page, e => page.Text = e(caption));

            return page;
        }

        public object this[string name]
        {
            get
            {
                switch (name)
                {
                    case "Localization.Name":
                        return Localization.Language;
                    case "Map.ZoomRate":
                        return ApplicationConfiguration.Current.Options.ZoomFactor;
                }

                return default(object);
            }
            set
            {
                switch (name)
                {
                    case "Localization.Name":
                        Localization.Language = (Language)value;
                        break;
                    case "Map.ZoomRate":
                        ApplicationConfiguration.Current.Options.ZoomFactor = (int)value;
                        break;
                }
            }
        }

        protected override void OnAcceptChanges()
        {
            base.OnAcceptChanges();
            ApplicationConfiguration.Current.Save();
        }

        IEnumerable<PropertyDescriptor> GetProperties()
        {
            yield return new PropertyDescriptor<ApplicationSettingsDialog>("Localization.Name", Categories.Appearance, typeof(Language)) { Editor = new LanguageDropDownEdit() };
            yield return new PropertyDescriptor<ApplicationSettingsDialog>("Map.ZoomRate", Categories.Map, Types.Int32) { Editor = new PercentValueEdit { MaxLength = 3, MinimumValue = 10, MaximumValue = 100 } };
        }

        #region ICustomTypeDescriptor

        AttributeCollection ICustomTypeDescriptor.GetAttributes()
        {
            return default(AttributeCollection);
        }

        string ICustomTypeDescriptor.GetClassName()
        {
            return default(string);
        }

        string ICustomTypeDescriptor.GetComponentName()
        {
            return default(string);
        }

        TypeConverter ICustomTypeDescriptor.GetConverter()
        {
            return default(TypeConverter);
        }

        EventDescriptor ICustomTypeDescriptor.GetDefaultEvent()
        {
            return default(EventDescriptor);
        }

        PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty()
        {
            return default(PropertyDescriptor);
        }

        object ICustomTypeDescriptor.GetEditor(Type editorBaseType)
        {
            return default(object);
        }

        EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
        {
            return default(EventDescriptorCollection);
        }

        EventDescriptorCollection ICustomTypeDescriptor.GetEvents()
        {
            return default(EventDescriptorCollection);
        }

        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
        {
            return new PropertyDescriptorCollection(GetProperties().ToArray());
        }

        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties()
        {
            return new PropertyDescriptorCollection(GetProperties().ToArray());
        }

        object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
        {
            return this;
        }

        #endregion
    }
}