////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//using System.ComponentModel;
//using System.Drawing;
//using System.Linq;

//namespace System.Windows.Forms
//{
//    [ToolboxItem(false)]
//    public class TreeViewBaseEdit : TreeView, ISupportInitialize
//    {
//        public TreeViewBaseEdit(TreeViewEdit owner)
//        {
//            Owner = owner;

//            Indent = 0;
//            ShowLines = false;
//            FullRowSelect = true;
//            ShowPlusMinus = false;

//            DrawMode = TreeViewDrawMode.OwnerDrawAll;
//            BackColor = ApplicationAppereance.Colors.Window;
//            SetStyle(ControlStyles.UserPaint | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);

//            BorderStyle = BorderStyle.None;
//            MinimumSize = new Size(160, ItemHeight = 22);

//            ImageList = new ImageList
//            {
//                ImageSize = new Size(16, 16),
//                ColorDepth = ColorDepth.Depth32Bit
//            };
//        }

//        protected int Init;
//        protected Message Message;
//        protected BackgroundWorker Worker;
//        protected TreeViewEdit Owner;

//        public void BeginInit()
//        {
//            Init++;
//        }

//        public void EndInit()
//        {
//            Init--;
//        }

//        [Browsable(false)]
//        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
//        public bool AutoWidth
//        {
//            get;
//            set;
//        }

//        [Browsable(false)]
//        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
//        public TreeNode[] CheckedNodes
//        {
//            get { return Nodes.GetAllChildren().Where(e => e.Checked).ToArray(); }
//            set
//            {
//                using (this.Begin())
//                {
//                    foreach (TreeNode e in Nodes.GetAllChildren())
//                    {
//                        e.Checked = value.Contains(e);
//                    }
//                }
//            }
//        }

//        protected new internal void Paint(PaintEventArgs e)
//        {
//            try
//            {
//                base.OnPaint(e);
//            }
//            catch (Exception error)
//            {
//                error.Print();
//            }
//        }

//        protected override void OnPaint(PaintEventArgs e)
//        {
//            try
//            {
//                if (AutoWidth)
//                {
//                    Width = Math.Max(Width, CalculateWidth());
//                }

//                Owner.OnPaint(e);

//                if (GetStyle(ControlStyles.UserPaint))
//                {
//                    Message.HWnd = Handle;
//                    Message.Msg = 0x318;
//                    Message.WParam = e.Graphics.GetHdc();
//                    Message.LParam = new IntPtr(4);
//                    DefWndProc(ref Message);
//                    e.Graphics.ReleaseHdc(Message.WParam);
//                }
//            }
//            catch (Exception error)
//            {
//                error.Print();
//            }
//        }

//        protected override void OnDrawNode(DrawTreeNodeEventArgs e)
//        {
//            base.OnDrawNode(e);
//            Owner.OnPaintNode(e);
//        }

//        protected override void OnItemDrag(ItemDragEventArgs e)
//        {
//            Owner.OnItemDrag(e);
//        }

//        protected override void OnDragEnter(DragEventArgs e)
//        {
//            Owner.OnDragEnter(e);
//        }

//        protected override void OnDragOver(DragEventArgs e)
//        {
//            Owner.OnDragOver(e);
//        }

//        protected override void OnDragDrop(DragEventArgs e)
//        {
//            Owner.OnDragDrop(e);
//        }

//        protected override void OnDragLeave(EventArgs e)
//        {
//            Owner.OnDragLeave(e);
//        }

//        protected override void OnMouseDown(MouseEventArgs e)
//        {
//            SelectedNode = GetNodeAt(e.X, e.Y);
//            base.OnMouseDown(e);
//        }

//        protected override void OnAfterCheck(TreeViewEventArgs e)
//        {
//            base.OnAfterCheck(e);

//            if (Init == 0)
//            {
//                using (this.Begin())
//                {
//                    e.Node.Nodes.SetChecked(e.Node.Checked);
//                }

//                Invalidate(false);
//            }
//        }

//        protected override void OnAfterSelect(TreeViewEventArgs e)
//        {
//            var actionSupport = e.Node as ISupportComponentActions ?? e.Node.Tag as ISupportComponentActions;

//            base.OnAfterSelect(e);

//            if (actionSupport.HasValue())
//            {
//                OnRegisterActions(e.Node, actionSupport.Component, actionSupport.Actions);
//            }
//        }

//        protected virtual void OnRegisterActions(TreeNode node, object component, IComponentActionCollection actions)
//        {
//            var item = default(PopupMenuEdit.Item);
//            var menu = node.ContextMenu as PopupMenuEdit;

//            if (menu.IsNull())
//            {
//                node.ContextMenu = menu = new PopupMenuEdit();
//                node.ContextMenu.Popup += OnActionMenuPopup;
//            }

//            menu.MenuItems.Clear();

//            foreach (IComponentAction action in actions)
//            {
//                if (action.BeginGroup)
//                {
//                    menu.AddSeperator();
//                }

//                item = menu.Add(Localization.Localize(action.Name), (s, e) => action.Perform(this), action.Image);
//                item.Name = action.Name;
//                item.Shortcut = action.Shortcut;
//            }
//        }

//        protected virtual void OnActionMenuPopup(object sender, EventArgs e)
//        {
//            if (SelectedNode.HasValue())
//            {
//                var actionSupport = SelectedNode as ISupportComponentActions ?? SelectedNode.Tag as ISupportComponentActions;

//                if (actionSupport.HasValue())
//                {
//                    OnUpdateActions(SelectedNode, actionSupport.Component, actionSupport.Actions);
//                }
//            }
//        }

//        protected virtual void OnUpdateActions(TreeNode node, object component, IComponentActionCollection actions)
//        {
//            var e = new ComponentActionEventArgs(component)
//            {
//                Bounds = RectangleToScreen(node.Bounds)
//            };

//            foreach (MenuItem item in node.ContextMenu.MenuItems)
//            {
//                if (!string.IsNullOrEmpty(item.Name))
//                {
//                    IComponentAction action = actions[item.Name];

//                    if (action.HasValue())
//                    {
//                        e.Cancel = false;

//                        if (action.CanPerform.HasValue())
//                        {
//                            item.Enabled = action.CanPerform(this);
//                            item.Text = Localization.Localize(action.Name);
//                        }
//                    }
//                }
//            }
//        }

//        protected override void OnKeyUp(KeyEventArgs e)
//        {
//            if (SelectedNode.HasValue() && SelectedNode.ContextMenuStrip.HasValue())
//            {
//                foreach (var item in SelectedNode.ContextMenuStrip.Items.OfType<ToolStripMenuItem>())
//                {
//                    if (item.Enabled && item.ShortcutKeys == (ModifierKeys | e.KeyCode))
//                    {
//                        item.PerformClick();
//                    }
//                }
//            }

//            base.OnKeyUp(e);
//        }

//        protected override void OnBeforeExpand(TreeViewCancelEventArgs e)
//        {
//            if (e.Node is ISupportNodeExpanding && e.Node.Nodes.Count == 1 && string.IsNullOrEmpty(e.Node.FirstNode.Text))
//            {
//                if (Worker.IsNull())
//                {
//                    Worker = new BackgroundWorker();
//                    Worker.DoWork += OnNodeExpanding;
//                    Worker.RunWorkerCompleted += OnNodeExpanded;
//                }

//                Worker.RunWorkerAsync(e.Node);
//            }

//            base.OnBeforeExpand(e);
//        }

//        protected override void OnAfterExpand(TreeViewEventArgs e)
//        {
//            base.OnAfterExpand(e);
//        }

//        protected virtual void OnNodeExpanding(object sender, DoWorkEventArgs e)
//        {
//            if (!Disposing)
//            {
//                var supportNodeExpanding = e.Argument as ISupportNodeExpanding;

//                if (supportNodeExpanding.HasValue())
//                {
//                    var node = e.Argument as TreeNode;
//                    var args = new NodeExpandingEventArgs(this, node);

//                    args.Invoke(() => node.Nodes.AddRange(supportNodeExpanding.CreateChildNodes(args).ToArray()));

//                    e.Result = args;
//                }
//            }
//        }

//        protected virtual void OnNodeExpanded(object sender, RunWorkerCompletedEventArgs e)
//        {
//            (e.Result as IDisposable).DisposeSafely();
//            Worker.DisposeSafely();
//            Worker = null;
//        }

//        protected override void OnSizeChanged(EventArgs e)
//        {
//            base.OnSizeChanged(e);
//            Invalidate(false);
//        }

//        public int CalculateWidth()
//        {
//            return CalculateWidth(Nodes);
//        }

//        protected internal int GetLeft(int level)
//        {
//            return (Indent / 2) + (level * Indent);
//        }

//        protected int CalculateWidth(TreeNodeCollection nodes)
//        {
//            if (nodes.Count > 0)
//            {
//                return nodes.Cast<TreeNode>().Max(n => Math.Max(GetLeft(n.Level) + ControlHelper.MeasureText(n.Text, Font).Width + 48, CalculateWidth(n.Nodes)));
//            }

//            return 0;
//        }

//        public virtual bool IsDisposing()
//        {
//            return Disposing;
//        }

//        public new virtual bool IsDisposed()
//        {
//            return base.IsDisposed;
//        }
//    }
//}
