////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//using System.Collections.Generic;
//using System.Linq;
//using System.ComponentModel;

//namespace System.Windows.Forms
//{
//    public class DropDownTreeEdit : PopupContainerEdit
//    {
//        public DropDownTreeEdit()
//        {
//            Height = 19;
//            Control = new TreeViewEdit { AutoWidth = true };
//        }

//        public new TreeViewEdit Control
//        {
//            get { return base.Control as TreeViewEdit; }
//            set { base.Control = value; }
//        }

//        [Browsable(false)]
//        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
//        public bool CheckBoxes
//        {
//            get { return Control.CheckBoxes; }
//            set { Control.CheckBoxes = value; }
//        }

//        [Browsable(false)]
//        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
//        public int ItemHeight
//        {
//            get { return Control.ItemHeight; }
//            set { Control.ItemHeight = value; }
//        }

//        public void Clear()
//        {
//            Control.Clear();
//        }

//        [Browsable(false)]
//        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
//        public TreeNodeCollection Nodes
//        {
//            get { return Control.Nodes; }
//        }

//        [Browsable(false)]
//        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
//        public TreeNode[] CheckedNodes
//        {
//            get { return Control.CheckedNodes; }
//            set { Control.CheckedNodes = value; }
//        }

//        protected override void OnPopupOpening(object sender, CancelEventArgs e)
//        {
//            Control.Width = Math.Max(Width, Control.Width);
//            Control.Height = Math.Max(240, Control.Height);
//            base.OnPopupOpening(sender, e);
//        }
//    }
//}
