//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    public static class TreeViewExtensions
    {
        public static int AddImage(this ImageList component, string key, Image image)
        {
            if (component.Images.ContainsKey(key))
            {
                using (component.Images[key])
                {
                    component.Images.RemoveByKey(key);
                }
            }

            component.Images.Add(key, image);

            return component.Images.IndexOfKey(key);
        }

        public static TreeNode Add(this TreeNodeCollection component, string text, Image image)
        {
            return Add(component, text, text, default(object), image);
        }

        public static TreeNode Add(this TreeNodeCollection component, string text, object value, Image image)
        {
            return Add(component, text, text, value, image);
        }

        public static TreeNode Add(this TreeNodeCollection component, string name, string text, object value, Image image)
        {
            TreeNode node = component.Add(name, text);

            node.Tag = value;
            node.SetImage(image);

            return node;
        }

        public static IEnumerable<TreeNode> GetAllChildren(this TreeNodeCollection component)
        {
            foreach (TreeNode item in component)
            {
                yield return item;

                foreach (TreeNode child in GetAllChildren(item.Nodes))
                {
                    yield return child;
                }
            }
        }

        public static void SetChecked(this TreeNodeCollection component, bool value)
        {
            component.Cast<TreeNode>().ForEach(item =>
            {
                item.Checked = value;
                SetChecked(item.Nodes, value);
            });
        }

        public static void LabelEdit(this TreeNode component, Action<string> action)
        {
            if (component.HasValue())
            {
                var endLabelEdit = default(NodeLabelEditEventHandler);

                endLabelEdit = new NodeLabelEditEventHandler((sender, e) =>
                {
                    e.Node.TreeView.LabelEdit = false;
                    e.Node.TreeView.AfterLabelEdit -= endLabelEdit;
                    e.CancelEdit = string.IsNullOrEmpty(e.Label);

                    if (!e.CancelEdit)
                    {
                        action(e.Label);
                    }
                });

                component.TreeView.LabelEdit = true;
                component.TreeView.AfterLabelEdit += endLabelEdit;
                component.BeginEdit();
            }
        }

        public static void SetImage(this TreeNode component, Image image)
        {
            component.TreeView.ImageList.AddImage(component.Name, image);
            component.ImageKey = component.Name;
            component.SelectedImageKey = component.Name;
        }

        public static void AddSeperator(this ContextMenuStrip component)
        {
            if (component.Items.Count > 0)
            {
                var item = component.Items.Cast<ToolStripItem>().LastOrDefault();

                if (!(item is ToolStripSeparator))
                {
                    component.Items.Add(new ToolStripSeparator());
                }
            }
        }
    }
}
