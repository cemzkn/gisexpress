//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.IO;
using System.Drawing;
using System.Linq;
using System.Resources;
using System.Workspace;

namespace System.Windows.Modules.Data
{
    internal class DataTableItemCollection : Collection<DataTableItem>, ITypedList, IImagedList
    {
        public DataTableItemCollection(MapWorkspace workspace)
            : base(GetTables(workspace).ToList())
        {
        }

        static IEnumerable<DataTableItem> GetTables(MapWorkspace workspace)
        {
            foreach (DataConnection connection in workspace.Connections)
            {
                if (connection.Browsable)
                {
                    foreach (SqlTableSource table in connection.InformationSchema.Tables)
                    {
                        if (table.HasGeometry)
                        {
                            yield return new DataTableItem(table);
                        }
                    }
                }
            }
        }

        public Image GetImage(int index)
        {
            return Images016.DataTable;
        }

        public string GetListName(PropertyDescriptor[] listAccessors)
        {
            return string.Empty;
        }

        public PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors)
        {
            return typeof(DataTableItem).GetPropertyDescriptors();
        }
    }
}
