//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Linq;
using System.Windows.Modules;
using System.Windows.Modules.Controls;

namespace System.Windows.Forms
{
    public class ApplicationDocumentManager : DocumentManager, IDocumentManager
    {
        public ApplicationDocumentManager(ApplicationForm owner)
            : base(owner)
        {
        }

        public event Action<IDocument> DocumentAdded;

        public event Action<IDocument> DocumentActivated;

        public event Action<IDocument> DocumentDeactivated;

        public event Action<IDocument, CancelEventArgs> DocumentClosing;

        public event Action<IDocument> DocumentClosed;

        public event Action<CollectionChangeEventArgs> CollectionChanged;

        public new IDocument ActiveDocument
        {
            get { return (IDocument)base.ActiveDocument; }
        }

        public IDocument AddDocument(IProject project)
        {
            return (IDocument)base.AddDocument(project.Designer as Control);
        }

        public new IDocument AddDocument(Control value)
        {
            return (IDocument)base.AddDocument(value);
        }

        public void Activate(IProject project)
        {
            IDocument document = Find(project);

            if (document.HasValue())
            {
                document.Activate();
            }
        }

        public IDocument Find(IProject project)
        {
            IApplicationComponentDesigner designer;

            foreach (Document item in this)
            {
                designer = item.Controls.Cast<Control>().FirstOrDefault() as IApplicationComponentDesigner;

                if (designer.HasValue() && project == designer.Project)
                {
                    return (IDocument)item;
                }
            }

            return null;
        }

        protected override Document OnCreateDocument(string name, Control value)
        {
            return new ApplicationDocument(name, value);
        }

        protected override void OnDocumentAdded(Document document)
        {
            DocumentAdded.InvokeSafely(document);
        }

        protected override void OnDocumentActivated(Document document)
        {
            DocumentActivated.InvokeSafely(document);
        }

        protected override void OnDocumentDeactivated(Document document)
        {
            DocumentDeactivated.InvokeSafely(document);
        }

        protected override void OnDocumentClosing(Document document, CancelEventArgs e)
        {
            DocumentClosing.InvokeSafely(document, e);
        }

        protected override void OnDocumentClosed(Document document)
        {
            DocumentClosed.InvokeSafely(document);
        }

        protected override void OnDocumentCollectionChanged(CollectionChangeEventArgs e)
        {
            CollectionChanged.InvokeSafely(e);
        }

        public void Update()
        {
            View.Update();
        }

        public void Refresh()
        {
            View.Refresh();
        }
    }

    public class ApplicationDocument : DocumentManager.Document, IDocument
    {
        public ApplicationDocument(string name, Control value)
            : base(name, value)
        {
            var desiger = value as IApplicationComponentDesigner;

            if (desiger.HasValue())
            {
                Project = desiger.Project as IProject;
                Text = Project.Name;
            }
        }

        public IProject Project
        {
            get;
            protected set;
        }

        public override bool CanRemove
        {
            get { return Project.HasValue(); }
        }
    }
}
