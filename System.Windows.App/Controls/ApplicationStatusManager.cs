//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Linq;
using System.Windows.Modules;
using System.Windows.Modules.Controls;

namespace System.Windows.Forms
{
    internal class ApplicationStatusManager : StatusManager, IApplicationStatusManager
    {
        public ApplicationStatusManager(ApplicationMainForm owner)
            : base(owner)
        {
        }

        public IApplicationControl this[string name]
        {
            get { return Controls.Find(name, true).FirstOrDefault() as IApplicationControl; }
        }

        protected override StatusToolbarLabel OnCreateLabel()
        {
            return new ApplicationStatusLabel();
        }

        protected override StatusToolbarButton OnCreateButton(Keys shortcut)
        {
            return new ApplicationStatusButton { Shortcut = shortcut };
        }

        IApplicationControl IApplicationStatusManager.AddLabel(string name)
        {
            return AddLabel(name) as IApplicationControl;
        }

        IApplicationControl IApplicationStatusManager.AddLabel(string name, ContentAlignment alignment)
        {
            return AddLabel(name, null) as IApplicationControl;
        }

        IApplicationControl IApplicationStatusManager.AddLabel(string name, ContentAlignment alignment, Image image)
        {
            return AddLabel(name, image, alignment) as IApplicationControl;
        }

        IApplicationControl IApplicationStatusManager.AddButton(string name, Image image, EventHandler onClick)
        {
            return AddButton(name, image, Keys.None, onClick) as IApplicationControl;
        }

        IApplicationControl IApplicationStatusManager.AddButton(string name, Image image, Keys shortcut, EventHandler onClick)
        {
            return AddButton(name, image, shortcut, onClick) as IApplicationControl;
        }

        public class ApplicationStatusLabel : StatusToolbarLabel, IApplicationControl
        {
            public bool Checked
            {
                get;
                set;
            }

            public StringAlignment TextAlignment
            {
                get;
                set;
            }
        }

        public class ApplicationStatusButton : StatusToolbarButton, IApplicationControl
        {
            public bool Checked
            {
                get;
                set;
            }

            public StringAlignment TextAlignment
            {
                get;
                set;
            }
        }
    }
}
