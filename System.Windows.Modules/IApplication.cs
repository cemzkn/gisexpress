//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Configuration;
using System.Data;
using System.Windows.Forms;
using System.Windows.Modules.Controls;
using System.Workspace;

namespace System.Windows.Modules
{
    public delegate void ApplicationLoadEventHandler(ApplicationLoadEventArgs e);
    public delegate void ProjectEventHandler(ProjectEventArgs e);
    public delegate void ActiveProjectChangedEventHandler(ActiveProjectChangedEventArgs e);
    public delegate void ProjectViewEventHandler(ProjectEventArgs e, IProjectView view);
    public delegate void ProjectChangeEventHandler(ProjectEventArgs e, CollectionChangeAction action);
    public delegate void ProjectCancelEventHandler(ProjectCancelEventArgs e);
    public delegate void MapEventHandler(MapEventArgs e);
    public delegate void FeatureEventHandler(FeatureEventArgs e);

    public interface IApplication : IPropertyGetter
    {
        event Action Cancel;
        event ApplicationLoadEventHandler Load;
        event ApplicationLoadEventHandler Initializing;

        event ProjectEventHandler ProjectLoading;
        event ProjectEventHandler ProjectLoad;
        event ProjectEventHandler ProjectActivated;
        event ProjectEventHandler ProjectDeactivated;
        event ProjectCancelEventHandler ProjectOpening;
        event ProjectEventHandler ProjectChanged;
        event MapEventHandler ProjectScaleChanged;
        event ProjectEventHandler ProjectSaved;
        event ProjectCancelEventHandler ProjectClosing;
        event ProjectEventHandler ProjectClosed;
        event ActiveProjectChangedEventHandler ActiveProjectChanged;
        event ProjectChangeEventHandler ProjectCollectionChanged;

        event ApplicationComponentEventHandler ActiveComponentChanged;
        //event Action<CollectionChangeAction, MapCategory> CategoryCollectionChanged;
        event Action<CollectionChangeAction, MapLayer> LayerCollectionChanged;
        event Func<CollectionChangeAction, IFeature, bool> FeatureCollectionChanging;
        event Action<CollectionChangeAction, IFeature> FeatureCollectionChanged;

        event EventHandler CursorEnter;
        event MapEventHandler CursorButtonUp;
        event MapEventHandler CursorButtonDown;
        event MapEventHandler CursorLocationChanged;

        event Action<MapWorkspace> BeginRender;
        event Action<MapWorkspace, MapLayer> BeginLayerRender;
        event FeatureDrawEventHandler FeatureRender;

        string Name
        {
            get;
        }

        bool IsDisposing();

        IApplicationMainForm Form
        {
            get;
        }

        ApplicationConfiguration Settings
        {
            get;
        }

        IApplicationModuleManager Modules
        {
            get;
        }

        IProject ActiveProject
        {
            get;
        }

        IApplicationFileManager Files
        {
            get;
        }

        IApplicationProjectManager Projects
        {
            get;
        }

        bool CopyMode
        {
            get;
            set;
        }

        void ShowProperties();
        void ShowProperties(object obj);

        DialogResult ShowMessage(Exception e);
        DialogResult ShowMessage(string message);
        DialogResult ShowMessage(string message, MessageBoxIcon icon);
        DialogResult ShowMessage(string message, MessageBoxIcon icon, MessageBoxButtons buttons);
    }
}