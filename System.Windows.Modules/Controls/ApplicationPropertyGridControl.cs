//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Geometries;
using System.Windows.Forms;
using System.Workspace;

namespace System.Windows.Modules.Controls
{
    internal class ApplicationPropertyGridControl : PropertyGridEdit, IPropertyGrid
    {
        public ApplicationPropertyGridControl(IApplication application)
        {
            Application = application;
            Dock = DockStyle.Fill;
            Padding = new Padding(0);
            BorderStyle = default(Border3DSide);
        }

        static ApplicationPropertyGridControl()
        {
            TypeDescriptor.AddAttributes(typeof(LinearUnits), new EditorAttribute(typeof(EnumEdit), Types.Control));
            TypeDescriptor.AddAttributes(typeof(ICoordinate), new EditorAttribute(typeof(FeaturePointEdit), Types.Control));
            TypeDescriptor.AddAttributes(typeof(MapLayer), new EditorAttribute(typeof(MapLayerDropDownEdit), Types.Control));
        }

        public IApplication Application
        {
            get;
            protected set;
        }

        public bool IsEmpty()
        {
            return SelectedObject.IsNull();
        }

        public PropertyDescriptor SelectedProperty
        {
            get
            {
                if (SelectedItem is GridPropertyItem)
                {
                    return SelectedItem.PropertyDescriptor;
                }

                return default(PropertyDescriptor);
            }
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            if (Application.Form.CommandManager.PerformCommand(e.KeyCode))
            {
                return;
            }

            base.OnKeyDown(e);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                Application = null;
            }

            base.Dispose(disposing);
        }
    }
}
