//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Geometries;
using System.Geometries.Operation.Buffer;
using System.Linq;

namespace System.Windows.Modules.Controls
{
    public class PreviewBox : IDisposable
    {
        public PreviewBox()
        {
            Box = GeometryFactory.CreateRectangle();
            Compass = GeometryFactory.CreateArc();
            Geometries = GeometryFactory.CreateGeometryCollection();
            Image = BitmapExtensions.NewImage(Padding + BoxSize + Padding, Padding + BoxSize + Padding);
        }

        public Image Image
        {
            get;
            protected set;
        }

        protected const int Padding = 48;
        protected const int BoxSize = 48;

        protected IRectangle Box;
        protected IArc Compass;
        protected IGeometryCollection Geometries;

        public void DrawToBitmap(Point3D axis, double north)
        {
            double minx, maxx, miny, maxy;

            using (IMapTransform transform = GeometryFactory.CreateTransform())
            {
                int width = Image.Width;
                int height = Image.Height;

                transform.ClientWidth = width;
                transform.ClientHeight = height;
                transform.ZoomTo(GeometryFactory.CreateEnvelope(-width, width, -height, height));

                float top = (height - BoxSize) / 2F;
                float left = (width - BoxSize) / 2F;
                float right = (width + BoxSize) / 2F;
                float bottom = (height + Padding) / 2F;

                if (transform.ClientToWorld(top, left, out minx, out miny) && transform.ClientToWorld(right, bottom, out maxx, out maxy))
                {
                    //IGeometry compassGeometry;

                    var e = new DrawTextEventArgs
                    {
                        Alignment = ContentAlignment.MiddleRight,
                    };

                    Geometries.Clear();

                    Box.Clear();
                    Box.Add(minx, miny);
                    Box.Add(maxx, maxy);
                    Box.SetAltitude(Box.Height);
                    //Box.Thickness = Box.Height;

                    Compass.Clear();
                    Compass.Add(minx, (miny + maxy) / 2.0, 0.0);
                    Compass.Add(maxx, (miny + maxy) / 2.0, 0.0);
                    Compass.Radius = Box.Height;
                    Compass.StartAngle = 90.0.DegreeToRadian();
                    Compass.SweepAngle = AppConstants.TwoPI;

                    Geometries.Add(Box);
                    //compassGeometry = Compass.Buffer(6.0 * transform.HorizontalResolution, new BufferParameters(9));

                    //if (compassGeometry.IsNotNull())
                    //{
                    //    compassGeometry.SetAltitude(0.0);
                    //    Geometries.Add(compassGeometry);
                    //}

                    using (Graphics g = Graphics.FromImage(Image))
                    {
                        g.Clear(Color.Transparent);
                        g.SetHighQuality();

                        transform.ResetAxis();

                        if (!axis.IsEmpty)
                        {
                            transform.RotateAxisAt(axis.X, axis.Y, axis.Z, Box.GetCentroid());
                        }

                        var style = PaintStyle.Default;

                        foreach (IGeometry3D g3d in Geometries.GetGeometries().Select(g2d => g2d.AsGeometry3D(transform)).OrderBy(item => item))
                        {
                            if (g3d.Bottom.Geometry.Count == 5)
                            {
                                if (!transform.AxisIsIdentity)
                                {
                                    g3d.Top.Text = Localization.Localize("PreviewBox.Top");
                                    g3d.Bottom.Text = Localization.Localize("PreviewBox.Bottom");
                                    g3d.Paint(g, style, false);
                                }
                            }
                            else
                            {
                                ICoordinate c;
                                PointF origin = new PointF(transform.ClientWidth * 0.5F, Padding * 1.5F);

                                transform.RotateAt(-north, 0.0, 0.0);

                                style.PolyStyle.Color = Color.FromArgb(50, Color.Black);
                                g3d.Paint(g, style, false);

                                if (g3d.Bottom.TextRenderArgs.HasValue())
                                {
                                    g3d.Bottom.Text = Localization.Localize("PreviewBox.East");
                                    origin.X += Padding;
                                    c = transform.ClientToWorld(origin);

                                    if (transform.Transform(c))
                                    {
                                        g3d.Bottom.TextRenderArgs.Outline = true;
                                        g3d.Bottom.TextRenderArgs.FontSize = 18F;
                                        g3d.Bottom.TextRenderArgs.FontStyle = FontStyle.Bold;
                                        g3d.Bottom.TextRenderArgs.ForeColor = Color.White;
                                        g3d.Bottom.TextRenderArgs.Origin = transform.WorldToClient(c);
                                        g3d.Bottom.PaintText(g);
                                    }

                                    g3d.Bottom.Text = Localization.Localize("PreviewBox.West");
                                    origin.X -= (BoxSize + Padding);
                                    c = transform.ClientToWorld(origin);

                                    if (transform.Transform(c))
                                    {
                                        g3d.Bottom.TextRenderArgs.Origin = transform.WorldToClient(c);
                                        g3d.Bottom.PaintText(g);
                                    }

                                    g3d.Bottom.Text = Localization.Localize("PreviewBox.North");
                                    origin.X += (BoxSize + Padding) * .5F;
                                    origin.Y -= (BoxSize + Padding) * .5F;
                                    c = transform.ClientToWorld(origin);

                                    if (transform.Transform(c))
                                    {
                                        g3d.Bottom.TextRenderArgs.Origin = transform.WorldToClient(c);
                                        g3d.Bottom.PaintText(g);
                                    }

                                    g3d.Bottom.Text = Localization.Localize("PreviewBox.South");
                                    origin.Y += (BoxSize + Padding);
                                    c = transform.ClientToWorld(origin);

                                    if (transform.Transform(c))
                                    {
                                        g3d.Bottom.TextRenderArgs.Origin = transform.WorldToClient(c);
                                        g3d.Bottom.PaintText(g);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public void Dispose()
        {
            Image.DisposeSafely();

            Box = null;
            Compass = null;
            Geometries = null;
            Image = null;

            GC.SuppressFinalize(this);
        }
    }
}
