//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Drawing;
using System.Geometries;
using System.Linq;
using System.Windows.Forms;
using System.Workspace;
using System.Workspace.Drawing;

namespace System.Windows.Modules.Controls
{
    [ToolboxItem(false)]
    public class MapControl : BaseEdit, IApplicationComponentDesigner
    {
        public event Action Cancel;

        public event Action<Point> SelectPoint
        {
            add
            {
                SelectPointAction += value;
            }
            remove
            {
                SelectPointAction -= value;
            }
        }

        public event Action<RectangleF> SelectRectangle
        {
            add
            {
                SelectRectangleAction += value;
            }
            remove
            {
                SelectRectangleAction -= value;
            }
        }

        public event MapEventHandler CursorLocationChanged;
        public event ApplicationComponentEventHandler ActiveComponentChanged;

        protected bool MouseOver;
        protected PointF DragAt;
        protected PointF DragStart;
        protected PointF RectUpperLeft;
        protected RectangleF RectValue;
        protected KeyEventArgs KeyArgs;
        protected MapEventArgs MapArgs;
        protected MouseEventArgs MouseArgs;
        protected ContextMenuStrip MenuStrip;
        protected IGeometryCollection Shapes;

        protected bool PreviewMode;
        protected long PreviewTicks;
        protected Image Preview;
        protected double PreviewUpperLeftX;
        protected double PreviewUpperLeftY;
        protected double PreviewLowerRightX;
        protected double PreviewLowerRightY;

        protected Point AxisAt;
        protected Point3D Axis;
        protected Point3D CurrentAxis;
        //protected PreviewBox Box;

        protected Action RefreshAction;
        protected long BusyTicks = Environment.TickCount;
        protected List<IApplicationComponent> EditComponents;

        protected static readonly KeyEventArgs EmptyKey = new KeyEventArgs(Keys.None);
        protected static readonly MouseEventArgs EmptyMouse = new MouseEventArgs(MouseButtons.None, 0, 0, 0, 0);

        protected event Action<Point> SelectPointAction;
        protected event Action<RectangleF> SelectRectangleAction;

        public IProject Project
        {
            get { return MapArgs.Project; }
        }

        public MapWorkspace Workspace
        {
            get;
            protected set;
        }

        public IUnitConverter UnitConverter
        {
            get { return Project.UnitConverter; }
        }

        public MapCanvas Canvas
        {
            get;
            protected set;
        }

        public IMapTransform Transform
        {
            get;
            protected set;
        }

        public double NorthAngle
        {
            get { return (double)Project.Properties.GetValue("NorthAngle"); }
        }

        public bool AllowAxisRotation
        {
            get;
            set;
        }

        public KeyEventArgs Keyboard
        {
            get { return KeyArgs ?? EmptyKey; }
        }

        public MouseEventArgs Mouse
        {
            get { return MouseArgs ?? EmptyMouse; }
        }

        public ContextMenuStrip PopupMenu
        {
            get { return MenuStrip ?? (MenuStrip = new ContextMenuStrip()); }
        }

        public void Init(object project)
        {
            MapArgs = new MapEventArgs((IProject)project);
            RefreshAction = new Action(Refresh);

            Project.Workspace.BeginRender += OnBeginRender;
            Project.Workspace.RenderCompleted += OnRenderCompleted;
            Project.Workspace.RenderProgressChanged += OnRenderProgressChanged;
            Project.Properties.PropertyValueChanged += OnProjectPropertyValueChanged;

            Workspace = Project.Workspace;
            Canvas = Workspace.Canvas;
            Transform = Canvas.Graphics.Transform;

            //Box = new PreviewBox();
            Dock = DockStyle.Fill;
            BackColor = SystemColors.Window;
            EditComponents = new List<IApplicationComponent>();
        }

        public void Clear()
        {
            Canvas.Clear(BackColor);
        }

        protected override bool ShowFocusRectangle
        {
            get { return false; }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            this.UpdateFocus();
            //Transform.RaiseScaleChanged();
            base.OnVisibleChanged(e);
        }

        protected void OnPaintPreviewBox(PaintEventArgs e)
        {
            //e.Graphics.DrawImage(Box.Image, Width - Box.Image.Width, 0);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            try
            {
                e.Graphics.SetHighQuality();

                if (DragAt.IsEmpty)
                {
                    if (PreviewMode)
                    {
                        OnDrawPreview(e);
                    }
                    else
                    {
                        OnDrawBackground(e);
                    }
                }
                else
                {
                    Canvas.Draw(e.Graphics, Mouse.X - DragStart.X, Mouse.Y - DragStart.Y);
                }

                base.OnPaint(e);

                EditComponents.ForEach(c => c.Listener.Paint(e), true);

                if (!RectUpperLeft.IsEmpty)
                {
                    UpdateRectangle(MouseArgs);

                    e.Graphics.FillRectangle(ApplicationAppereance.Brushes.HighlightTransparent, RectValue.X, RectValue.Y, RectValue.Width, RectValue.Height);
                    e.Graphics.DrawRectangle(ApplicationAppereance.Pens.ActiveBorder, RectValue.X, RectValue.Y, RectValue.Width, RectValue.Height);
                }

                OnPaintPreviewBox(e);
            }
            catch (Exception error)
            {
                error.Print();
            }
        }

        protected void OnDrawBackground(PaintEventArgs e)
        {
            e.Graphics.SetHighQuality();
            Canvas.Draw(e.Graphics);
        }

        protected void OnDrawPreview(PaintEventArgs e)
        {
            PointF min = Transform.WorldToClient(PreviewUpperLeftX, PreviewUpperLeftY);
            PointF max = Transform.WorldToClient(PreviewLowerRightX, PreviewLowerRightY);

            float width = max.X - min.X;
            float height = max.Y - min.Y;

            if (width > 2F && height > 2F && width < 1e+6f && height < 1e+6f)
            {
                if (Preview.HasValue())
                {
                    e.Graphics.DrawImage(Preview, min.X, min.Y, width, height);
                }
            }
        }

        protected void OnProjectPropertyValueChanged(IPropertyDescriptor property)
        {
            switch (property.Name)
            {
                case "NorthAngle":
                    //Box.DrawToBitmap(Transform.AxisIsIdentity ? Point3D.Empty : Axis, property.Value.ConvertTo<double>());
                    //Flush();
                    break;
            }
        }

        protected override void OnKeyDown(KeyEventArgs e)
        {
            KeyArgs = e;

            if (e.KeyCode == Keys.Escape)
            {
                if (Workspace.IsBusy)
                {
                    Workspace.CancelAsync();
                }

                CancelEdit();
                CancelActions();
                Flush();
            }

            if (DesignMode)
            {
                ActiveComponent.Listener.KeyDown(e);
            }

            base.OnKeyDown(e);
        }

        protected override void OnKeyUp(KeyEventArgs e)
        {
            KeyArgs = EmptyKey;

            if (DesignMode)
            {
                ActiveComponent.Listener.KeyUp(e);
            }

            base.OnKeyUp(e);
        }

        protected override void OnMouseEnter(EventArgs e)
        {
            base.OnMouseEnter(e);

            MouseOver = true;

            if (DesignMode)
            {
                ActiveComponent.Listener.MouseEnter(e);
            }
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            base.OnMouseLeave(e);

            MouseOver = false;
            MouseArgs = EmptyMouse;

            CursorLocationChanged.InvokeSafely(MapArgs);

            if (DesignMode)
            {
                ActiveComponent.Listener.MouseLeave(e);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);
            this.UpdateFocus();

            bool flag = IsBusy;

            if (e.Button == MouseButtons.Right)
            {
                CancelActions();
            }

            if ((Keyboard.Control && e.Button == MouseButtons.Left) || e.Button == MouseButtons.Middle)
            {
                DragAt = e.Location;
                DragStart = e.Location;
            }
            else if ((Keyboard.Shift && e.Button == MouseButtons.Left) || SelectRectangleAction.HasValue())
            {
                if (RectUpperLeft.IsEmpty)
                {
                    RectUpperLeft = e.Location;
                }
            }
            else
            {
                if (DesignMode)
                {
                    ActiveComponent.Listener.MouseDown(e);
                }
                else if (AllowAxisRotation && e.Button == MouseButtons.Left)
                {
                    AxisAt = e.Location;
                }

                if (!flag)
                {
                    if (e.Button == MouseButtons.Left)
                    {
                        SelectPointAction.InvokeSafely(e.Location);
                    }
                }
            }
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            base.OnMouseUp(e);

            if (ZoomEnd(e))
            {
                MouseArgs = e;
                Project.Render();
            }
            else if (DragEnd(e))
            {
                MouseArgs = e;
                Redraw();
            }
            //else if (OnAxisChanged(e))
            //{
            //    CurrentAxis = Axis;
            //    AxisAt = Point.Empty;
            //}

            if (DesignMode)
            {
                ActiveComponent.Listener.MouseUp(e);
            }
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);

            if (!Mouse.Location.Equals(e.Location))
            {
                MouseArgs = e;

                if (DragAt.IsEmpty && RectUpperLeft.IsEmpty)
                {
                    //OnAxisChanged(e);
                    CursorLocationChanged.InvokeSafely(MapArgs);
                }
                else if (!DragAt.IsEmpty)
                {
                    if (e.Button == MouseButtons.Left || e.Button == MouseButtons.Middle)
                    {
                        Canvas.Translate(DragAt, e.Location);
                        DragAt = e.Location;
                        Flush();
                    }
                    else
                    {
                        if (DragEnd(e))
                        {
                            Project.Render();
                        }
                    }
                }
                else if (!RectUpperLeft.IsEmpty)
                {
                    Flush();
                }

                if (DesignMode)
                {
                    ActiveComponent.Listener.MouseMove(e);
                }
            }
        }

        //protected bool OnAxisChanged(MouseEventArgs e)
        //{
        //    if (AllowAxisRotation && !AxisAt.IsEmpty && e.Button == MouseButtons.Left)
        //    {
        //        float dx = e.X - AxisAt.X;
        //        float dy = e.Y - AxisAt.Y;

        //        if (!dx.IsZero() || !dy.IsZero())
        //        {
        //            Axis.X = CurrentAxis.X + (dy / (Transform.ClientHeight / 180.0)) % 360;
        //            Axis.Y = CurrentAxis.Y + (dx / (Transform.ClientWidth / 180.0)) % 360;

        //            ResetAxis();
        //            RotateAxis(Axis.X, Axis.Y, Axis.Z);

        //            Redraw();
        //        }

        //        return true;
        //    }

        //    return false;
        //}

        protected override void OnMouseWheel(MouseEventArgs e)
        {
            base.OnMouseWheel(e);

            if (MouseOver)
            {
                DragEnd(e);

                int percent = -Math.Sign(e.Delta) * Project.Application.Settings.Options.ZoomFactor;

                if (Canvas.ZoomAt(100 + percent, MouseArgs.Location))
                {
                    Redraw();
                }
            }
        }

        protected override void OnSizeChanged(EventArgs e)
        {
            base.OnSizeChanged(e);

            if (Width > 0 && Height > 0 && Workspace.HasValue())
            {
                if (Canvas.Init(Width, Height))
                {
                    //Box.DrawToBitmap(Axis, NorthAngle);
                    MouseArgs = null;

                    if (Workspace.CurrentWindow.IsNull() || Workspace.CurrentWindow.IsEmpty())
                    {
                        Transform.ZoomToExtent();
                    }
                    else
                    {
                        Redraw();
                    }
                }
            }
        }

        void CancelActions()
        {
            DragAt = PointF.Empty;
            RectUpperLeft = PointF.Empty;

            if (!IsBusy)
            {
                SelectPointAction = null;
            }

            SelectRectangleAction = null;

            Cancel.InvokeSafely();
        }

        public void UpdateCursor()
        {
            //if (DesignMode || SelectionMode)
            //{
            //    Redraw();
            //}
        }

        protected bool ZoomEnd(MouseEventArgs e)
        {
            if (!RectUpperLeft.IsEmpty)
            {
                UpdateRectangle(e);

                if (RectValue.Width > 2 && RectValue.Height > 2)
                {
                    RectUpperLeft = PointF.Empty;

                    if (SelectRectangleAction.HasValue())
                    {
                        SelectRectangleAction(RectValue);
                    }
                    else
                    {
                        Workspace.ZoomTo(RectValue);
                    }

                    return true;
                }
            }

            return false;
        }

        void UpdateRectangle(MouseEventArgs e)
        {
            RectValue.X = Math.Min(RectUpperLeft.X, e.Location.X);
            RectValue.Y = Math.Min(RectUpperLeft.Y, e.Location.Y);
            RectValue.Width = Math.Abs(RectUpperLeft.X - e.Location.X);
            RectValue.Height = Math.Abs(RectUpperLeft.Y - e.Location.Y);
        }

        protected virtual bool DragEnd(MouseEventArgs e)
        {
            if (!DragAt.IsEmpty)
            {
                Canvas.Translate(DragAt, e.Location);
                DragAt = PointF.Empty;

                return true;
            }

            return false;
        }

        #region IComponentDesigner

        object IApplicationComponentDesigner.Project
        {
            get { return Project; }
        }

        EventArgs IApplicationComponentDesigner.Map
        {
            get { return MapArgs; }
        }

        public IApplicationComponent ActiveComponent
        {
            get { return EditComponents.FirstOrDefault(); }
        }

        public bool IsBusy
        {
            get { return DesignMode && (ActiveComponent.IsBusy() || (Environment.TickCount - BusyTicks) < 50); }
        }

        public new bool DesignMode
        {
            get { return EditComponents.Count > 0; }
        }

        public bool SelectionMode
        {
            get { return SelectPointAction.HasValue() || SelectRectangleAction.HasValue(); }
        }

        public bool BeginEdit(IApplicationComponent component)
        {
            EditComponents.Insert(0, component);

            component.BeginEdit();
            component.EditCompleted += OnComponentEditCompleted;

            ActiveComponentChanged.InvokeSafely<ApplicationComponentEventArgs>(this, EditComponents.FirstOrDefault());

            Flush();

            return true;
        }

        protected void OnComponentEditCompleted(ApplicationComponentEditCompletedEventArgs e)
        {
            e.Component.EditCompleted -= OnComponentEditCompleted;

            if (DesignMode && EditComponents.Remove(e.Component))
            {
                ActiveComponentChanged.InvokeSafely<ApplicationComponentEventArgs>(this, EditComponents.FirstOrDefault());
            }

            Flush();
        }

        protected virtual void OnBeginRender(MapWorkspace workspace)
        {
            Project.Workspace.FeatureRender += OnFeatureRender;

            PreviewMode = Preview.HasValue();
            PreviewTicks = Environment.TickCount;

            if (PreviewMode)
            {
                this.InvokeAction(RefreshAction);
            }
        }

        protected virtual void OnFeatureRender(FeatureDrawEventArgs e)
        {
        }

        protected void OnRenderProgressChanged(RenderProgressChangedEventArgs e)
        {
            if (ApplicationEnvironment.InvalidateRequired(0x100))
            {
                this.InvokeAction(RefreshAction);
            }

            if (!IsBusy && Environment.TickCount - PreviewTicks > 0x400)
            {
                PreviewMode = false;
                Preview = null;
            }
        }

        protected void OnRenderCompleted(RenderCompletedEventArgs e)
        {
            Project.Workspace.FeatureRender -= OnFeatureRender;

            if (!e.Cancelled)
            {
                PreviewMode = false;

                Preview.DisposeSafely();
                Preview = e.WorkSpace.Canvas.ToImage(true).Image;

                Flush();

                Transform.ClientToWorld(0, 0, out PreviewUpperLeftX, out PreviewUpperLeftY);
                Transform.ClientToWorld(Width, Height, out PreviewLowerRightX, out PreviewLowerRightY);
                Transform.RaiseScaleChanged();
            }
        }

        public void Flush()
        {
            if (!Workspace.IsBusy)
            {
                this.InvokeAction(RefreshAction);
            }
        }

        public void CancelEdit()
        {
            if (DesignMode)
            {
                ActiveComponent.EndEdit(ComponentEditCompleteAction.Cancel);
            }
        }

        PointF IApplicationComponentDesigner.Offset
        {
            get
            {
                if (DragAt.IsEmpty)
                {
                    return PointF.Empty;
                }

                return new PointF(Mouse.X - DragStart.X, Mouse.Y - DragStart.Y);
            }
        }

        Point IApplicationComponentDesigner.Location
        {
            get { return PointToClient(MousePosition); }
            set
            {
                Cursor.Position = PointToScreen(value);

                if (DesignMode)
                {
                    ActiveComponent.Listener.MouseMove(MouseArgs);
                }
            }
        }

        IEnvelope IApplicationComponentDesigner.GetCursorBounds(int radius)
        {
            return MapEventArgs.GetCursorBounds(Transform, PointToClient(MousePosition), radius);
        }

        //public void ResetAxis()
        //{
        //    AllowAxisRotation = false;

        //    if (AxisAt.IsEmpty)
        //    {
        //        CurrentAxis = Point3D.Empty;
        //    }

        //    Box.DrawToBitmap(Point3D.Empty, NorthAngle);
        //    Transform.ResetAxis();
        //}

        //public void RotateAxis(double x, double y, double z)
        //{
        //    Axis.X = x;
        //    Axis.Y = y;
        //    Axis.Z = z;

        //    AllowAxisRotation = !Axis.IsEmpty;

        //    if (AxisAt.IsEmpty)
        //    {
        //        CurrentAxis.X = x;
        //        CurrentAxis.Y = y;
        //        CurrentAxis.Z = z;
        //    }

        //    Box.DrawToBitmap(Axis, NorthAngle);
        //    Transform.RotateAxis(x, y, z);
        //}

        Point IApplicationComponentDesigner.WorldToScreen(double x, double y)
        {
            var point = Transform.WorldToClient(x, y);
            var location = new Point((int)point.X, (int)point.Y);
            return PointToScreen(location);
        }

        public Point WorldToPoint(double x, double y)
        {
            var point = Transform.WorldToClient(x, y);
            return new Point((int)point.X, (int)point.Y);
        }

        public void Redraw()
        {
            Project.Render();
        }

        public override void Refresh()
        {
            Invalidate(false);
        }

        #endregion

        protected override void WndProc(ref Message e)
        {
            base.WndProc(ref e);

            if (e.IsSetCursor())
            {
                if (DesignMode)
                {
                    Cursor.Current = OSEnvironment.IsWindows ? ActiveComponent.Cursor : Cursors.Cross;
                }
                else if (SelectionMode)
                {
                    Cursor.Current = OSEnvironment.IsWindows ? ApplicationAppereance.CursorCross : Cursors.Cross;
                }
                else
                {
                    Cursor.Current = Cursors.Default;
                }

                e.Result = new IntPtr(1);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                //Box.DisposeSafely();
                //Box = null;
                Cancel = null;
                SelectPointAction = null;
                SelectRectangleAction = null;
                CursorLocationChanged = null;
                ActiveComponentChanged = null;

                if (Project.HasValue())
                {
                    Project.Workspace.BeginRender -= OnBeginRender;
                    Project.Workspace.RenderCompleted -= OnRenderCompleted;
                    Project.Workspace.RenderProgressChanged -= OnRenderProgressChanged;
                    Project.Properties.PropertyValueChanged -= OnProjectPropertyValueChanged;
                }
            }

            base.Dispose(disposing);
        }
    }
}
