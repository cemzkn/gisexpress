////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//using System.ComponentModel;
//using System.Linq;
//using System.Windows.Forms;

//namespace System.Windows.Modules.Controls
//{
//    [ToolboxItem(false)]
//    public class ViewportEdit : TablePanelEdit
//    {
//        public ViewportEdit(IApplication application)
//        {
//            Application = application;
//            Initialize();
//        }

//        protected readonly IApplication Application;

//        protected CheckEdit Top2D;
//        protected CheckEdit Perspective3D;

//        protected override void OnVisibleChanged(EventArgs e)
//        {
//            Top2D.Checked = Application.ActiveProject.Designer.Transform.AxisIsIdentity;
//            base.OnVisibleChanged(e);
//        }

//        protected void OnCheckedChanged(object sender, EventArgs e)
//        {
//            Application.ActiveProject.Designer.ResetAxis();

//            if (Perspective3D.Checked)
//            {
//                Application.ActiveProject.Designer.RotateAxis(-60.0, 30.0, 0.0);
//            }

//            Application.ActiveProject.Designer.Redraw();
//        }

//        void Initialize()
//        {
//            TransparentHit = false;
//            BackColor = ApplicationAppereance.Colors.Control;

//            AddRow(SizeType.Absolute, 10);
//            AddRow(SizeType.Absolute, 24);
//            AddRow(SizeType.Absolute, 24);
//            AddRow(SizeType.Absolute, 10);

//            AddColumn(SizeType.Absolute, 16);
//            AddColumn(SizeType.Absolute, 120);
//            AddColumn(SizeType.Absolute, 36);

//            Controls.Add(Top2D = new CheckEdit { Dock = DockStyle.Fill, IsRadio = true, RadioGroupIndex = 1 }, 1, 1);
//            Controls.Add(Perspective3D = new CheckEdit { Dock = DockStyle.Fill, IsRadio = true, RadioGroupIndex = 1 }, 1, 2);

//            Localization.Register(this, (e) => Top2D.Text = e("ViewportTop2D.Text"));
//            Localization.Register(this, (e) => Perspective3D.Text = e("ViewportPerspective3D.Text"));

//            Width = (int)ColumnStyles.Cast<ColumnStyle>().Sum(e => e.Width);
//            Height = (int)RowStyles.Cast<RowStyle>().Sum(e => e.Height);

//            Top2D.Checked = Application.ActiveProject.Designer.Transform.AxisIsIdentity;

//            Top2D.CheckedChanged += OnCheckedChanged;
//            Perspective3D.CheckedChanged += OnCheckedChanged;
//        }
//    }
//}
