//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Windows.Forms;
using System.Workspace;

namespace System.Windows.Modules.Controls
{
    [ToolboxItem(false)]
    public class MapLayerDropDownEdit : DropDownEdit
    {
        public MapLayerDropDownEdit()
        {
            ItemHeight = 22;
            NullText = Localization.Localize("MapLayerDropDownEdit.Empty");
        }

        protected override object GetInitObject(ITypeDescriptorContext context)
        {
            return GetWorkspace(context);
        }

        protected override void OnInitialize(ITypeDescriptorContext context)
        {
            if (context.HasValue())
            {
                MapWorkspace workspace = GetWorkspace(context);

                Items.Clear();

                if (workspace.HasValue())
                {
                    workspace.LayerCollectionChanged -= OnLayerCollectionChanged;
                    workspace.LayerCollectionChanged += OnLayerCollectionChanged;

                    if (workspace.HasValue())
                    {
                        foreach (MapLayer layer in workspace.GetLayers())
                        {
                            AddItem(layer);
                        }
                    }
                }
            }
        }

        protected void AddItem(MapLayer layer)
        {
            Items.Add(layer, layer.Name, layer.GetIcon(16));
        }

        protected MapWorkspace GetWorkspace(ITypeDescriptorContext context)
        {
            if (context.HasValue())
            {
                var item = context.Instance as PropertyGridEdit.GridItem;

                if (item.HasValue())
                {
                    var propertyGrid = item.Owner.View.Parent as ApplicationPropertyGridControl;

                    if (propertyGrid.HasValue())
                    {
                        if (propertyGrid.Application.ActiveProject.HasValue())
                        {
                            return propertyGrid.Application.ActiveProject.Workspace;
                        }
                    }
                }
            }

            return default(MapWorkspace);
        }

        protected virtual void OnLayerCollectionChanged(CollectionChangeAction action, MapLayer value)
        {
            switch (action)
            {
                case CollectionChangeAction.Add:
                    AddItem(value);
                    break;
                case CollectionChangeAction.Remove:
                    Items.Remove(value);
                    break;
                case CollectionChangeAction.Refresh:
                    InitObject = null;
                    break;
            }
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                var workspace = InitObject as MapWorkspace;

                if (workspace.HasValue())
                {
                    workspace.LayerCollectionChanged -= OnLayerCollectionChanged;
                    workspace = null;
                }
            }
        }
    }
}
