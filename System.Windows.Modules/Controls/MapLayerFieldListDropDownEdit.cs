////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//using System.ComponentModel;
//using System.Data;
//using System.Data.IO;
//using System.Drawing;
//using System.Drawing.Design;
//using System.Windows.Forms;
//using System.Workspace;

//namespace System.Windows.Modules.Controls
//{
//    [ToolboxItem(false)]
//    public class MapLayerFieldListDropDownEdit : DropDownEdit
//    {
//        protected static MapLayer Current;

//        protected override void OnBeginEdit(Point point, ITypeDescriptorContext context)
//        {
//            Init(context);
//            base.OnBeginEdit(point, context);
//        }

//        public override void PaintValue(PaintValueEventArgs e)
//        {
//            Init(e.Context);
//            base.PaintValue(e);
//        }

//        protected void Init(ITypeDescriptorContext context)
//        {
//            if (context.HasValue())
//            {
//                var item = context.Instance as PropertyGridEdit.GridItem;

//                if (item.HasValue())
//                {
//                    var layer = item.View.SelectedObject as MapLayer;

//                    if (layer.HasValue() && !ReferenceEquals(Current, layer))
//                    {
//                        Current = layer;
//                        Items.Clear();

//                        foreach (SqlClauseField field in layer.Properties)
//                        {
//                            if (field.IsBrowsable)
//                            {
//                                Items.Add(field.Name, field.DisplayName);
//                            }
//                        }

//                        if (!string.IsNullOrEmpty(layer.Styles.Default.LabelStyle.FieldName))
//                        {
//                            EditValue = layer.Styles.Default.LabelStyle.FieldName;
//                        }
//                    }
//                }
//            }
//        }
//    }
//}
