////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//using System.ComponentModel;
//using System.Drawing;
//using System.Linq;
//using System.Resources;
//using System.Windows.Forms;
//using System.Workspace;

//namespace System.Windows.Modules.Controls
//{
//    internal class ProjectView : TreeViewEdit, IProjectView
//    {
//        public ProjectView(IProject project)
//        {
//            Project = project;

//            Indent = 0;
//            AllowDrop = true;

//            AddImage("Layers", Images016.Layers);
//            AddImage("FolderOpen", Images016.FolderOpen);
//            AddImage("FolderClosed", Images016.FolderClosed);

//            AddMapLayerFunc = new Action<ProjectViewCategoryNode, MapLayer>(AddMapLayer);

//            Init();
//        }

//        protected IProject Project;
//        protected Point DragLocation;
//        protected ProjectViewNode DragSource;
//        protected ProjectViewNode DragTarget;
//        protected Action<ProjectViewCategoryNode, MapLayer> AddMapLayerFunc;

//        public IApplication Application
//        {
//            get { return Project.Application; }
//        }

//        public ProjectViewSolutionNode ProjectNode
//        {
//            get;
//            protected set;
//        }

//        protected void Init()
//        {
//            Project.Changed += OnProjectChanged;
//            Project.Workspace.LayerCollectionChanged += OnWorkspaceChanged;
//            Project.Workspace.CategoryCollectionChanged += OnWorkspaceChanged;

//            OnInitializeView();
//        }

//        protected void OnInitializeView()
//        {
//            BeginUpdate();
//            Nodes.Clear();
//            Nodes.Add(ProjectNode = new ProjectViewSolutionNode(this, Project));
//            ProjectNode.Layers.AddCategory(Project.Workspace);
//            ProjectNode.Expand();
//            EndUpdate();
//        }

//        protected virtual void OnWorkspaceChanged(CollectionChangeAction action, MapCategory category)
//        {
//            if (action == CollectionChangeAction.Add)
//            {
//                OnCategoryAdded(category);
//            }
//            else if (action == CollectionChangeAction.Remove)
//            {
//                Nodes.Find(category.Id.ToString(), true).FirstOrDefault().Remove();
//            }
//        }

//        protected virtual void OnWorkspaceChanged(CollectionChangeAction action, MapLayer layer)
//        {
//            if (action == CollectionChangeAction.Add)
//            {
//                OnLayerAdded(layer);
//            }
//            else if (action == CollectionChangeAction.Remove)
//            {
//                ProjectNode.Layers.Remove(layer);
//            }
//            else
//            {
//                if (layer.HasValue())
//                {
//                    ProjectNode.Layers.Remove(layer);
//                    ProjectNode.Layers.Add(layer);
//                }
//                else
//                {
//                    ProjectNode.Layers.Clear();
//                }
//            }
//        }

//        protected virtual ProjectViewCategoryNode OnCategoryAdded(MapCategory category)
//        {
//            ProjectViewCategoryNode n = ProjectNode.FindNode(category);

//            if (n == null)
//            {
//                if (category.Parent.HasValue())
//                {
//                    var parent = ProjectNode.FindNode(category.Parent) as ProjectViewNode ?? ProjectNode;

//                    if (parent.HasValue())
//                    {
//                        this.InvokeAction(() => parent.AddCategory(category));
//                    }
//                }
//                else
//                {
//                    ProjectNode.Layers.Name = category.Id.ToString();
//                    n = ProjectNode.Layers;
//                }
//            }

//            return n;
//        }

//        protected virtual void OnLayerAdded(MapLayer layer)
//        {
//            var n = Nodes.Find(layer.Category.Id.ToString(), true).FirstOrDefault() as ProjectViewCategoryNode ?? OnCategoryAdded(layer.Category);

//            if (n.HasValue())
//            {
//                if (InvokeRequired)
//                {
//                    Invoke(AddMapLayerFunc, n, layer);
//                }
//                else
//                {
//                    n.Add(layer);
//                }
//            }
//        }

//        protected void AddMapLayer(ProjectViewCategoryNode node, MapLayer layer)
//        {
//            node.Add(layer);
//        }

//        protected virtual void OnProjectChanged(ProjectEventArgs e)
//        {
//            this.InvokeAction(() => ProjectNode.Text = e.Project.Name);
//        }

//        public void AddControl(Control c)
//        {
//            if (!Controls.Contains(c))
//            {
//                Controls.Add(c);
//            }
//        }

//        protected override void OnPaint(PaintEventArgs e)
//        {
//            try
//            {
//                base.OnPaint(e);
//            }
//            catch
//            {
//            }
//        }

//        protected override void OnPaintNodeText(DrawTreeNodeEventArgs e, Rectangle bounds)
//        {
//            var projectNode = e.Node as ProjectViewNode;

//            if (projectNode.HasValue())
//            {
//                bounds.Width -= projectNode.PaddingRight;
//            }

//            base.OnPaintNodeText(e, bounds);
//        }

//        protected override void OnItemDrag(ItemDragEventArgs e)
//        {
//            DragSource = e.Item as ProjectViewNode;

//            if (DragSource.HasValue() && DragSource.AllowDrop)
//            {
//                DragSource.OnItemDrag(e);
//            }
//        }

//        protected override void OnDragEnter(DragEventArgs e)
//        {
//            var target = GetNodeAt(PointToClient(Cursor.Position)) as ProjectViewNode;

//            if (target.HasValue())
//            {
//                target.OnDragEnter(e, DragSource);
//            }
//        }

//        protected override void OnDragLeave(EventArgs e)
//        {
//            Refresh();
//            DragLocation = Point.Empty;
//            base.OnDragLeave(e);
//        }

//        protected override void OnDragOver(DragEventArgs e)
//        {
//            Point location = PointToClient(Cursor.Position);

//            if (DragLocation.Y != location.Y)
//            {
//                DragTarget = GetNodeAt(DragLocation = location) as ProjectViewNode;
//                Refresh();

//                if (DragTarget.HasValue() && DragTarget != DragSource)
//                {
//                    DragTarget.OnDragOver(e, DragSource);
//                }
//                else
//                {
//                    e.Effect = DragDropEffects.None;
//                }
//            }
//        }

//        protected override void OnDragDrop(DragEventArgs e)
//        {
//            var target = GetNodeAt(PointToClient(Cursor.Position)) as ProjectViewNode;

//            if (target.HasValue())
//            {
//                target.OnDragDrop(e, DragSource);
//            }

//            DragLocation = Point.Empty;
//            Refresh();
//        }

//        protected override void OnKeyDown(KeyEventArgs e)
//        {
//            if (!Application.Form.CommandManager.PerformCommand(e.KeyCode))
//            {
//                base.OnKeyDown(e);
//            }
//        }

//        public override bool IsDisposing()
//        {
//            return Disposing || Application.IsDisposing();
//        }
//    }
//}