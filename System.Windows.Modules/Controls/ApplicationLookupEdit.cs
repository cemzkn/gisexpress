//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace System.Windows.Modules.Controls
{
    internal class ApplicationLookupEdit : DropDownEdit
    {
        public ApplicationLookupEdit(IProject project, string propertyName)
        {
            Project = project;
            Project.Properties.PropertyValueChanged += OnPropertyValueChanged;
            PropertyName = propertyName;
        }

        protected IProject Project;
        protected string PropertyName;

        protected override void OnBeginEdit(Point point, ITypeDescriptorContext context)
        {
            if (Items.Count == 0)
            {
                IPropertyDescriptor property = Project.Properties.Find(PropertyName, true);

                if (property.HasValue())
                {
                    var items = property.Value as IList;

                    if (items.HasValue())
                    {
                        foreach (object item in items)
                        {
                            var keyedObject = item as IKeyedObject;

                            if (keyedObject.HasValue())
                            {
                                Items.Add(keyedObject.Name, keyedObject.Name);
                            }
                            else
                            {
                                Items.Add(item.ToString());
                            }
                        }
                    }
                }
            }

            base.OnBeginEdit(point, context);
        }

        protected void OnPropertyValueChanged(IPropertyDescriptor property)
        {
            if (property.Name.Equals(PropertyName))
            {
                Items.Clear();
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                Project.Properties.PropertyValueChanged -= OnPropertyValueChanged;
                Project = null;
            }

            base.Dispose(disposing);
        }
    }
}
