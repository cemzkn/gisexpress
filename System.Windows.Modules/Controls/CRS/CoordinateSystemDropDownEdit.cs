//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.CoordinateSystems;
using System.Data;
using System.Windows.Forms;

namespace System.Windows.Modules.Controls
{
    [ToolboxItem(false)]
    public class CoordinateSystemDropDownEdit : DropDownEdit
    {
        public CoordinateSystemDropDownEdit()
        {
            ReadOnly = false;
            NullText = "Type CRS code or name here to search";

            Data = new DataTable();
            Data.Columns.Add("Code", Types.Int32).Caption = "EPSG";
            Data.Columns.Add("Name", Types.String).Caption = Localization.Localize("Name");

            GlyphButtons.Clear();
            OwnerEdit.View.ColumnLayout += OnColumnLayout;
        }

        protected DataTable Data;

        public ICoordinateSystem CoordinateSystem
        {
            get
            {
                var row = base.EditValue as DataRowView;

                if (row.HasValue())
                {
                    //return CoordinateSystemFactory.Create((int)row[0]);
                }

                return default(ICoordinateSystem);
            }
        }

        protected void OnColumnLayout()
        {
            OwnerEdit.Columns[0].SizeType = SizeType.Absolute;
            OwnerEdit.Columns[0].SizeValue = 64;

            OwnerEdit.Columns[1].SizeType = SizeType.Percent;
            OwnerEdit.Columns[1].SizeValue = 100;
        }

        protected override void OnTextChanged(EventArgs e)
        {
            Data.Rows.Clear();

            if (!string.IsNullOrEmpty(Text))
            {
                Data.BeginLoadData();

                foreach (var item in CoordinateSystemFactory.FindByName(Text))
                {
                    Data.Rows.Add(item.Key, item.Value);
                }

                Data.EndLoadData();
                Data.DefaultView.Sort = "Name";
                DataSource = Data.DefaultView;

                ShowPopup();
            }
        }

        protected override string OnDisplayText(object value, IFormatProvider provider)
        {
            var row = value as DataRowView;

            if (row.HasValue())
            {
                return row[1] as string;
            }

            return base.OnDisplayText(value, provider);
        }
    }
}
