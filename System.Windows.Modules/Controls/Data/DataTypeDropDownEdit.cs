//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Data;
using System.Data.DbTypes;
using System.Drawing;
using System.Windows.Forms;

namespace System.Windows.Modules.Controls
{
    [ToolboxItem(false)]
    public class DataTypeDropDownEdit : DropDownEdit
    {
        static DataTypeDropDownEdit()
        {
            var panel = new UserControl { MinimumSize = new Size(300, 240) };
            var panelEdit = new TablePanelEdit { Margin = new Padding(0), Dock = DockStyle.Fill };

            panelEdit.AddColumn(SizeType.Percent, 100);
            panelEdit.AddRow(SizeType.Percent, 100);

            panelEdit.Controls.Add(AdvancedProperties = new PropertyGridEdit { Margin = new Padding(1), BorderStyle = default(Border3DSide), Dock = DockStyle.Fill }, 0, 0);
            panel.Controls.Add(panelEdit);

            AdvancedPropertiesPopup = new PopupContainerEdit();
            AdvancedPropertiesPopup.Control = panel;
        }

        public DataTypeDropDownEdit()
        {
            ShowAdvancedProperties = true;
        }

        protected object AssignedValue;
        protected DataTypeCollection TypeList;
        protected static PopupContainerEdit AdvancedPropertiesPopup;
        protected static PropertyGridEdit AdvancedProperties;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool ShowAdvancedProperties
        {
            get { return GlyphButtons.Contains(GlyphButtonType.Ellipsis); }
            set
            {
                if (value)
                {
                    GlyphButtons.Add(GlyphButtonType.Ellipsis);
                }
                else
                {
                    GlyphButtons.Remove(GlyphButtonType.Ellipsis);
                }
            }
        }

        protected DataTypeCollection DataTypes
        {
            get { return TypeList; }
            set { BindList(value); }
        }

        public override object EditValue
        {
            get { return base.EditValue ?? AssignedValue; }
            set { base.EditValue = (AssignedValue = value); }
        }

        protected override void OnButtonClick(GlyphButton button, EventArgs e)
        {
            if (button.ButtonType == GlyphButtonType.Ellipsis)
            {
                Point screenLocation = Parent.PointToScreen(Point.Empty);
                screenLocation.Offset(0, Parent.Height);
                AdvancedProperties.SelectedObject = EditValue;
                AdvancedPropertiesPopup.ShowPopup(screenLocation);
            }
            else
            {
                base.OnButtonClick(button, e);
            }
        }

        protected override void OnInitialize(ITypeDescriptorContext context)
        {
            var c = context.Instance as ListViewEdit.PropertyColumn;

            if (c.HasValue())
            {
                var listSource = c.View.DataSource as IListSource;

                if (listSource.HasValue())
                {
                    var view = listSource.GetList() as DataView;

                    if (view.HasValue())
                    {
                        BindList(view.Table.ExtendedProperties["DataTypes"] as DataTypeCollection);
                    }
                }
            }
        }

        protected void BindList(DataTypeCollection value)
        {
            if (value.HasValue() && !ReferenceEquals(TypeList, value))
            {
                Items.Clear();
                TypeList = value;

                foreach (DbDataType item in value)
                {
                    Items.Add(item);
                }
            }
        }
    }
}
