//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.DbTypes;
using System.Drawing;
using System.Resources;
using System.Windows.Forms;
using System.Windows.Forms.Ribbon;

namespace System.Windows.Modules.Controls
{
    [ToolboxItem(false)]
    public class DataSourceEdit : PanelEdit, IListSource
    {
        static DataSourceEdit()
        {
            TypeDescriptor.AddAttributes(typeof(DbDataType), new EditorAttribute(typeof(DataTypeDropDownEdit), Types.Control));
        }

        public DataSourceEdit()
        {
            InitializeComponent();
        }

        protected DataTable Data;
        protected GridViewEdit Grid;
        protected SqlTableSource Table;

        protected const int ColumnName = 0;
        protected const int DataType = 1;
        protected const int IsRequired = 2;
        protected const int IsKey = 3;

        public bool ContainsListCollection
        {
            get { return true; }
        }

        public IList GetList()
        {
            if (Data.IsNull())
            {
                Data = CreateDataSource();
            }

            return Data.DefaultView;
        }

        [Browsable(false)]
        public DataTypeCollection DataTypes
        {
            get;
            protected set;
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public SqlTableSource TableSource
        {
            get { return Table; }
            set { UpdateLayout(Table = value); }
        }

        protected void InitializeComponent()
        {
            var ribbon = new RibbonControl
            {
                Height = 36,
                RowCount = 1
            };

            Grid = new GridViewEdit
            {
                Dock = DockStyle.Fill
            };

            Padding = new Padding(6, 0, 6, 6);
            BackColor = ApplicationAppereance.Colors.Control;

            ribbon.AddCommand(GetName("AddRow"), Images016.Add, default(Image), AddNewRow, "0");
            ribbon.AddCommand(GetName("RemoveRow"), Images016.Remove, default(Image), RemoveSelectedRows, "0");

            Grid.View.PaintCell += OnPaintCell;
            Grid.View.ColumnLayout += OnGridViewColumnLayout;

            Controls.Add(ribbon);
            Controls.Add(Grid);

            ribbon.SendToBack();
        }

        protected DataTable CreateDataSource()
        {
            return OnCreateDataSource();
        }

        protected virtual DataTable OnCreateDataSource()
        {
            var data = new DataTable();

            data.PrimaryKey = new DataColumn[]
            {
                data.Columns.Add("ColumnName", Types.String)
            };

            data.Columns.Add("DataType", typeof(DbDataType));
            data.Columns.Add("IsRequired", Types.Boolean);
            data.Columns.Add("IsKey", Types.Boolean);

            return data;
        }

        protected string GetName(string value)
        {
            return string.Concat(GetType().Name, '.', value);
        }

        protected void AddNewRow(object sender, EventArgs e)
        {
            int n = 1;
            string name;
            string prefix = "Column";

            while (Data.Rows.Find(name = string.Concat(prefix, n)).HasValue())
            {
                n++;
            }

            Data.Rows.Add(name, DataTypes.Default, false, false);
            Grid.Redraw();
        }

        protected void RemoveSelectedRows(object sender, EventArgs e)
        {
            Grid.RemoveSelectedRows();
            Grid.Redraw();
        }

        protected void UpdateLayout(SqlTableSource value)
        {
            if (value.HasValue())
            {
                DataTypes = value.Connection.InformationSchema.DataTypes.Clone();

                if (GetList().HasValue())
                {
                    Data.Rows.Clear();
                    Data.DefaultView.Table.ExtendedProperties["DataTypes"] = DataTypes;

                    foreach (SqlClauseField field in TableSource.Fields)
                    {
                        Data.Rows.Add(field.Name, field.DbType, !field.IsNullable, field.IsKey);
                    }

                    Data.AcceptChanges();
                }
            }

            Grid.DataSource = this;
        }

        protected void OnGridViewColumnLayout()
        {
            if (Grid.View.Columns.Count > 0)
            {
                Grid.View.Columns[ColumnName].MinWidth = 160;
                Grid.View.Columns[DataType].MinWidth = 160;
                Grid.View.Columns[IsRequired].MinWidth = 60;
                Grid.View.Columns[IsRequired].MaxWidth = 60;
                Grid.View.Columns[IsRequired].Text = string.Empty;
                Grid.View.Columns[IsRequired].AllowResize = false;
                Grid.View.Columns[IsKey].Visible = false;

                foreach (var c in Grid.View.Columns)
                {
                    c.Text = Localization.Localize(GetName(c.Name));
                }
            }
        }

        protected virtual void OnPaintCell(ListViewEditCellPaintingEventArgs e)
        {
            if (e.Column.Index == 0)
            {
                if ((e.Row.Value as DataRowView)[IsKey].ConvertTo(false))
                {
                    e.Graphics.DrawImage(Images016.Key, e.Bounds.Right - 24, e.Bounds.Top + (e.Bounds.Height - 16) / 2, 16, 16);
                }
            }
        }

        public bool SaveChanges()
        {
            DataTable changes = Data.GetChanges();

            try
            {
                if (changes.HasValue() && changes.Rows.Count > 0)
                {
                    foreach (DataRow row in changes.Rows)
                    {
                        if (row.RowState == DataRowState.Added)
                        {
                            TableSource.Command.Execute(string.Concat("Alter Table ", TableSource, " Add ", row[ColumnName], " ", row[DataType]));
                        }
                    }
                }

                return true;
            }
            catch (Exception e)
            {
                var form = FindForm() as ApplicationForm;

                if (form.HasValue())
                {
                    Point location = form.Footer.Buttons["OK"].PointToScreen(Point.Empty);

                    location.Offset(-24, -60);

                    PopupMessage.Show(location, e.Message, MessageBoxIcon.Error);
                }
                else
                {
                    e.ShowMessage();
                }
            }

            return false;
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                Data.DisposeSafely();
                Data = null;
            }
        }
    }
}
