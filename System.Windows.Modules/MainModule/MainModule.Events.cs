//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Workspace;

namespace System.Windows.Modules
{
    partial class MainModule
    {
        protected IProject ProjectOld;

        void RegisterEvents()
        {
            Form.Closing += OnApplicationClosing;
            Form.DocumentManager.DocumentAdded += OnDocumentLoad;
            Form.DocumentManager.DocumentActivated += OnDocumentActivated;
            Form.DocumentManager.DocumentDeactivated += OnDocumentDeactivated;
            Form.DocumentManager.DocumentClosing += OnDocumentClosing;
            Form.DocumentManager.CollectionChanged += OnDocumentCollectionChanged;
        }

        void RaiseCancel()
        {
            Cancel.InvokeSafely();
        }

        void OnApplicationClosing(object sender, CancelEventArgs e)
        {
            e.Cancel = Projects.CloseAll() == false;
        }

        void OnDocumentLoad(IDocument document)
        {
            if (document.HasValue() && document.Project.HasValue())
            {
                ProjectLoading.InvokeSafely<ProjectEventArgs>(document.Project);
            }
        }

        void OnDocumentActivated(IDocument document)
        {
            if (document.HasValue())
            {
                var e = new ProjectEventArgs(document.HasValue() ? document.Project : null);
                ProjectActivated.InvokeSafely(e);
                OnActiveDocumentChanged(document);
            }
        }

        void OnActiveDocumentChanged(IDocument document)
        {
            var e = new ActiveProjectChangedEventArgs(document.HasValue() ? document.Project : null, ProjectOld);

            if (e.Project.IsNull() || e.Project != e.OldProject)
            {
                ActiveProjectChanged.InvokeSafely(e);
            }
        }

        void OnDocumentDeactivated(IDocument document)
        {
            ProjectOld = null;

            if (document.HasValue() && document.Project.HasValue())
            {
                ProjectDeactivated.InvokeSafely<ProjectEventArgs>(ProjectOld = document.Project);
            }
        }

        void OnDocumentClosing(IDocument document, CancelEventArgs args)
        {
            var e = new ProjectCancelEventArgs(this, document.Project, args);

            ProjectClosing.InvokeSafely(e);

            args.Cancel = e.Cancel;

            if (!args.Cancel)
            {
                using (document.Project)
                {
                    OnDocumentClosed(document);
                }
            }
        }

        void OnDocumentClosed(IDocument document)
        {
            var e = new ProjectEventArgs(document.Project);

            OnProjectClosed(e);
            ProjectClosed.InvokeSafely(e);
        }

        void OnDocumentCollectionChanged(CollectionChangeEventArgs e)
        {
            var document = e.Element as IDocument;

            if (document.HasValue() && !IsDisposing())
            {
                var eventArgs = new ProjectEventArgs(document.Project);

                OnProjectCollectionChanged(eventArgs, e.Action);

                if (e.Action == CollectionChangeAction.Remove && Application.Projects.Count == 0)
                {
                    OnActiveDocumentChanged(null);
                }

                if (document.Project.HasValue())
                {
                    if (e.Action == CollectionChangeAction.Add)
                    {
                        document.Project.Saved += RaiseProjectSaved;
                        document.Project.Changed += RaiseProjectChanged;
                        document.Project.Properties.PropertyValueChanged += property => OnProjectPropertyValueChanged(document.Project, property);
                        document.Project.Workspace.BeginRender += RaiseBeginRender;
                        document.Project.Workspace.BeginLayerRender += RaiseBeginLayerRender;
                        document.Project.Workspace.FeatureRender += RaiseFeatureRender;
                        document.Project.Workspace.LayerCollectionChanged += RaiseLayerCollectionChanged;
                    }

                    ProjectCollectionChanged.InvokeSafely(eventArgs, e.Action);
                }
            }
        }

        void RaiseProjectSaved(ProjectEventArgs e)
        {
            ProjectSaved.InvokeSafely(e);
        }

        void RaiseProjectChanged(ProjectEventArgs e)
        {
            ProjectChanged.InvokeSafely(e);
        }

        void RaiseBeginRender(MapWorkspace workspace)
        {
            BeginRender.InvokeSafely(workspace);
        }

        void RaiseBeginLayerRender(MapWorkspace workspace, MapLayer layer)
        {
            BeginLayerRender.InvokeSafely(workspace, layer);
        }

        void RaiseFeatureRender(FeatureDrawEventArgs e)
        {
            FeatureRender.InvokeSafely(e);
        }

        void RaiseLayerCollectionChanged(CollectionChangeAction action, MapLayer layer)
        {
            LayerCollectionChanged.InvokeSafely(action, layer);
        }

        void RaiseProjectScaleChanged(MapEventArgs e)
        {
            ProjectScaleChanged.InvokeSafely(e);
        }

        void RaiseCursorEnter(object sender, EventArgs e)
        {
            CursorEnter.InvokeSafely(sender, e);
        }

        void RaiseCursorButtonUp(MapEventArgs e)
        {
            CursorButtonUp.InvokeSafely(e);
        }

        void RaiseCursorButtonDown(MapEventArgs e)
        {
            CursorButtonDown.InvokeSafely(e);
        }

        void RaiseCursorLocationChanged(MapEventArgs e)
        {
            CursorLocationChanged.InvokeSafely(e);
        }

        void RaiseActiveComponentChanged(ApplicationComponentEventArgs e)
        {
            ActiveComponentChanged.InvokeSafely(e);
        }
    }
}
