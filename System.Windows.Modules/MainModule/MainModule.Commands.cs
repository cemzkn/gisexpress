//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Windows.Modules.Controls;
using System.Workspace;

namespace System.Windows.Modules
{
    partial class MainModule
    {
        void NewProjectClick(object argument)
        {
            var e = new ProjectEventArgs(Projects.NewProject());
            var map = MapLayerAttribute.Create("BFD93673-890D-4938-A514-BB86A2FE6133", e.Project.Workspace.OwnerDocument);

            if (map.HasValue())
            {
                e.Project.Workspace.Layers.Add(map);
            }

            e.Project.Workspace.AddNewLayer();
            e.Project.Workspace.ZoomToExtent();
            e.Project.View.Refresh(true);
            e.Project.Render();

            ProjectLoad.InvokeSafely(e);
        }

        void FileOpenClick(object argument)
        {
            var e = new ProjectCancelEventArgs(this);

            OnProjectOpening(e);
            ProjectOpening.InvokeSafely(e);

            if (e.Cancel)
            {
                return;
            }

            var fileName = argument as string;

            if (string.IsNullOrEmpty(fileName) == false && File.Exists(fileName))
            {
                OpenProject(Application.Files, default(IApplicationFile), fileName);
            }
            else
            {
                using (var dialog = new FileOpenDialog())
                {
                    dialog.MultiSelect = true;

                    foreach (IApplicationFile file in Application.Files)
                    {
                        if (file.CanRead)
                        {
                            dialog.AddFilter(file.Name, file.Extensions);
                        }
                    }

                    if (dialog.ShowDialog(Form) == DialogResult.OK)
                    {
                        OpenProject(Application.Files, Application.Files.Find(dialog.FileName), dialog.FileName, dialog.Files);
                    }
                }
            }
        }

        void OpenProject(IApplicationFileManager manager, IApplicationFile file, string fileName, params FileInfo[] files)
        {
            IProject project = Application.Projects.FindByFileName(fileName);

            if (project.HasValue())
            {
                project.Activate();
            }
            else
            {
                project = Application.Files.Default.CreateProject(Application);
                project.File = file ?? manager.Find(fileName);

                if (project.File.HasValue())
                {
                    project.File.FileName = fileName;
                    project.File.Files = files;

                    project.File.ReadCompleted += OnFileReadCompleted;
                    project.File.Read(project);

                    if (project.View.HasValue())
                    {
                        project.View.Refresh(false);
                    }
                }
            }
        }

        protected void OnFileReadCompleted(ApplicationFileEventArgs e)
        {
            e.Project.File.ReadCompleted -= OnFileReadCompleted;

            if (e.Cancel || e.Error.HasValue())
            {
                using (ActiveProject)
                {
                    if (e.Error.HasValue())
                    {
                        Application.ShowMessage(e.Error);
                    }

                    ActiveProject.Close();
                }
            }
            else
            {
                e.Project.View.Refresh(false);

                if (e.Project.Workspace.CurrentWindow.IsNull() || e.Project.Workspace.CurrentWindow.IsEmpty())
                {
                    if (e.Project.ZoomToExtent())
                    {
                        e.Project.Render();
                    }
                }
                else
                {
                    if (e.Project.ZoomTo(e.Project.Workspace.CurrentWindow))
                    {
                        e.Project.Render();
                    }
                }

                ProjectLoad.InvokeSafely<ProjectEventArgs>(e.Project, e.Project.File.FileName);
            }
        }

        void ActiveProjectSaveClick(object arg)
        {
            if (ActiveProject.HasValue())
            {
                ActiveProject.Save();
            }
        }

        void ActiveProjectSaveAsClick(object arg)
        {
            if (ActiveProject.HasValue())
            {
                ActiveProject.SaveAs();
            }
        }

        void ProjectsSaveAllClick(object arg)
        {
            Projects.SaveAll();
        }

        void ActiveProjectCloseClick(object arg)
        {
            if (ActiveProject.HasValue())
            {
                ActiveProject.Close();
            }
        }

        void ApplicationExitClick(object arg)
        {
            Application.Form.Dispose();
        }

        void ZoneButtonClick()
        {
        }

        void Undo(object argument)
        {
            if (ActiveProject.TransactionLog.Undo())
            {
                ActiveProject.Designer.CancelEdit();
                ActiveProject.Render();
                OnProjectChanged(null);
            }
        }

        void Redo(object argument)
        {
            if (ActiveProject.TransactionLog.Redo())
            {
                ActiveProject.Designer.CancelEdit();
                ActiveProject.Render();
                OnProjectChanged(null);
            }
        }

        void ZoomToExtent(object argument)
        {
            if (ActiveProject.HasValue())
            {
                if (ActiveProject.ZoomToExtent())
                {
                    ActiveProject.Render();
                }
            }
        }

        void BeginZoomTo(object argument)
        {
            if (ActiveProject.HasValue())
            {
                ActiveProject.Designer.Cancel += EndZoomTo;
                ActiveProject.Designer.SelectRectangle += OnZoomTo;
                ActiveProject.Designer.Flush();

                Application.Form.CommandManager["Drawing.ZoomTo"].Enabled = false;
            }
        }

        void EndZoomTo()
        {
            ActiveProject.Designer.Cancel -= EndZoomTo;
            ActiveProject.Designer.SelectRectangle -= OnZoomTo;
            Application.Form.CommandManager["Drawing.ZoomTo"].Enabled = true;
        }

        void OnZoomTo(RectangleF rect)
        {
            EndZoomTo();

            if (ActiveProject.ZoomTo(rect))
            {
                ActiveProject.Render();
            }
        }

        void ZoomIn(object argument)
        {
            if (ActiveProject.HasValue())
            {
                if (ActiveProject.Zoom(100 - Application.Settings.Options.ZoomFactor))
                {
                    ActiveProject.Render();
                }
            }
        }

        void ZoomOut(object argument)
        {
            if (ActiveProject.HasValue())
            {
                if (ActiveProject.Zoom(100 + Application.Settings.Options.ZoomFactor))
                {
                    ActiveProject.Render();
                }
            }
        }

        void ApplicationSettingsClick(object argument)
        {
            using (var dialog = new ApplicationSettingsDialog())
            {
                dialog.StartPosition = FormStartPosition.CenterParent;
                dialog.SetDataSource(Application);
                dialog.ShowDialog(Form);
            }
        }

        void SnapSettingsButtonClick(object sender, EventArgs e)
        {
            ShowDropDownEdit<ObjectSnapSettingsEdit>(sender);
        }

        void AligmentGuidesSettingsClick(object sender, EventArgs e)
        {
            ShowDropDownEdit<AligmentGuidesSettingsEdit>(sender);
        }

        //void ViewportSettingsClick(object sender, EventArgs e)
        //{
        //    ShowDropDownEdit<ViewportEdit>(sender);
        //}

        void ShowDropDownEdit<TEdit>(object sender) where TEdit : Control
        {
            var type = typeof(TEdit);
            var button = sender as IApplicationControl;
            var dropDown = default(PopupContainerEdit);

            if (!DropDowns.TryGetValue(type, out dropDown))
            {
                dropDown = new PopupContainerEdit
                {
                    Control = Activator.CreateInstance(type, Application) as Control
                };

                DropDowns.Add(type, dropDown);

                dropDown.Popup.DropShadowEnabled = false;
                dropDown.Popup.Closed += (sender2, e) => Application.Settings.Save();
            }

            if (dropDown.IsClosed)
            {
                dropDown.ShowPopup(button.ScreenBounds.Location.X + 1, button.ScreenBounds.Location.Y - dropDown.Control.Height - 8);
            }
        }
    }
}
