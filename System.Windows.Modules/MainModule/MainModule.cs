//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Geometries;
using System.Resources;
using System.Runtime;
using System.Windows.Forms;
using System.Windows.Forms.Ribbon;
using System.Windows.Modules.Controls;
using System.Windows.Modules.IO;
using System.Workspace;

namespace System.Windows.Modules
{
    internal partial class MainModule : ApplicationModule, IApplication
    {
        public MainModule(IApplicationMainForm mainForm)
            : base(default(IApplication))
        {
            Form = mainForm;
        }

        public event Action Cancel;
        public event ApplicationLoadEventHandler Load;
        public event ApplicationLoadEventHandler Initializing;

        public event ProjectEventHandler ProjectLoading;
        public event ProjectEventHandler ProjectLoad;
        public event ProjectEventHandler ProjectActivated;
        public event ProjectEventHandler ProjectDeactivated;
        public event ProjectCancelEventHandler ProjectOpening;
        public event ProjectEventHandler ProjectChanged;
        public event ProjectEventHandler ProjectSaved;
        public event ProjectCancelEventHandler ProjectClosing;
        public event ProjectEventHandler ProjectClosed;
        public event ActiveProjectChangedEventHandler ActiveProjectChanged;
        public event ProjectChangeEventHandler ProjectCollectionChanged;

        public event ApplicationComponentEventHandler ActiveComponentChanged;
        //public event Action<CollectionChangeAction, MapCategory> CategoryCollectionChanged;
        public event Action<CollectionChangeAction, MapLayer> LayerCollectionChanged;
        public event Func<CollectionChangeAction, IFeature, bool> FeatureCollectionChanging;
        public event Action<CollectionChangeAction, IFeature> FeatureCollectionChanged;

        public event EventHandler CursorEnter;
        public event MapEventHandler CursorButtonUp;
        public event MapEventHandler CursorButtonDown;
        public event MapEventHandler CursorLocationChanged;
        public event MapEventHandler ProjectScaleChanged;

        public event Action<MapWorkspace> BeginRender;
        public event Action<MapWorkspace, MapLayer> BeginLayerRender;
        public event FeatureDrawEventHandler FeatureRender;

        protected Dictionary<Type, PopupContainerEdit> DropDowns;

        const string CategoryAppearance = "Appearance";
        const string CategoryGeneral = "General";
        const string CategoryLinear = "Linear";
        const string CategoryAngular = "Angular";
        const string CategoryTopology = "Topology";

        public bool IsDisposing()
        {
            return Form.IsDisposing();
        }

        public IApplicationMainForm Form
        {
            get;
            private set;
        }

        public ApplicationConfiguration Settings
        {
            get { return ApplicationConfiguration.Current; }
        }

        public IApplicationModuleManager Modules
        {
            get;
            private set;
        }

        public new IProject ActiveProject
        {
            get { return Projects.ActiveProject; }
        }

        public IApplicationFileManager Files
        {
            get { return ApplicationFileManager.Current; }
        }

        public IApplicationProjectManager Projects
        {
            get;
            private set;
        }

        public const string CommandUndo = "Undo";
        public const string CommandRedo = "Redo";
        public const string CommandNewProject = "NewProject";
        public const string CommandOpenProject = "OpenProject";
        public const string CommandSaveProject = "SaveProject";
        public const string CommandSaveProjectAs = "SaveProjectAs";
        public const string CommandSaveProjectAll = "SaveProjectAll";
        public const string CommandCloseProject = "CloseProject";

        public const string CommandZoomToExtent = "Drawing.ZoomToExtent";
        public const string CommandZoomIn = "Drawing.ZoomIn";
        public const string CommandZoomOut = "Drawing.ZoomOut";
        public const string CommandZoomTo = "Drawing.ZoomTo";

        public const string CommandApplicationSettings = "ApplicationSettings";
        public const string CommandApplicationExit = "ApplicationExit";

        public const string CommandSelectFeature = "Selection.SelectFeature";
        public const string CommandSelectFeatures = "Selection.SelectFeatures";

        public const string CommandSelectionPage = "SelectionSet";
        public const string CommandSelectionSelectAll = "SelectionSet.Select.SelectAll";
        public const string CommandSelectionDeselectAll = "SelectionSet.Select.DeselectAll";

        public const string CommandSelectionCopy = "SelectionSet.Select.Copy";
        public const string CommandSelectionDelete = "SelectionSet.Select.Delete";
        public const string CommandSelectionCancel = "SelectionSet.Select.Cancel";

        public const string CommandSelectionReverseSelection = "SelectionSet.Select.ReverseSelection";
        public const string CommandSelectionSelectByRect = "SelectionSet.Select.SelectByRect";
        public const string CommandSelectionSelectByArea = "SelectionSet.Select.SelectByArea";
        public const string CommandSelectionIntersection = "SelectionSet.Operations.Intersection";
        public const string CommandSelectionUnion = "SelectionSet.Operations.Union";
        public const string CommandSelectionDifference = "SelectionSet.Operations.Difference";
        public const string CommandSelectionSplit = "SelectionSet.Operations.SplitGeometries";
        public const string CommandSelectionLinesToPolygon = "SelectionSet.Operations.LinesToPolygon";

        public void InitGraphics()
        {
            Form.Init();
            Form.DockManager.PropertiesPanel.Control = new ApplicationPropertyGridControl(this);

            Localization.Register(e => Form.DockManager.ProjectPanel.Text = e("Project"));
            Localization.Register(e => Form.DockManager.PropertiesPanel.Text = e("Properties"));

            Form.CommandManager.CreateCommand(CommandNewProject, RibbonCommandVisibility.ApplicationMenu | RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.N, Images016.AddFile, Images032.AddFile, NewProjectClick);
            Form.CommandManager.CreateCommand(CommandOpenProject, RibbonCommandVisibility.ApplicationMenu | RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.O, Images016.OpenFile, Images032.OpenFile, FileOpenClick);
            Form.CommandManager.CreateCommand(CommandSaveProject, RibbonCommandVisibility.ApplicationMenu | RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.S, Images016.Save, Images032.Save, ActiveProjectSaveClick, false, true);
            Form.CommandManager.CreateCommand(CommandSaveProjectAs, RibbonCommandVisibility.ApplicationMenu, null, Images032.SaveAs, ActiveProjectSaveAsClick, false);
            Form.CommandManager.CreateCommand(CommandSaveProjectAll, RibbonCommandVisibility.ApplicationMenu | RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.Shift | Keys.S, Images016.SaveAll, Images032.SaveAll, ProjectsSaveAllClick, false);
            Form.CommandManager.CreateCommand(CommandCloseProject, RibbonCommandVisibility.ApplicationMenu | RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.F4, Images016.CancelFile, Images032.CancelFile, ActiveProjectCloseClick, false, true);
            Form.CommandManager.CreateCommand(CommandUndo, RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.Z, Images016.Undo, null, Undo, false, true);
            Form.CommandManager.CreateCommand(CommandRedo, RibbonCommandVisibility.QuickToolbar, Keys.Control | Keys.Y, Images016.Redo, null, Redo, false);

            Form.CommandManager.CreateCommand(CommandApplicationSettings, RibbonCommandVisibility.ApplicationMenu, null, Images032.Settings, ApplicationSettingsClick, true, true);
            Form.CommandManager.CreateCommand(CommandApplicationExit, RibbonCommandVisibility.ApplicationMenu, null, Images032.Exit, ApplicationExitClick, true, true);

            Form.CommandManager.CreateCommand(CommandZoomToExtent, RibbonCommandVisibility.Toolbar | RibbonCommandVisibility.QuickToolbar, Keys.Multiply, Images016.Expand, Images032.Expand, ZoomToExtent, false, false);
            //Form.CommandManager.CreateCommand(CommandZoomIn, RibbonCommandVisibility.Toolbar, Keys.Add, Images016.ZoomIn, null, ZoomIn, false);
            //Form.CommandManager.CreateCommand(CommandZoomOut, RibbonCommandVisibility.Toolbar, Keys.Subtract, Images016.ZoomOut, null, ZoomOut, false);
            //Form.CommandManager.CreateCommand(CommandZoomTo, RibbonCommandVisibility.Toolbar, Keys.W, Images016.ZoomWindow, null, BeginZoomTo, false);

            Form.CommandManager.CreateCommand(CommandSelectFeature, RibbonCommandVisibility.Toolbar, Keys.Space, null, Images032.Select, BeginSelectFeature, false, true);
            Form.CommandManager.CreateCommand(CommandSelectFeatures, RibbonCommandVisibility.Toolbar, Keys.S, null, Images032.MultiSelect, BeginSelectFeatures, false);

            Form.CommandManager.CreateCommand(CommandSelectionSelectAll, RibbonCommandVisibility.Toolbar, Keys.Control | Keys.A, Images016.SelectAll, null, SelectionSelectAll, false, false);
            Form.CommandManager.CreateCommand(CommandSelectionDeselectAll, RibbonCommandVisibility.Toolbar, Images016.DeselectAll, null, SelectionDeselectAll, false);
            Form.CommandManager.CreateCommand(CommandSelectionReverseSelection, RibbonCommandVisibility.Toolbar, Images016.ReverseSelection, null, SelectionReverseSelection, false);

            Form.CommandManager.CreateCommand(CommandSelectionCopy, RibbonCommandVisibility.Toolbar, Keys.Control | Keys.C, Images016.Copy, null, SelectionCopy, false, true).IsCheckButton = true;
            Form.CommandManager.CreateCommand(CommandSelectionDelete, RibbonCommandVisibility.Toolbar, Keys.Delete, Images016.Delete, null, SelectionDelete, false);
            Form.CommandManager.CreateCommand(CommandSelectionCancel, RibbonCommandVisibility.Toolbar, Keys.Escape, Images016.Cancel, null, SelectionCancel, false);

            Form.CommandManager.CreateCommand(CommandSelectionSelectByRect, RibbonCommandVisibility.Toolbar, null, Images032.SelectRect, SelectionSelectByRect, false, true);
            Form.CommandManager.CreateCommand(CommandSelectionSelectByArea, RibbonCommandVisibility.Toolbar, null, Images032.SelectArea, SelectionSelectByArea, false);
            Form.CommandManager.CreateCommand(CommandSelectionIntersection, RibbonCommandVisibility.Toolbar, null, Images032.Intersection, SelectionIntersection, false, true);
            Form.CommandManager.CreateCommand(CommandSelectionUnion, RibbonCommandVisibility.Toolbar, null, Images032.Union, SelectionUnion, false);
            Form.CommandManager.CreateCommand(CommandSelectionDifference, RibbonCommandVisibility.Toolbar, null, Images032.Difference, SelectionDifference, false);
            Form.CommandManager.CreateCommand(CommandSelectionSplit, RibbonCommandVisibility.Toolbar, null, Images032.Split, SelectionSplit, false, true);
            Form.CommandManager.CreateCommand(CommandSelectionLinesToPolygon, RibbonCommandVisibility.Toolbar, null, Images032.LinesToPolygon, SelectionLinesToPolygon, false);

            Form.CommandManager[CommandSelectionCopy].CheckedChanged += OnCopyModeChanged;
            Form.CommandManager.Pages[CommandSelectionPage].Caption.Hide();

            Form.StatusManager.AddButton("AligmentGuidesSettings", Images016.GuideLine, AligmentGuidesSettingsClick).Enabled = false;
            Form.StatusManager.AddButton("ObjectSnapSettings", Images016.DefineLocation, SnapSettingsButtonClick).Enabled = false;
            //Form.StatusManager.AddButton("ViewportSettings", Images016.TopView, ViewportSettingsClick).Enabled = false;
            Form.StatusManager.AddSeperator();
            Form.StatusManager.AddLabel("Scale", ContentAlignment.MiddleCenter);
            Form.StatusManager.AddLabel("Value.Scale", ContentAlignment.MiddleRight).Width = 90;
        }

        public void Init()
        {
            var e = new ApplicationLoadEventArgs(this);

            Projects = new ApplicationProjectManager(this);
            Modules = new ApplicationModuleManager(this);
            DropDowns = new Dictionary<Type, PopupContainerEdit>();

            GeometryFactory.Register();
            TypeFactory.Default.Register<IOperandFactory, OperandFactory>();

            Modules.RegisterAll();
            Load.InvokeSafely(e);
            RegisterEvents();
        }

        public void InitModulesGraphics()
        {
            Form.DocumentManager.AddDocument(new ApplicationStartPage(this));
            Initializing.InvokeSafely<ApplicationLoadEventArgs>(this);
            Form.DockManager.ProjectPanel.Activate();
        }

        protected override void OnCancel()
        {
            UpdateSelectionCommands(ActiveProject);
        }

        protected void OnCopyModeChanged(bool value)
        {
            CopyModeChecked = value;
        }

        protected override void OnProjectLoading(ProjectEventArgs e)
        {
            if (e.Project.HasValue())
            {
                e.Project.Properties.Add("NumberDecimalDigits", 3, CategoryGeneral);

                e.Project.Properties.Add("LinearUnit", LinearUnits.Meter, CategoryLinear);
                e.Project.Properties.Add("LinearDisplayUnit", LinearUnits.Meter, CategoryLinear);
                e.Project.Properties.Add("LinearDecimalDigits", 3, CategoryLinear);

                e.Project.Properties.Add("AngularDisplayUnit", AngularUnits.Degree, CategoryAngular);
                e.Project.Properties.Add("AngularDecimalDigits", 3, CategoryAngular);

                e.Project.Properties.Add("MeasuringSystems", MeasuringSystems.NorthAzimuth, CategoryTopology);
                e.Project.Properties.Add("NorthAngle", 0.0, CategoryTopology).Editor = new AngularValueEdit(e.Project.UnitConverter.GetUnitSymbol(e.Project.UnitConverter.AngularDisplayUnit, UnitTypes.Angular));
                e.Project.Properties.Add("BufferAngle", 15.0, CategoryTopology).Editor = new AngularValueEdit(e.Project.UnitConverter.GetUnitSymbol(e.Project.UnitConverter.AngularDisplayUnit, UnitTypes.Angular));
            }
        }

        protected override void OnProjectLoad(ProjectEventArgs e)
        {
            if (e.Project.HasValue())
            {
                if (!string.IsNullOrEmpty(e.FileName))
                {
                    Settings.RecentList.Add(e.FileName);
                    Settings.Save();
                }

                if (Form.DockManager.PropertiesPanel.HasValue() && Form.DockManager.PropertiesPanel.Control.HasValue())
                {
                    Form.DockManager.PropertiesPanel.Control.SelectedObject = e.Project.Properties;
                }

                OnProjectChanged(e);
            }
        }

        protected override void OnProjectChanged(ProjectEventArgs e)
        {
            var project = e.HasValue() ? e.Project : ActiveProject;
            var isValid = project.HasValue() && project.Properties.HasValue();

            if (isValid)
            {
                //e.Project.Factory.NorthAngle = project.Properties.GetValue("NorthAngle", 0.0);
                //e.Project.Factory.MeasuringSystem = project.Properties.GetValue("MeasuringSystems", MeasuringSystems.NorthAzimuth);

                Localization.SetDecimalDigits(project.Properties.GetValue("AngularDecimalDigits", 3), project.Properties.GetValue("LinearDecimalDigits", 3), project.Properties.GetValue("NumberDecimalDigits", 3));

                (Form as Control).InvokeAction(() => Form.DocumentManager.Find(project).Text = project.Name);
            }

            Form.CommandManager[CommandUndo].Enabled = isValid && project.TransactionLog.HasValue() && project.TransactionLog.CanUndo();
            Form.CommandManager[CommandRedo].Enabled = isValid && project.TransactionLog.HasValue() && project.TransactionLog.CanRedo();
        }

        protected override void OnProjectSaved(ProjectEventArgs e)
        {
            OnProjectChanged(e);

            if (e.Project.File.HasValue())
            {
                Settings.RecentList.Add(e.Project.File.FileName);
                Settings.Save();
            }
        }

        protected override void OnProjectPropertyValueChanged(IProject project, IPropertyDescriptor property)
        {
            if (project.HasValue() && property.HasValue())
            {
                switch (property.Name)
                {
                    case "LinearUnit":
                        project.UnitConverter.LinearUnit = project.UnitConverter.GetUnitName((LinearUnits)property.Value);
                        break;
                    case "LinearDisplayUnit":
                        project.UnitConverter.LinearDisplayUnit = project.UnitConverter.GetUnitName((LinearUnits)property.Value);
                        break;
                    case "AngularDisplayUnit":
                        project.UnitConverter.AngularDisplayUnit = project.UnitConverter.GetUnitName((AngularUnits)property.Value);
                        break;
                    case "AngularDecimalDigits":
                        Localization.SetAngularDecimalDigits((int)(property.Value ?? 3));
                        property.Value = Localization.Language.AngularFormat.NumberDecimalDigits;
                        break;
                    case "LinearDecimalDigits":
                        Localization.SetLinearDecimalDigits((int)(property.Value ?? 3));
                        property.Value = Localization.Language.LinearFormat.NumberDecimalDigits;
                        break;
                    case "NumberDecimalDigits":
                        Localization.SetNumberDecimalDigits((int)(property.Value ?? 3));
                        property.Value = Localization.Language.NumberFormat.NumberDecimalDigits;
                        break;
                    case "MeasuringSystems":
                        project.Factory.MeasuringSystem = (MeasuringSystems)property.Value;
                        break;
                    case "NorthAngle":
                        project.Factory.NorthAngle = (double)property.Value;
                        break;
                }

                project.SetModified();
                ProjectChanged.InvokeSafely<ProjectEventArgs>(project);
            }
        }

        protected override void OnActiveProjectChanged(ActiveProjectChangedEventArgs e)
        {
            Form.DockManager.ProjectPanel.Activate();

            if (Form.DockManager.PropertiesPanel.Control.HasValue())
            {
                Form.DockManager.PropertiesPanel.Control.Clear();
            }

            if (e.OldProject.HasValue())
            {
                e.OldProject.Cancel -= RaiseCancel;
                e.OldProject.ScaleChanged -= RaiseProjectScaleChanged;
                e.OldProject.CursorEnter -= RaiseCursorEnter;
                e.OldProject.CursorButtonUp -= RaiseCursorButtonUp;
                e.OldProject.CursorButtonDown -= RaiseCursorButtonDown;
                e.OldProject.CursorLocationChanged -= RaiseCursorLocationChanged;
                e.OldProject.ActiveComponentChanged -= RaiseActiveComponentChanged;
            }

            if (e.Project.HasValue())
            {
                e.Project.Cancel += RaiseCancel;
                e.Project.ScaleChanged += RaiseProjectScaleChanged;
                e.Project.CursorEnter += RaiseCursorEnter;
                e.Project.CursorButtonUp += RaiseCursorButtonUp;
                e.Project.CursorButtonDown += RaiseCursorButtonDown;
                e.Project.CursorLocationChanged += RaiseCursorLocationChanged;
                e.Project.ActiveComponentChanged += RaiseActiveComponentChanged;
                e.Project.View.SelectedObject = e.Project.Workspace.Properties;

                if (Form.DockManager.PropertiesPanel.Control.HasValue())
                {
                    Form.DockManager.PropertiesPanel.Control.SelectedObject = e.Project.Properties;
                }

                if (e.Project.Designer.HasValue())
                {
                    OnProjectScaleChanged((MapEventArgs)e.Project.Designer.Map);
                }
            }

            Form.CommandManager[CommandSaveProject].Enabled =
            Form.CommandManager[CommandSaveProjectAs].Enabled =
            Form.CommandManager[CommandSaveProjectAll].Enabled =
            Form.CommandManager[CommandCloseProject].Enabled =
            Form.CommandManager[CommandZoomToExtent].Enabled =
            //Form.CommandManager[CommandZoomIn].Enabled =
            //Form.CommandManager[CommandZoomOut].Enabled =
            //Form.CommandManager[CommandZoomTo].Enabled =
            Form.CommandManager[CommandSelectFeature].Enabled =
            Form.CommandManager[CommandSelectFeatures].Enabled = e.Project.HasValue();

            if (Form.StatusManager.HasValue())
            {
                Form.StatusManager["ObjectSnapSettings"].Enabled =
                Form.StatusManager["AligmentGuidesSettings"].Enabled =
                //Form.StatusManager["ViewportSettings"].Enabled =
                Form.StatusManager["Scale"].Enabled =
                Form.StatusManager["Value.Scale"].Enabled = e.Project.HasValue();

                if (e.Project.IsNull())
                {
                    Form.StatusManager["Value.Scale"].Text = "-";
                }

                Form.StatusManager["ObjectSnapSettings"].Checked = Settings.Snap.Enabled;
            }

            if (Form.DockManager.ProjectPanel.HasValue())
            {
                Form.DockManager.ProjectPanel.Control = e.Project.HasValue() ? e.Project.View : null;
            }

            OnProjectChanged(e);
        }

        protected override void OnProjectClosing(ProjectCancelEventArgs e)
        {
            if (e.Project.HasValue() && e.Project.IsModified)
            {
                switch (ShowMessage(Localization.Localize("ProjectUnsavedChangesMessage").FormatInvariant(e.Project.Name), MessageBoxIcon.Warning, MessageBoxButtons.YesNoCancel))
                {
                    case DialogResult.Yes:
                        e.Cancel = !e.Project.Save();
                        break;
                    case DialogResult.Cancel:
                        e.Cancel = true;
                        break;
                }
            }
        }

        protected override void OnProjectClosed(ProjectEventArgs e)
        {
            if (e.Project.HasValue())
            {
                Form.DockManager.ProjectPanel.Activate();
                Form.CommandManager.Pages[CommandSelectionPage].Caption.Hide();

                if (Form.DockManager.PropertiesPanel.Control.HasValue())
                {
                    Form.DockManager.PropertiesPanel.Control.Clear();
                }
            }

            base.OnProjectClosed(e);
        }

        protected override void OnCursorLocationChanged(MapEventArgs e)
        {
            OnUpdateProperties(e);
        }

        protected override void OnProjectScaleChanged(MapEventArgs e)
        {
            if (Form.StatusManager.HasValue() && Form.StatusManager["Value.Scale"].HasValue())
            {
                Form.StatusManager["Value.Scale"].Text = e.Scale.ToString("N", Localization.Language.NumberFormat);
            }
        }

        protected virtual void OnUpdateProperties(MapEventArgs e)
        {
            if (Form.DockManager.PropertiesPanel.HasValue() && Form.DockManager.PropertiesPanel.IsActive)
            {
                Form.DockManager.PropertiesPanel.Control.Refresh(false);
            }
        }

        protected override void OnActiveComponentChanged(ApplicationComponentEventArgs e)
        {
            if (Form.DockManager.PropertiesPanel.HasValue())
            {
                if (e.Component.HasValue() && e.Component.AllowProperties)
                {
                    e.Component.EditCompleted += OnComponentEditCompleted;

                    if (!e.Handled)
                    {
                        IPropertyGrid propertyGrid = Form.DockManager.PropertiesPanel.Control;

                        if (propertyGrid.HasValue() && propertyGrid.SelectedObject != e.Component)
                        {
                            propertyGrid.SelectedObject = e.Component;

                            if (!propertyGrid.IsEmpty() && !e.Component.IsEmpty())
                            {
                                Form.DockManager.PropertiesPanel.Activate();
                            }
                        }
                    }
                }
                else if (Form.DockManager.PropertiesPanel.IsActive)
                {
                    Form.DockManager.PropertiesPanel.Control.SelectedObject = ActiveProject.Properties;
                    Form.DockManager.ProjectPanel.Activate();
                }
            }

            UpdateSelectionCommands(ActiveProject);
        }

        void OnComponentEditCompleted(ApplicationComponentEditCompletedEventArgs e)
        {
            if (ActiveProject.IsModified)
            {
                ActiveProject.SetModified();
            }

            e.Component.EditCompleted -= OnComponentEditCompleted;
        }

        public void ShowProperties()
        {
            Form.DockManager.PropertiesPanel.Control.SelectedObject = ActiveProject.Properties;
            Form.DockManager.PropertiesPanel.Activate();
        }

        public void ShowProperties(object obj)
        {
            Form.DockManager.PropertiesPanel.Control.SelectedObject = obj;
            Form.DockManager.PropertiesPanel.Activate();
        }

        public DialogResult ShowMessage(Exception e)
        {
            return e.ShowMessage(Form);
        }

        public DialogResult ShowMessage(string message)
        {
            return ShowMessage(message, MessageBoxIcon.Error, MessageBoxButtons.OK);
        }

        public DialogResult ShowMessage(string message, MessageBoxIcon icon)
        {
            return ShowMessage(message, icon, MessageBoxButtons.OK);
        }

        public DialogResult ShowMessage(string message, MessageBoxIcon icon, MessageBoxButtons buttons)
        {
            return new ApplicationException(message).ShowMessage(Form, message, icon, buttons);
        }

        public object this[string name]
        {
            get
            {
                switch (name)
                {
                    case "Modules":
                    case "Products":
                        return Modules;
                        //case "DataProviders":
                        //    return DataProviders.Current;
                }

                return default(object);
            }
        }
    }
}
