//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace System.Windows.Modules.IO
{
    class ApplicationFileManager : KeyedCollection<string, IApplicationFile>, IApplicationFileManager
    {
        static ApplicationFileManager()
        {
            Current = new ApplicationFileManager();

            foreach (var item in typeof(ApplicationFileManager).Assembly.FindAttributes<ApplicationFileAttribute>("System.Data.*.dll", "Data Access Provider"))
            {
                var file = Activator.CreateInstance(item.GetType()) as IApplicationFile;

                if (file.HasValue() && file.Available)
                {
                    foreach (string e in file.Extensions)
                    {
                        FileSystemItem.SmallImages.Add(e, file.GetIcon(e, 16));
                    }

                    if (item.IsDefault)
                    {
                        Current.Default = file;
                    }

                    Current.Add(file);
                }
            }
        }

        ApplicationFileManager()
        {
        }

        public ApplicationFileManager(IEqualityComparer<string> comparer) : base(comparer)
        {
        }

        public static readonly IApplicationFileManager Current;

        public IApplicationFile Default
        {
            get;
            set;
        }

        IApplicationFile IApplicationFileManager.this[string extension]
        {
            get
            {
                IApplicationFile value;

                if (TryGetValue(extension, out value))
                {
                    return value;
                }

                return Default;
            }
        }

        public IApplicationFile Find(string fileName)
        {
            IApplicationFile value;

            if (TryGetValue(fileName, out value))
            {
                return value;
            }

            return default(IApplicationFile);
        }

        public bool TryGetValue(string fileName, out IApplicationFile file)
        {
            return (file = Items.FirstOrDefault(item => item.Extensions.Any(e => e.EqualsIgnoreCase(Path.GetExtension(fileName))))).HasValue();
        }

        protected override string GetKeyForItem(IApplicationFile item)
        {
            return item.Name;
        }
    }
}
