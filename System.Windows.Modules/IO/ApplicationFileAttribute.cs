//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using System.Workspace;
using System.Xml;

namespace System.Windows.Modules
{
    [AttributeUsage(AttributeTargets.Assembly)]
    public abstract class ApplicationFileAttribute : Attribute, IApplicationFile
    {
        protected ApplicationFileAttribute()
        {
            Extensions = new FileExtensionCollection();
        }

        public event Action<ApplicationFileEventArgs> ReadCompleted;

        public abstract string Name
        {
            get;
        }

        public abstract bool IsDefault
        {
            get;
        }

        public string FileName
        {
            get;
            set;
        }

        public FileInfo[] Files
        {
            get;
            set;
        }

        public virtual bool Available
        {
            get { return Extensions.Count > 0; }
        }

        public virtual bool CanSave
        {
            get { return false; }
        }

        public virtual bool CanRead
        {
            get { return true; }
        }

        public virtual bool CanWrite
        {
            get { return false; }
        }

        public virtual bool AllowSelectLayers
        {
            get { return false; }
        }

        public abstract IProject CreateProject(IApplication application);

        public abstract MapWorkspace CreateWorkspace(IProject project);

        public abstract MapLayer CreateLayer(IProject project);

        public virtual Image GetIcon(string extension, int maxWidth)
        {
            return default(Image);
        }

        public FileExtensionCollection Extensions
        {
            get;
            protected set;
        }

        public void Read(IProject project)
        {
            if (Available)
            {
                var worker = new BackgroundWorker();
                var argument = new ApplicationFileEventArgs(project, this, FileName, Files);

                if (AllowSelectLayers)
                {
                    OnBeginRead(argument);
                }

                worker.DoWork += OnRead;
                worker.RunWorkerCompleted += OnReadCompleted;
                worker.RunWorkerAsync(argument);

                ControlHelper.ShowProgressBar(project.Application.Form, Localization.Localize("Loading"));
            }
        }

        protected void OnRead(object sender, DoWorkEventArgs e)
        {
            var args = e.Argument as ApplicationFileEventArgs;

            try
            {
                if (AllowSelectLayers == false)
                {
                    OnBeginRead(args);
                }

                if (args.Cancel == false)
                {
                    OnRead(args);
                }
            }
            catch (Exception error)
            {
                args.Error = error;
            }
            finally
            {
                e.Result = args;
            }
        }

        protected void OnReadCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            ControlHelper.HideProgressBar();

            using (sender as BackgroundWorker)
            {
                OnReadCompleted(e.Result as ApplicationFileEventArgs);
            }
        }

        public void Read(IProjectFileInfo info, string fileName)
        {
            OnRead(info, fileName);
        }

        public void Write(IProject project)
        {
            if (Available)
            {
                var worker = new BackgroundWorker();
                var e = new ApplicationFileEventArgs(project, this, FileName, Files);

                worker.DoWork += OnWrite;
                worker.RunWorkerCompleted += OnWriteCompleted;
                worker.RunWorkerAsync(e);

                ControlHelper.ShowProgressBar(project.Application.Form, Localization.Localize("Saving"));
            }
        }

        protected void OnWrite(object sender, DoWorkEventArgs e)
        {
            OnWrite(e.Argument as ApplicationFileEventArgs);
        }

        protected void OnWriteCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            using (sender as BackgroundWorker)
            {
                ControlHelper.HideProgressBar();
            }
        }

        protected virtual void OnBeginRead(ApplicationFileEventArgs e)
        {
            e.Project.BeginInit();
        }

        protected virtual void OnRead(ApplicationFileEventArgs e)
        {
        }

        protected virtual void OnReadCompleted(ApplicationFileEventArgs e)
        {
            e.Project.EndInit();

            if (ReadCompleted.HasValue())
            {
                ReadCompleted(e);
            }
        }

        protected virtual void OnRead(IProjectFileInfo info, string fileName)
        {
        }

        protected virtual void OnWrite(ApplicationFileEventArgs e)
        {
        }

        public IApplicationFile Clone()
        {
            return MemberwiseClone() as ApplicationFileAttribute;
        }
    }
}
