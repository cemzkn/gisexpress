//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Geometries;
using System.Geometries.Index;
using System.Linq;
using System.Workspace;

namespace System.Windows.Modules
{
    partial class FeatureSelectionComponent
    {
        protected class SelectionOverlayEventArgs : SelectionDoWorkEventArgs
        {
            public SelectionOverlayEventArgs(FeatureSelectionComponent component, SpatialFunctions function)
                : base(component, ComponentEditCompleteAction.Cancel)
            {
                Function = function;
            }

            protected bool Handled;
            protected MapLayer ActiveLayer;
            protected ISet<MapFeature> Items;
            protected SpatialFunctions Function;

            protected override void OnInitialize()
            {
                Items = new HashSet<MapFeature>();
                ActiveLayer = Component.Project.Workspace.GetActiveLayer();
            }

            protected override bool OnDoWork(MapFeature item)
            {
                Handled = false;

                foreach (MapFeature neighbor in GetNeighborFeatures(item).ToArray())
                {
                    IGeometry g = item.Geometry.Overlay(neighbor.Geometry, Function);

                    if (g.HasValue() && g.NumGeometries() == 1)
                    {
                        Handled = true;

                        item.Feature.BeginEdit();
                        item.Geometry = g;

                        if (Features.Remove(neighbor))
                        {
                            using (neighbor)
                            {
                                if (Copy)
                                {
                                    item.Feature.SetAdded();
                                }
                                else
                                {
                                    neighbor.Feature.CancelEdit();
                                    neighbor.Feature.BeginEdit();
                                    neighbor.Feature.Delete();
                                    neighbor.Feature.EndEdit();
                                }

                                Items.Remove(neighbor);
                            }
                        }

                        Items.Add(item);
                    }
                }

                Features.Add(item);
                return true;
            }

            protected override void OnCompleted()
            {
                if (Features.Count > 0)
                {
                    MapFeature item;

                    while (Features.Count > 0)
                    {
                        item = Features.First();

                        OnDoWork(item);

                        if (!Handled)
                        {
                            Features.Remove(item);
                        }
                    }
                }

                if (Items.Count > 0)
                {
                    foreach (MapFeature item in Items)
                    {
                        using (item)
                        {
                            item.Feature.EndEdit();
                        }
                    }
                }

                base.OnCompleted();
            }

            protected IEnumerable<MapFeature> GetNeighborFeatures(MapFeature item)
            {
                if (Features.Count > 0)
                {
                    foreach (MapFeature obj in Features)
                    {
                        if (item.Geometry.IsIntersects(obj.Geometry))
                        {
                            yield return obj;
                        }
                    }
                }
            }

            protected override void OnDisposing()
            {
                Items = null;
                Features = null;
                ActiveLayer = null;

                base.OnDisposing();
            }
        }
    }
}