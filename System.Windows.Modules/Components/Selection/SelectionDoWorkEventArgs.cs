//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Geometries;
using System.Linq;
using System.Transformations;
using System.Workspace;

namespace System.Windows.Modules
{
    partial class FeatureSelectionComponent
    {
        protected partial class SelectionDoWorkEventArgs : IDisposable
        {
            public SelectionDoWorkEventArgs(FeatureSelectionComponent component, ComponentEditCompleteAction action)
            {
                Action = action;
                Component = component;
                Features = new HashSet<MapFeature>();
                IsEmpty = component.Project.Workspace.SelectionIsEmpty;

                if (IsEmpty == false)
                {
                    if (Action != ComponentEditCompleteAction.Delete)
                    {
                        Copy = component.Project.Application.CopyMode;
                        Initialize();
                    }

                    Reset();
                }
            }

            protected HashSet<MapFeature> Features;
            protected FeatureSelectionComponent Component;
            protected IEnumerator<MapFeature> Enumerator;

            public bool IsEmpty
            {
                get;
                protected set;
            }

            public bool IsCompleted
            {
                get;
                protected set;
            }

            public virtual bool AlwaysTransactional
            {
                get { return false; }
            }

            public ComponentEditCompleteAction Action
            {
                get;
                protected set;
            }

            public bool Copy
            {
                get;
                protected set;
            }

            public bool Continue
            {
                get;
                protected set;
            }

            public double? Altitude
            {
                get;
                protected set;
            }

            public BufferOptions Buffer
            {
                get;
                protected set;
            }

            public MatrixTransform Transform
            {
                get;
                protected set;
            }

            public void Reset()
            {
                Enumerator.DisposeSafely();
                Enumerator = Component.Project.Workspace.GetSelectedFeatures().GetEnumerator();
            }

            public bool MoveNext()
            {
                if (Enumerator.MoveNext())
                {
                    Features.Add(Enumerator.Current);
                    return true;
                }

                Complete();
                return false;
            }

            public bool DoWork()
            {
                if (Features.Count == 0)
                {
                    return false;
                }

                int quadrantSegments = 90 / (int)(Component.Project.Properties["BufferAngle"].Value ?? 6);

                foreach (MapFeature item in Features.ToArray())
                {
                    if (Features.Remove(item))
                    {
                        if (item.Geometry == null)
                        {
                            continue;
                        }

                        item.Geometry.BufferParameters.QuadrantSegments = quadrantSegments;

                        if (OnDoWork(item))
                        {
                            continue;
                        }

                        return false;
                    }
                }

                return true;
            }

            protected void Initialize()
            {
                OnInitialize();
            }

            protected virtual void OnInitialize()
            {
                Buffer = new BufferOptions(Component.Properties);
                Transform = new TransformOptions(Component).Matrix;

                Altitude = (float?)Component.Properties[GeometryProperty.Altitude];

                IsEmpty = !Altitude.HasValue && !Buffer.HasValue && (Transform.IsNull() || Transform.IsNull);
                Continue = Copy && Component.DragComponent.HasValue();
            }

            protected virtual bool OnDoWork(MapFeature item)
            {
                using (item)
                {
                    item.Feature.BeginEdit();

                    if (Action == ComponentEditCompleteAction.Delete)
                    {
                        item.Feature.Delete();
                    }
                    else
                    {
                        IGeometry g = item.Feature.GetGeometry();

                        if (g.HasValue() && g.IsEmpty() == false)
                        {
                            if (Transform.HasValue())
                            {
                                g = g.Transform(Transform);
                            }

                            if (Buffer.HasValue)
                            {
                                g.BufferParameters.JoinStyle = Buffer.LineJoin;
                                g.BufferParameters.EndCapStyle = Buffer.CapStyle;

                                g = g.Buffer(Buffer.Width, Buffer.Height);
                            }

                            if (Altitude.HasValue)
                            {
                                g.Coordinates.SetAltitude(Altitude.Value);
                            }

                            item.Feature.SetGeometry(g);

                            if (Copy)
                            {
                                if (Continue)
                                {
                                    item.Layer.Selection.Remove(item.Feature.GetFeatureId());
                                }

                                item.Feature.SetAdded();
                            }
                        }
                    }

                    item.Feature.EndEdit();

                    if (Continue)
                    {
                        if (item.Layer.Selection.Add(item.Feature.GetFeatureId()))
                        {
                            return true;
                        }
                        else
                        {
                            Copy = false;
                            Continue = false;
                            Action = ComponentEditCompleteAction.Cancel;
                            return false;
                        }
                    }
                }

                return true;
            }

            public void Complete()
            {
                if (!IsCompleted)
                {
                    DoWork();
                    IsCompleted = true;
                    OnCompleted();
                }
            }

            protected virtual void OnCompleted()
            {
                if (!Continue)
                {
                    Component.Clear();
                }

                Enumerator.DisposeSafely();
            }

            protected virtual void OnDisposing()
            {
                Component = null;
                Enumerator = null;
                Buffer = null;
                Transform = null;
            }

            public void Dispose()
            {
                OnDisposing();
                GC.SuppressFinalize(this);
            }
        }
    }
}