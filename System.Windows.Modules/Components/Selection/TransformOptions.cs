//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Geometries;
using System.Transformations;

namespace System.Windows.Modules
{
    partial class FeatureSelectionComponent
    {
        partial class SelectionDoWorkEventArgs
        {
            public class TransformOptions
            {
                public TransformOptions(FeatureSelectionComponent component)
                {
                    double offsetX, offsetY;

                    var center = component.RotateAt ?? component.ScaleAt;
                    var scaleX = (float?)component.Properties[GeometryProperty.ScaleX];
                    var scaleY = (float?)component.Properties[GeometryProperty.ScaleY];
                    var rotation = (float?)component.Properties[GeometryProperty.Rotation];

                    if (component.GetDragOffset(out offsetX, out offsetY))
                    {
                        CreateMatrix();
                        Matrix.Translate(offsetX, offsetY);
                    }

                    if (rotation.HasValue)
                    {
                        CreateMatrix();

                        if ((component.RotateAt ?? center).HasValue())
                        {
                            Matrix.RotateAt(-rotation.Value, component.RotateAt ?? center);
                        }
                    }

                    if (scaleX.HasValue || scaleY.HasValue)
                    {
                        CreateMatrix();

                        if ((component.ScaleAt ?? center).HasValue())
                        {
                            Matrix.ScaleAt(scaleX.HasValue ? scaleX.Value / 100 : 1, scaleY.HasValue ? scaleY.Value / 100 : 1, component.ScaleAt ?? center);
                        }
                    }
                }

                public MatrixTransform Matrix;

                protected void CreateMatrix()
                {
                    Matrix = Matrix ?? new MatrixTransform();
                }
            }
        }
    }
}