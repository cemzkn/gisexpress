//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Geometries;

namespace System.Windows.Modules
{
    partial class FeatureSelectionComponent
    {
        partial class SelectionDoWorkEventArgs
        {
            public class BufferOptions
            {
                public BufferOptions(Hashtable properties)
                {
                    var width = (float?)properties[GeometryProperty.BufferWidth];
                    var height = (float?)properties[GeometryProperty.BufferHeight];
                    var lineJoin = (JoinStyle?)properties[GeometryProperty.BufferLineJoin];
                    var capStyle = (EndCapStyle?)properties[GeometryProperty.BufferEndCapStyle];

                    HasValue = width.HasValue && height.HasValue;

                    if (HasValue)
                    {
                        Width = width.Value;
                        Height = height.Value;
                        LineJoin = lineJoin.HasValue ? lineJoin.Value : JoinStyle.Round;
                        CapStyle = capStyle.HasValue ? capStyle.Value : EndCapStyle.Round;
                    }
                }

                public bool HasValue
                {
                    get;
                    protected set;
                }

                public float Width
                {
                    get;
                    protected set;
                }

                public float Height
                {
                    get;
                    protected set;
                }

                public JoinStyle LineJoin
                {
                    get;
                    protected set;
                }

                public EndCapStyle CapStyle
                {
                    get;
                    protected set;
                }
            }
        }
    }
}