//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.ComponentModel.Design;
using System.Geometries;
using System.Geometries.Operation.Polygonize;
using System.Workspace;

namespace System.Windows.Modules
{
    partial class FeatureSelectionComponent
    {
        protected class SelectionToPolygonEventArgs : SelectionDoWorkEventArgs
        {
            public SelectionToPolygonEventArgs(FeatureSelectionComponent component)
                : base(component, ComponentEditCompleteAction.Cancel)
            {
            }

            protected MapFeature Item;
            protected IPolygonizer Polygonizer;

            public override bool AlwaysTransactional
            {
                get { return true; }
            }

            protected override void OnInitialize()
            {
                Polygonizer = TypeFactory.Default.Create<IPolygonizer>();
                //Polygonizer = TypeFactory.Create<IPolygonizer>(Component.Designer.Transform.Bounds, Component.Properties[GeometryProperty.Tolerance] ?? Component.Designer.Transform.PixelSize);
            }

            protected override bool OnDoWork(MapFeature item)
            {
                Polygonizer.Add(item.Geometry);

                if (Item.IsNull())
                {
                    Item = item;
                }
                else
                {
                    item.Dispose();
                }

                return true;
            }

            protected override void OnCompleted()
            {
                var handled = default(bool);

                using (Item)
                {
                    foreach (IPolygon polygon in Polygonizer.GetPolygons())
                    {
                        handled = true;

                        Item.Feature.BeginEdit();
                        Item.Geometry = polygon;
                        Item.Feature.SetAdded();
                        Item.Feature.EndEdit();

                        Item.Layer.Selection.Remove(Item.Feature.GetFeatureId());
                    }
                }

                if (handled && !Copy)
                {
                    Reset();

                    while (MoveNext())
                    {
                        Enumerator.Current.Feature.BeginEdit();
                        Enumerator.Current.Feature.Delete();
                        Enumerator.Current.Feature.EndEdit();
                    }
                }

                base.OnCompleted();
            }

            protected override void OnDisposing()
            {
                Polygonizer = null;
                base.OnDisposing();
            }
        }
    }
}