//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Workspace;

namespace System.Windows.Modules
{
    internal class FeatureLayerPropertyDescriptor : PropertyDescriptor<FeatureItem>
    {
        public FeatureLayerPropertyDescriptor(FeatureItem item)
            : base("13C107190C88408EB39909AA9D2CE0A7")
        {
            Item = item;
            Property.Category = "General";
        }

        public FeatureItem Item
        {
            get;
            protected set;
        }

        public override bool IsReadOnly
        {
            get { return false; }
        }

        public override Type PropertyType
        {
            get { return typeof(MapLayer); }
        }

        public override object GetValue(object component)
        {
            return Item.Layer;
        }

        public override void SetValue(object component, object value)
        {
            var destination = value as MapLayer;

            if (destination.HasValue())
            {
                using (Item.Project.TransactionLog.Begin(!Item.Feature.Detached))
                {
                    var feature = new FeatureItem(Item.Project, destination, destination.ImportFeature(Item.Feature));

                    if (!Item.Project.Application.CopyMode)
                    {
                        if (Item.Feature.Delete())
                        {
                            Item.Feature.EndEdit();
                        }
                    }

                    Item.Project.Designer.ActiveComponent.TypeDescriptor = feature;
                    Item.Project.Application.Form.DockManager.PropertiesPanel.Control.SelectedObject = feature;
                }
            }
        }
    }
}
