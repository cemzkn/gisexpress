//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Geometries;
using System.Linq;
using System.Workspace;

namespace System.Windows.Modules
{
    public class FeatureItem : CustomTypeDescriptor
    {
        public FeatureItem(IProject project, MapLayer layer, IFeature feature)
            : base(feature)
        {
            Project = project;
            Layer = layer;
            Record = Feature = feature;
            Geometry = feature.GetGeometry();
        }

        public readonly IProject Project;
        public readonly MapLayer Layer;
        public readonly IDataRecord Record;
        public readonly IFeature Feature;
        public readonly IGeometry Geometry;

        protected PropertyDescriptorCollection Properties;

        public object this[int index]
        {
            get { return Record[index]; }
        }

        public object this[string name]
        {
            get { return Record[name]; }
        }

        public IGeometry Query(IEnvelope bounds)
        {
            if (Geometry.HasValue())
            {
                foreach (IGeometry item in Geometry.GetGeometries())
                {
                    if (item.IsCrosses(bounds))
                    {
                        return item;
                    }
                }

                foreach (IGeometry item in Geometry.GetGeometries())
                {
                    if (item.IntersectsWith(bounds))
                    {
                        return item;
                    }
                }
            }

            return default(IGeometry);
        }

        public override object GetPropertyOwner(PropertyDescriptor descriptor)
        {
            if (Project.Designer.HasValue())
            {
                IGeometryPropertyDescriptor g;

                if ((g = descriptor as IGeometryPropertyDescriptor).HasValue())
                {
                    if (Project.Designer.ActiveComponent.HasValue())
                    {
                        g.Component = Project.Designer.ActiveComponent;
                    }

                    return Geometry;
                }
            }

            return Feature;
        }

        public override PropertyDescriptorCollection GetProperties()
        {
            return GetProperties(null);
        }

        public override PropertyDescriptorCollection GetProperties(Attribute[] attributes)
        {
            if (Properties == null)
            {
                Properties = new PropertyDescriptorCollection(base.GetProperties(attributes).Cast<PropertyDescriptor>().ToArray());

                if (DeveloperEnvironment.DebugMode)
                {
                    Properties.Insert(0, GeometryFactory.CreatePropertyDescriptor(Project.Designer.ActiveComponent, GeometryProperty.WellKnownText));
                }

                if (Geometry.HasValue() && !Geometry.IsEmpty())
                {
                    IEnumerable<PropertyDescriptor> e = Geometry.GetProperties(Project.Designer.ActiveComponent);

                    if (e.HasValue())
                    {
                        foreach (var item in e.Reverse())
                        {
                            Properties.Insert(0, item);
                        }
                    }
                }

                Properties.Insert(0, new FeatureLayerPropertyDescriptor(this));
            }

            return Properties;
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            return obj.GetHashCode() == GetHashCode();
        }
    }
}
