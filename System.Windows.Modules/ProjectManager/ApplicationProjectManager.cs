//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Modules.Controls;

namespace System.Windows.Modules
{
    internal class ApplicationProjectManager : IApplicationProjectManager
    {
        public ApplicationProjectManager(IApplication application)
        {
            Application = application;
        }

        public IApplication Application
        {
            get;
            private set;
        }

        public IDocumentManager DocumentManager
        {
            get { return Application.Form.DocumentManager; }
        }

        public IProject ActiveProject
        {
            get
            {
                if (DocumentManager.ActiveDocument.HasValue())
                {
                    return DocumentManager.ActiveDocument.Project;
                }

                return default;
            }
        }

        public IProject NewProject()
        {
            IProject project = Application.Files.Default.CreateProject(Application);

            project.BeginInit();
            project.Workspace.Name = this.GetName(Localization.Localize(MainModule.CommandNewProject));
            project.EndInit();
            DocumentManager.Update();
            
            return project;
        }

        public IProject this[string name]
        {
            get { return this.FirstOrDefault(project => project.Name.EqualsIgnoreCase(name)); }
        }

        public IProject FindByFileName(string fileName)
        {
            return this.FirstOrDefault(e => e.File.HasValue() && e.File.FileName.EqualsIgnoreCase(fileName));
        }

        public int Count
        {
            get { return this.Count(); }
        }

        public bool SaveAll()
        {
            foreach (IProject item in this)
            {
                if (!item.Save())
                {
                    return false;
                }
            }

            return true;
        }

        public bool CloseAll()
        {
            foreach (IProject item in this.ToArray())
            {
                if (!item.Close())
                {
                    return false;
                }
            }

            return true;
        }

        public bool Close(IProject project)
        {
            IDocument document = DocumentManager.Find(project);

            if (document.HasValue())
            {
                return document.Close();
            }

            return false;
        }

        public IEnumerator<IProject> GetEnumerator()
        {
            foreach (IDocument document in DocumentManager)
            {
                if (document.Project.HasValue())
                {
                    yield return document.Project;
                }
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
