////////////////////////////////////////////////////////////////////////////////////////////////////
////
////  Copyright © GISExpress 2015-2022. All Rights Reserved.
////  
////  GISExpress .NET API and Component Library
////  
////  The entire contents of this file is protected by local and International Copyright Laws.
////  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
////  the code contained in this file is strictly prohibited and may result in severe civil and 
////  criminal penalties and will be prosecuted to the maximum extent possible under the law.
////  
////  RESTRICTIONS
////  
////  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
////  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
////  
////  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
////  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
////  AND PERMISSION FROM GISExpress
////  
////  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
////  
////  Warning: This content was generated by GISExpress tools.
////  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//using System.Drawing;
//using System.Geometries;
//using System.Geometries.Index;

//namespace System.Windows.Modules
//{
//    internal class SnapObject : ISpatialObject
//    {
//        public SnapObject(PointVisitedEventArgs e)
//            : this(e.Point, e.Value, e.IsCenter, e.IsMidPoint)
//        {
//        }

//        public SnapObject(PointF point, ICoordinate value, bool isCenter, bool isMidPoint)
//        {
//            int x = point.X.Round();
//            int y = point.Y.Round();

//            Value = value;
//            IsCenter = isCenter;
//            IsMidPoint = isMidPoint;

//            unchecked
//            {
//                if (x < 0) x = 0;
//                if (y < 0) y = 0;

//                x -= x % 3;
//                y -= y % 3;

//                HashCode = x * 10000 + y;
//            }
//        }

//        public static SnapObject FromPoint(PointF point, ICoordinate value)
//        {
//            return new SnapObject(point, value, false, false);
//        }

//        public readonly bool IsCenter;
//        public readonly bool IsMidPoint;
//        public readonly ICoordinate Value;

//        protected readonly int HashCode;

//        public IEnvelope GetBounds()
//        {
//            return Value.GetBounds();
//        }

//        public override bool Equals(object obj)
//        {
//            if (obj == null)
//            {
//                return false;
//            }

//            return GetHashCode() == obj.GetHashCode();
//        }

//        public override int GetHashCode()
//        {
//            return HashCode;
//        }
//    }
//}
