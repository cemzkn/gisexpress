//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Drawing;
using System.Geometries;
using System.Windows.Forms;
using System.Workspace.Drawing;

namespace System.Windows.Modules
{
    public class MapEventArgs : EventArgs
    {
        public MapEventArgs(IProject project)
        {
            Project = project;
        }

        public IProject Project
        {
            get;
            protected set;
        }

        public MapCanvas Canvas
        {
            get { return Project.Workspace.Canvas; }
        }

        public MapGraphics Graphics
        {
            get { return Canvas.Graphics; }
        }

        public IMapTransform Transform
        {
            get { return Graphics.Transform; }
        }

        public double Scale
        {
            get { return Transform.CurrentScale; }
        }

        public MouseButtons Button
        {
            get { return Project.Designer.Mouse.Button; }
        }

        public int Clicks
        {
            get { return Project.Designer.Mouse.Clicks; }
        }

        public int Delta
        {
            get { return Project.Designer.Mouse.Delta; }
        }

        public Point Location
        {
            get { return Project.Designer.Mouse.Location; }
        }

        public int X
        {
            get { return Project.Designer.Mouse.X; }
        }

        public int Y
        {
            get { return Project.Designer.Mouse.Y; }
        }

        public IEnvelope GetCursorBounds()
        {
            return GetCursorBounds(Transform, Location, 5);
        }

        public static IEnvelope GetCursorBounds(IMapTransform transform, Point location, float radius)
        {
            if (location.IsEmpty || transform.IsEmpty())
            {
                return default(IEnvelope);
            }

            return transform.ClientToWorld(new RectangleF(location.X - radius, location.Y - radius, radius * 2, radius * 2));
        }
    }
}
