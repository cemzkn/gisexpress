//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Windows.Forms;
using System.Windows.Modules.Controls;
using System.Workspace;

namespace System.Windows.Modules
{
    public abstract class ApplicationModule : IApplicationModule
    {
        public static void Run<TForm>() where TForm : Form, IApplicationMainForm
        {
            //if (LicenseManager.IsLicensed(typeof(ApplicationModule)))
            {
                using (var mainForm = Activator.CreateInstance<TForm>())
                {
                    using (var module = new MainModule(mainForm))
                    {
                        mainForm.Application = module;

                        using (var context = new GISExpressApplicationContext(mainForm))
                        {
                            context.SplashForm.Actions.Add(Drivers.RegisterAll);
                            context.SplashForm.Actions.Add(ApplicationConfiguration.Current.ValidateProcess);
                            context.SplashForm.Actions.Add(module.InitGraphics);
                            context.SplashForm.SafeActions.Add(module.Init);
                            context.SplashForm.SafeActions.Add(AppDiagnostics.RunAll);
                            context.SplashForm.FinalActions.Add(module.InitModulesGraphics);
                            context.Run();
                        }
                    }
                }
            }
        }

        protected ApplicationModule(IApplication application)
        {
            Type = GetType();

            if (application.IsNull())
            {
                IsModule = false;
                IsEnabled = true;
                Application = this as IApplication;
            }
            else
            {
                IsModule = true;
                Application = application;
            }

            FileVersion = FileVersionInfo.GetVersionInfo(Type.Assembly.Location);

            if (IsModule)
            {
                ApplicationConfiguration.Current.ComponentSettings.Load(this);
            }

            if (IsEnabled.HasValue == false || IsEnabled.Value)
            {
                if (IsModule)
                {
                    IsEnabled = LicenseManager.IsLicensed(Type);
                }

                if (IsEnabled.Value)
                {
                    AttachOverriddenEvents();
                }
            }
            else
            {
                IsEnabled = false;
            }
        }

        protected bool? IsEnabled;
        protected readonly Type Type;
        protected readonly bool IsModule;
        protected readonly FileVersionInfo FileVersion;
        protected IList<Delegate> Delegates;

        [DefaultValue(true)]
        [ConfigurationValue]
        public bool Enabled
        {
            get { return IsEnabled.HasValue ? IsEnabled.Value : false; }
            set
            {
                if (IsEnabled.HasValue)
                {
                    if (LicenseManager.IsLicensed(Type) && !Equals(IsEnabled.Value, value))
                    {
                        if (value)
                        {
                            AttachOverriddenEvents();
                        }
                        else
                        {
                            DetachOverriddenEvents();
                        }

                        IsEnabled = value;
                        ApplicationConfiguration.Current.ComponentSettings.Save(this);
                        OnEnabledChanged();
                    }
                }
                else
                {
                    IsEnabled = value;
                }
            }
        }

        public string Name
        {
            get { return FileVersion.ProductName; }
        }

        public virtual string DisplayName
        {
            get { return Localization.Localize(Name); }
        }

        public virtual string Author
        {
            get { return FileVersion.CompanyName; }
        }

        public virtual string Version
        {
            get { return FileVersion.ProductVersion; }
        }

        [Browsable(false)]
        public IApplication Application
        {
            get;
            private set;
        }

        [Browsable(false)]
        public IProject ActiveProject
        {
            get { return Application.ActiveProject; }
        }

        [Browsable(false)]
        public MapLayer ActiveLayer
        {
            get { return ActiveProject.Workspace.GetActiveLayer(); }
        }

        protected void AttachOverriddenEvents()
        {
            Delegates = Type.AttachOverriddenEvents(this, Application).ToList();
        }

        protected void DetachOverriddenEvents()
        {
            Delegates.DetachOverriddenEvents(Application);
            Debug.Assert(Delegates.Count == 0);
        }

        protected virtual void OnCancel()
        {
        }

        protected virtual void OnEnabledChanged()
        {
        }

        protected virtual void OnSettingsChanged()
        {
        }

        protected virtual void OnInitializing(ApplicationLoadEventArgs e)
        {
        }

        protected virtual void OnLoad(ApplicationLoadEventArgs e)
        {
        }

        protected virtual void OnProjectOpening(ProjectCancelEventArgs e)
        {
        }

        protected virtual void OnProjectLoading(ProjectEventArgs e)
        {
        }

        protected virtual void OnProjectPropertyValueChanged(IProject project, IPropertyDescriptor property)
        {
        }

        protected virtual void OnProjectLoad(ProjectEventArgs e)
        {
        }

        protected virtual void OnProjectChanged(ProjectEventArgs e)
        {
        }

        protected virtual void OnProjectSaved(ProjectEventArgs e)
        {
        }

        protected virtual void OnProjectActivated(ProjectEventArgs e)
        {
        }

        protected virtual void OnProjectDeactivated(ProjectEventArgs e)
        {
        }

        protected virtual void OnProjectClosing(ProjectCancelEventArgs e)
        {
        }

        protected virtual void OnProjectClosed(ProjectEventArgs e)
        {
        }

        protected virtual void OnActiveProjectChanged(ActiveProjectChangedEventArgs e)
        {
        }

        protected virtual void OnTransactionLogChanged(ProjectEventArgs e)
        {
        }

        protected virtual void OnCursorButtonDown(MapEventArgs e)
        {
        }

        protected virtual void OnCursorLocationChanged(MapEventArgs e)
        {
        }

        protected virtual void OnProjectScaleChanged(MapEventArgs e)
        {
        }

        protected virtual void OnProjectCollectionChanged(ProjectEventArgs e, CollectionChangeAction action)
        {
        }

        protected virtual void OnLayerCollectionChanged(CollectionChangeAction action, MapLayer layer)
        {
        }

        protected virtual bool OnFeatureCollectionChanging(CollectionChangeAction action, IFeature feature)
        {
            return true;
        }

        protected virtual void OnFeatureCollectionChanged(CollectionChangeAction action, IFeature feature)
        {
        }

        //protected virtual void OnCategoryCollectionChanged(CollectionChangeAction action, MapCategory layer)
        //{
        //}

        protected virtual void OnFeatureSelect(FeatureEventArgs e)
        {
        }

        protected virtual void OnBeginRender(MapWorkspace workspace)
        {
        }

        protected virtual void OnBeginLayerRender(MapWorkspace workspace, MapLayer layer)
        {
        }

        protected virtual void OnFeatureRender(FeatureDrawEventArgs e)
        {
        }

        protected virtual void OnActiveComponentChanged(ApplicationComponentEventArgs e)
        {
        }

        protected virtual void OnPopupMenuClosed(object sender, EventArgs e)
        {
        }

        protected virtual void OnMainFormDisposed(object sender, EventArgs e)
        {
            Dispose();
        }

        protected virtual void OnDispose()
        {
        }

        public void Dispose()
        {
            OnDispose();
            GC.SuppressFinalize(this);
        }
    }
}
