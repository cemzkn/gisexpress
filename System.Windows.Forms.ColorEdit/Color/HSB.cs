//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System;

namespace System.Windows.Forms
{
    public class HSB
    {
        public HSB()
            : this(0.0, 0.0, 0.0)
        {
        }

        public HSB(int hue, int saturation, int brightness)
            : this(hue / 360.0, saturation / 100.0, brightness / 100.0)
        {
        }

        public HSB(double hue, double saturation, double brightness)
        {
            H = hue;
            S = saturation;
            B = brightness;
        }

        public event Action Changed;

        protected double H;
        protected double S;
        protected double B;

        public double Hue
        {
            get { return H; }
            set
            {
                H = value;
                H = H > 1 ? 1 : H < 0 ? 0 : H;
            }
        }

        public double Saturation
        {
            get { return S; }
            set
            {
                S = value;
                S = S > 1 ? 1 : S < 0 ? 0 : S;
            }
        }

        public double Brightness
        {
            get { return B; }
            set
            {
                B = value;
                B = B > 1 ? 1 : B < 0 ? 0 : B;
            }
        }

        public void SetValues(double hue, double saturation, double brightness)
        {
            Hue = hue;
            Saturation = saturation;
            Brightness = brightness;

            if (Changed.HasValue())
            {
                Changed();
            }
        }

        public void CopyTo(HSB value)
        {
            value.SetValues(H, S, B);
        }
    }
}
