//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;

namespace System.Windows.Forms
{
    [ToolboxItem(true)]
    public class ColorDropDownEdit : PopupContainerEdit, ISupportEditValue, ISupportPaint
    {
        public ColorDropDownEdit()
        {
            ReadOnly = true;
            GlyphButtons.Clear();

            Control = new ColorPickEdit
            {
                ShowButtons = true,
                Dock = DockStyle.Fill
            };

            MinimumSize =
            MaximumSize = new Size(48, 19);

            ColorEdit.Cancel += Close;
            ColorEdit.SelectedColorChanged += OnSelectedColorChanged;
        }

        protected override void OnBeginEdit(Point point, ITypeDescriptorContext context)
        {
            ShowPopup();
        }

        public override object EditValue
        {
            get { return SelectedColor; }
            set
            {
                if (value is Color)
                {
                    SelectedColor = (Color)value;
                }
            }
        }

        protected ColorPickEdit ColorEdit
        {
            get { return (ColorPickEdit)Control; }
        }

        public event Action Cancel
        {
            add { ColorEdit.Cancel += value; }
            remove { ColorEdit.Cancel -= value; }
        }

        public event Action<Color> SelectedColorChanged
        {
            add { ColorEdit.SelectedColorChanged += value; }
            remove { ColorEdit.SelectedColorChanged -= value; }
        }

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Color SelectedColor
        {
            get { return ColorEdit.SelectedColor; }
            set { ColorEdit.SelectedColor = value; }
        }

        protected override void OnPopupShow(int x, int y)
        {
            base.OnPopupShow(x, y + 3);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            OnPaintValue(e.Graphics, ClientRectangle, SelectedColor);
        }

        protected override void OnPaintValue(Graphics g, Rectangle bounds, Image image, object value)
        {
            var color = (Color)value;

            const int width = 24;
            const int height = 13;

            using (var brush = new SolidBrush(color.IsEmpty ? Color.Black : color))
            {
                int top = bounds.Top + (bounds.Height - 13) / 2;

                g.FillRectangle(brush, bounds.Left + 3, top, width, height);
                g.DrawRectangle(SystemPens.ControlDark, bounds.Left + 3, top, width, height);
            }

            g.DrawGlyphButton(GlyphButtonType.Down, bounds.Left + 30, bounds.Top + (bounds.Height - 16) / 2, 16, 16);
        }

        protected void OnSelectedColorChanged(Color c)
        {
            Close();
            Invalidate(false);
            PerformCompleted();
        }
    }
}
