//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Linq;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class ColorDrawStyleEdit : Control
    {
        public ColorDrawStyleEdit()
        {
            Panel = new TableLayoutPanel
            {
                RowCount = 8,
                ColumnCount = 2,
                Dock = DockStyle.Fill
            };

            Panel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50));
            Panel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50));

            Panel.Controls.Add(CreateRadioButton("H", ColorDrawStyle.Hue), 0, 0);
            Panel.Controls.Add(CreateRadioButton("S", ColorDrawStyle.Saturation), 0, 1);
            Panel.Controls.Add(CreateRadioButton("L", ColorDrawStyle.Brightness), 0, 2);
            Panel.Controls.Add(CreateRadioButton("R", ColorDrawStyle.Red), 0, 3);
            Panel.Controls.Add(CreateRadioButton("G", ColorDrawStyle.Green), 0, 4);
            Panel.Controls.Add(CreateRadioButton("B", ColorDrawStyle.Blue), 0, 5);

            Panel.Controls.Add(CreateSpinEdit("Hue", 0, 360), 1, 0);
            Panel.Controls.Add(CreateSpinEdit("Saturation", 0, 100), 1, 1);
            Panel.Controls.Add(CreateSpinEdit("Brightness", 0, 100), 1, 2);
            Panel.Controls.Add(CreateSpinEdit("Red", 0, 255), 1, 3);
            Panel.Controls.Add(CreateSpinEdit("Green", 0, 255), 1, 4);
            Panel.Controls.Add(CreateSpinEdit("Blue", 0, 255), 1, 5);

            Panel.Controls.Add(PrimaryColor = CreateColorBox(), 0, 6);
            Panel.Controls.Add(SecondaryColor = CreateColorBox(), 1, 6);

            Panel.Controls.Add(CreateHexEdit(), 0, 7);
            Panel.SetColumnSpan(Panel.GetControlFromPosition(0, 7), 2);
            Controls.Add(Panel);
        }

        public event Action DrawStyleChanged;
        public event Action ColorValueChanged;

        protected readonly TableLayoutPanel Panel;
        protected bool Flag;
        protected PictureBox PrimaryColor;
        protected PictureBox SecondaryColor;

        public ColorDrawStyle DrawStyle
        {
            get { return (ColorDrawStyle)Panel.Controls.Cast<Control>().First(c => c is CheckEdit && ((CheckEdit)c).Checked).Tag; }
            set { ((CheckEdit)Panel.Controls.Cast<Control>().First(c => c is CheckEdit && value.Equals(c.Tag))).Checked = true; }
        }

        public HSB GetHsb()
        {
            int h = Panel.Controls.Find("Hue", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue;
            int s = Panel.Controls.Find("Saturation", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue;
            int b = Panel.Controls.Find("Brightness", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue;

            return new HSB(h, s, b);
        }

        public void Cancel()
        {
            SetColor(PrimaryColor.BackColor, PrimaryColor.BackColor.ToHsb(), false);
        }

        public Color GetColor()
        {
            int r = Panel.Controls.Find("Red", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue;
            int g = Panel.Controls.Find("Green", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue;
            int b = Panel.Controls.Find("Blue", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue;

            return Color.FromArgb(r, g, b);
        }

        public void SetColor(Color rgb, HSB hsb, bool isPrimary)
        {
            Flag = true;

            if (isPrimary)
            {
                PrimaryColor.BackColor = rgb;
            }

            SecondaryColor.BackColor = rgb;

            Panel.Controls.Find("Red", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue = rgb.R;
            Panel.Controls.Find("Green", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue = rgb.G;
            Panel.Controls.Find("Blue", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue = rgb.B;

            if (hsb.HasValue())
            {
                Panel.Controls.Find("Hue", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue = (hsb.Hue * 360).Round();
                Panel.Controls.Find("Saturation", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue = (hsb.Saturation * 100).Round();
                Panel.Controls.Find("Brightness", true).Cast<SpinEdit<int>>().FirstOrDefault().EditValue = (hsb.Brightness * 100).Round();
            }

            Panel.Controls.Find("HexEdit", true).Cast<TextEdit>().First().EditValue = string.Concat("#", rgb.ToHex());
            Flag = false;
        }

        protected Control CreateRadioButton(string caption, ColorDrawStyle drawStyle)
        {
            var rb = new CheckEdit { Name = caption, Text = caption, Dock = DockStyle.Fill, Tag = drawStyle };

            rb.IsRadio = true;
            rb.RadioGroupIndex = 0;
            rb.CheckedChanged += OnDrawStyleChanged;

            return rb;
        }

        protected Control CreateSpinEdit<T>(string name, T min, T max) where T : struct
        {
            var edit = new SpinEdit<T> { Name = name, Anchor = AnchorStyles.None };

            edit.MaxLength = 3;
            edit.MinimumValue = min;
            edit.MaximumValue = max;
            edit.TextChanged += OnColorValueChanged;

            return edit;
        }

        protected Control CreateHexEdit()
        {
            var edit = new TextEdit { Name = "HexEdit", Anchor = AnchorStyles.None };

            edit.MaxLength = 7;
            edit.TextAlign = ContentAlignment.MiddleCenter;
            edit.CharacterCasing = CharacterCasing.Upper;
            edit.TextChanged += OnHexValueChanged;
            edit.LostFocus += (s, e) =>
            {
                Color result;

                if (!ColorExtensions.TryParse(edit.Text, out result))
                {
                    edit.Text = GetColor().ToHex();
                }
            };

            return edit;
        }

        protected PictureBox CreateColorBox()
        {
            var edit = new PictureBox { Dock = DockStyle.Fill, Height = 15, BorderStyle = BorderStyle.FixedSingle, Cursor = Cursors.Hand };

            edit.Click += (s, e) =>
            {
                SetColor(edit.BackColor, edit.BackColor.ToHsb(), true);

                if (ColorValueChanged.HasValue())
                {
                    ColorValueChanged();
                }
            };

            return edit;
        }

        protected Control CreateSeperator()
        {
            return new Label { Height = 10 };
        }

        protected void OnDrawStyleChanged(object sender, EventArgs e)
        {
            if (DrawStyleChanged.HasValue())
            {
                DrawStyleChanged();
            }
        }

        protected void OnHexValueChanged(object sender, EventArgs e)
        {
            if (!Flag && ColorValueChanged.HasValue())
            {
                var edit = sender as TextEdit;

                if (edit.HasValue())
                {
                    Color result;

                    if (ColorExtensions.TryParse(edit.Text, out result))
                    {
                        SetColor(result, result.ToHsb(), false);
                    }
                }

                ColorValueChanged();
            }
        }

        protected void OnColorValueChanged(object sender, EventArgs e)
        {
            if (!Flag && ColorValueChanged.HasValue())
            {
                var edit = sender as SpinEdit<int>;

                if (edit.HasValue())
                {
                    if (edit.Name.Equals("Hue") || edit.Name.Equals("Saturation") || edit.Name.Equals("Brightness"))
                    {
                        SetColor(GetHsb().ToRgb(), null, false);
                    }
                }

                ColorValueChanged();
            }
        }
    }
}
