//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;

namespace System.Windows.Forms
{
    public class ColorEdit : Control
    {
        public ColorEdit()
        {
            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);

            EditColorBox = new ColorBoxEdit { Dock = DockStyle.Fill };
            EditVerticalColorSlider = new VerticalColorSliderEdit { Width = 34, Dock = DockStyle.Right };
            EditDrawStyle = new ColorDrawStyleEdit { Width = 70, Dock = DockStyle.Right };

            EditDrawStyle.DrawStyleChanged += OnEditDrawStyleValueChanged;
            EditDrawStyle.ColorValueChanged += OnEditDrawStyleColorValueChanged;

            EditColorBox.HSB.Changed += EditColorBoxValueChanged;
            EditVerticalColorSlider.HSB.Changed += OnVerticalColorSliderValueChanged;

            Controls.Add(EditColorBox);
            Controls.Add(EditVerticalColorSlider);
            Controls.Add(EditDrawStyle);

            MinimumSize = new Size(300, 200);
            EditDrawStyle.DrawStyle = ColorDrawStyle.Hue;
        }

        public event Action SelectedColorChanged
        {
            add { EditColorBox.HSB.Changed += value; }
            remove { EditColorBox.HSB.Changed -= value; }
        }

        protected bool Flag;
        protected readonly ColorBoxEdit EditColorBox;
        protected readonly ColorDrawStyleEdit EditDrawStyle;
        protected readonly VerticalColorSliderEdit EditVerticalColorSlider;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Color SelectedColor
        {
            get { return EditDrawStyle.GetColor(); }
            set
            {
                HSB hsb = value.ToHsb();
                EditDrawStyle.SetColor(value, hsb, true);
                hsb.CopyTo(EditColorBox.HSB);
            }
        }

        public void Cancel()
        {
            EditDrawStyle.Cancel();
        }

        public void ShowColorBox()
        {
            Show();
            EditColorBox.Show();
        }

        public void HideColorBox()
        {
            Hide();
            EditColorBox.Hide();
        }

        protected void OnEditDrawStyleValueChanged()
        {
            EditColorBox.DrawStyle = EditDrawStyle.DrawStyle;
            EditVerticalColorSlider.DrawStyle = EditDrawStyle.DrawStyle;

            EditColorBox.Invalidate();
            EditVerticalColorSlider.Invalidate();
        }

        protected void OnEditDrawStyleColorValueChanged()
        {
            Flag = true;
            SelectedColor.ToHsb().CopyTo(EditColorBox.HSB);
            SelectedColor.ToHsb().CopyTo(EditVerticalColorSlider.HSB);
            Flag = false;
        }

        protected void EditColorBoxValueChanged()
        {
            if (!Flag)
            {
                Flag = true;
                EditColorBox.HSB.CopyTo(EditVerticalColorSlider.HSB);
                EditDrawStyle.SetColor(EditColorBox.RGB, EditColorBox.HSB, false);
                Flag = false;
            }
        }

        protected void OnVerticalColorSliderValueChanged()
        {
            if (!Flag)
            {
                Flag = true;
                EditVerticalColorSlider.HSB.CopyTo(EditColorBox.HSB);
                EditDrawStyle.SetColor(EditVerticalColorSlider.RGB, EditVerticalColorSlider.HSB, false);
                Flag = false;
            }
        }
    }
}
