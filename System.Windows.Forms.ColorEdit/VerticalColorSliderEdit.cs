//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class VerticalColorSliderEdit : PictureBox
    {
        public VerticalColorSliderEdit()
        {
            DrawStyle = ColorDrawStyle.Hue;

            SliderPen = new Pen(Color.Gray, 1F) { LineJoin = LineJoin.Round };
            SliderBrush = new SolidBrush(Color.White);

            HSB = new HSB(1.0, 1.0, 1.0);
            HSB.Changed += OnHSBValueChanged;
            RGB = HSB.ToRgb();

            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
        }

        public readonly HSB HSB;
        public Color RGB;

        public ColorDrawStyle DrawStyle
        {
            get;
            set;
        }

        protected readonly Pen SliderPen;
        protected readonly Brush SliderBrush;
        protected float SliderPosition;
        protected Rectangle SliderBounds;

        protected void OnHSBValueChanged()
        {
            RGB = HSB.ToRgb();
            Invalidate();
        }

        public void Reset()
        {
            int factor = SliderBounds.Height;

            switch (DrawStyle)
            {
                case ColorDrawStyle.Hue:
                    SliderPosition = factor - (factor * HSB.Hue).Round();
                    break;
                case ColorDrawStyle.Saturation:
                    SliderPosition = factor - (factor * HSB.Saturation).Round();
                    break;
                case ColorDrawStyle.Brightness:
                    SliderPosition = factor - (factor * HSB.Brightness).Round();
                    break;
                case ColorDrawStyle.Red:
                    SliderPosition = factor - (factor * RGB.R / 255.0).Round();
                    break;
                case ColorDrawStyle.Green:
                    SliderPosition = factor - (factor * RGB.G / 255.0).Round();
                    break;
                case ColorDrawStyle.Blue:
                    SliderPosition = factor - (factor * RGB.B / 255.0).Round();
                    break;
            }
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            SliderBounds = new Rectangle(10, 4, Width - 20, Height - 8);
            Reset();

            switch (DrawStyle)
            {
                case ColorDrawStyle.Hue:
                    PaintHue(e.Graphics);
                    break;
                case ColorDrawStyle.Saturation:
                    PaintSaturation(e.Graphics);
                    break;
                case ColorDrawStyle.Brightness:
                    PaintBrightness(e.Graphics);
                    break;
                case ColorDrawStyle.Red:
                    PaintRed(e.Graphics);
                    break;
                case ColorDrawStyle.Green:
                    PaintGreen(e.Graphics);
                    break;
                case ColorDrawStyle.Blue:
                    PaintBlue(e.Graphics);
                    break;
            }

            PaintBorder(e.Graphics);
            DrawSlider(e.Graphics, false);

            base.OnPaint(e);
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            OnMouseMove(e);
            base.OnMouseDown(e);
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                SliderPosition = Math.Max(0, Math.Min(e.Y - SliderBounds.Top, SliderBounds.Height));
                double factor = Math.Min(Math.Max(0, SliderPosition / SliderBounds.Height), SliderBounds.Height);

                switch (DrawStyle)
                {
                    case ColorDrawStyle.Hue:
                        HSB.SetValues(1.0 - factor, HSB.Saturation, HSB.Brightness);
                        break;
                    case ColorDrawStyle.Saturation:
                        HSB.SetValues(HSB.Hue, 1.0 - factor, HSB.Brightness);
                        break;
                    case ColorDrawStyle.Brightness:
                        HSB.SetValues(HSB.Hue, HSB.Saturation, 1.0 - factor);
                        break;
                    case ColorDrawStyle.Red:
                        Color.FromArgb(255 - (255 * factor).Round(), RGB.G, RGB.B).ToHsb().CopyTo(HSB);
                        break;
                    case ColorDrawStyle.Green:
                        Color.FromArgb(RGB.R, 255 - (255 * factor).Round(), RGB.B).ToHsb().CopyTo(HSB);
                        break;
                    case ColorDrawStyle.Blue:
                        Color.FromArgb(RGB.R, RGB.G, 255 - (255 * factor).Round()).ToHsb().CopyTo(HSB);
                        break;
                }
            }

            base.OnMouseMove(e);
        }

        protected void DrawSlider(Graphics g, bool unconditional)
        {
            g.SmoothingMode = SmoothingMode.AntiAlias;
            g.InterpolationMode = InterpolationMode.HighQualityBicubic;

            using (var path = new GraphicsPath())
            {
                float top = Math.Min(SliderPosition + SliderBounds.Top, SliderBounds.Height + SliderBounds.Top - 1);

                path.StartFigure();
                path.AddLine(8, top - 4, 15, top);
                path.AddLine(15, top, 8, top + 4);
                path.CloseFigure();

                path.StartFigure();
                path.AddLine(Width - 8, top - 4, Width - 15, top);
                path.AddLine(Width - 15, top, Width - 8, top + 4);
                path.CloseFigure();

                g.TryFillPath(SliderBrush, path);
                g.TryDrawPath(SliderPen, path);
            }
        }

        void PaintHue(Graphics g)
        {
            var e = new HSB(0.0, 1.0, 1.0);

            for (float i = 0; i < SliderBounds.Height; i++)
            {
                e.Hue = 1.0 - (i / SliderBounds.Height);

                using (var pen = new Pen(e.ToRgb()))
                {
                    g.DrawLine(pen, SliderBounds.Left + 1, i + SliderBounds.Top, SliderBounds.Right - 1, i + SliderBounds.Top);
                }
            }
        }

        void PaintSaturation(Graphics g)
        {
            var e = new HSB();

            for (float i = 0; i < SliderBounds.Height; i++)
            {
                e.Saturation = 1.0 - (i / SliderBounds.Height);

                using (var pen = new Pen(e.ToRgb()))
                {
                    g.DrawLine(pen, SliderBounds.Left + 1, i + SliderBounds.Top, SliderBounds.Right - 1, i + SliderBounds.Top);
                }
            }
        }

        void PaintBrightness(Graphics g)
        {
            var e = new HSB();

            for (float i = 0; i < SliderBounds.Height; i++)
            {
                e.Brightness = 1.0 - (i / SliderBounds.Height);

                using (var pen = new Pen(e.ToRgb()))
                {
                    g.DrawLine(pen, SliderBounds.Left + 1, i + SliderBounds.Top, SliderBounds.Right - 1, i + SliderBounds.Top);
                }
            }
        }

        void PaintRed(Graphics g)
        {
            for (float i = 0; i < SliderBounds.Height; i++)
            {
                int red = 255 - (255.0 * (i / SliderBounds.Height)).Round();

                using (var pen = new Pen(Color.FromArgb(red, RGB.G, RGB.B)))
                {
                    g.DrawLine(pen, SliderBounds.Left + 1, i + SliderBounds.Top, SliderBounds.Right - 1, i + SliderBounds.Top);
                }
            }
        }

        void PaintGreen(Graphics g)
        {
            for (float i = 0; i < SliderBounds.Height; i++)
            {
                int green = 255 - (255.0 * (i / SliderBounds.Height)).Round();

                using (var pen = new Pen(Color.FromArgb(RGB.R, green, RGB.B)))
                {
                    g.DrawLine(pen, SliderBounds.Left + 1, i + SliderBounds.Top, SliderBounds.Right - 1, i + SliderBounds.Top);
                }
            }
        }

        void PaintBlue(Graphics g)
        {
            for (float i = 0; i < SliderBounds.Height; i++)
            {
                int blue = 255 - (255.0 * (i / SliderBounds.Height)).Round();

                using (var pen = new Pen(Color.FromArgb(RGB.R, RGB.G, blue)))
                {
                    g.DrawLine(pen, SliderBounds.Left + 1, i + SliderBounds.Top, SliderBounds.Right - 1, i + SliderBounds.Top);
                }
            }
        }

        void PaintBorder(Graphics g)
        {
            ControlPaint.DrawBorder(g, SliderBounds, SystemColors.ButtonShadow, ButtonBorderStyle.Solid);
        }
    }
}
