//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class ColorBoxEdit : PictureBox
    {
        public ColorBoxEdit()
        {
            DrawStyle = ColorDrawStyle.Hue;
            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);

            HSB = new HSB(1.0, 1.0, 1.0);
            RGB = HSB.ToRgb();
            HSB.Changed += OnHSBValueChanged;

            MarkerPen = new Pen(Color.White) { LineJoin = LineJoin.Round };
            MarkerBorderPen = new Pen(ColorTranslator.FromHtml("#7f8c8d"), 3.6F) { LineJoin = LineJoin.Round };
        }

        protected readonly Pen MarkerPen;
        protected readonly Pen MarkerBorderPen;

        public Image Canvas
        {
            get { return Image ?? (Image = BitmapExtensions.NewImage(Width, Height)); }
        }

        public readonly HSB HSB;
        public Color RGB;

        public ColorDrawStyle DrawStyle
        {
            get;
            set;
        }

        protected void OnHSBValueChanged()
        {
            RGB = HSB.ToRgb();
            Invalidate();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);

            switch (DrawStyle)
            {
                case ColorDrawStyle.Hue:
                    PaintHue(e.Graphics);
                    break;
                case ColorDrawStyle.Saturation:
                    PaintSaturation(e.Graphics);
                    break;
                case ColorDrawStyle.Brightness:
                    PaintBrightness(e.Graphics);
                    break;
                case ColorDrawStyle.Red:
                    PaintRed(e.Graphics);
                    break;
                case ColorDrawStyle.Green:
                    PaintGreen(e.Graphics);
                    break;
                case ColorDrawStyle.Blue:
                    PaintBlue(e.Graphics);
                    break;
            }

            PaintBorder(e.Graphics);
            PaintMarker(e.Graphics);
        }

        protected void PaintMarker(Graphics g)
        {
            int x = 0;
            int y = 0;

            switch (DrawStyle)
            {
                case ColorDrawStyle.Hue:
                    x = (Width * HSB.Saturation).Round();
                    y = (Height * (1.0 - HSB.Brightness)).Round();
                    break;
                case ColorDrawStyle.Saturation:
                    x = (Width * HSB.Hue).Round();
                    y = (Height * (1.0 - HSB.Brightness)).Round();
                    break;
                case ColorDrawStyle.Brightness:
                    x = (Width * HSB.Hue).Round();
                    y = (Height * (1.0 - HSB.Saturation)).Round();
                    break;
                case ColorDrawStyle.Red:
                    x = (Width * RGB.B / 255.0).Round();
                    y = (Height * (1.0 - RGB.G / 255.0)).Round();
                    break;
                case ColorDrawStyle.Green:
                    x = (Width * RGB.B / 255.0).Round();
                    y = (Height * (1.0 - RGB.R / 255.0)).Round();
                    break;
                case ColorDrawStyle.Blue:
                    x = (Width * RGB.R / 255.0).Round();
                    y = (Height * (1.0 - RGB.G / 255.0)).Round();
                    break;
            }

            x = Math.Min(Math.Max(0, x), Width);
            y = Math.Min(Math.Max(0, y), Height);

            g.SmoothingMode = SmoothingMode.AntiAlias;
            g.CompositingQuality = CompositingQuality.HighQuality;
            g.InterpolationMode = InterpolationMode.HighQualityBicubic;
            g.DrawEllipse(MarkerBorderPen, x - 4, y - 4, 8, 8);
            g.DrawEllipse(MarkerPen, x - 4, y - 4, 8, 8);
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);
            OnMouseMove(e);
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                double x = Math.Min(Math.Max(0, e.X), Width);
                double y = Math.Min(Math.Max(0, e.Y), Height);

                switch (DrawStyle)
                {
                    case ColorDrawStyle.Hue:
                        HSB.SetValues(HSB.Hue, x / Width, 1.0 - y / Height);
                        break;
                    case ColorDrawStyle.Saturation:
                        HSB.SetValues(x / Width, HSB.Saturation, 1.0 - y / Height);
                        break;
                    case ColorDrawStyle.Brightness:
                        HSB.SetValues(x / Width, 1.0 - y / Height, HSB.Brightness);
                        break;
                    case ColorDrawStyle.Red:
                        Color.FromArgb(RGB.R, (255 * (1.0 - y / Height)).Round(), (255 * x / Width).Round()).ToHsb().CopyTo(HSB);
                        break;
                    case ColorDrawStyle.Green:
                        Color.FromArgb((255 * (1.0 - y / Height)).Round(), RGB.G, (255 * x / Width).Round()).ToHsb().CopyTo(HSB);
                        break;
                    case ColorDrawStyle.Blue:
                        Color.FromArgb((255 * x / Width).Round(), (255 * (1.0 - y / Height)).Round(), RGB.B).ToHsb().CopyTo(HSB);
                        break;
                }
            }

            base.OnMouseMove(e);
        }

        void PaintHue(Graphics g)
        {
            var hslStart = new HSB();
            var hslEnd = new HSB();

            hslStart.Hue = HSB.Hue;
            hslEnd.Hue = HSB.Hue;

            hslStart.Saturation = 0.0;
            hslEnd.Saturation = 1.0;

            var rect = new RectangleF(0, 0, Width, 1);

            for (float i = 0; i < Height; i++)
            {
                hslStart.Brightness = 1.0 - (i / Height);
                hslEnd.Brightness = hslStart.Brightness;

                using (var brush = new LinearGradientBrush(rect, hslStart.ToRgb(), hslEnd.ToRgb(), 0, false))
                {
                    g.FillRectangle(brush, 0, i, rect.Width, 1);
                }
            }
        }

        void PaintSaturation(Graphics g)
        {
            var hslStart = new HSB();
            var hslEnd = new HSB();

            hslStart.Saturation = HSB.Saturation;
            hslEnd.Saturation = HSB.Saturation;

            hslStart.Brightness = 1.0;
            hslEnd.Brightness = 0.0;

            for (float i = 0; i < Width; i++)
            {
                var rect = new RectangleF(i, 0, 1, Height);

                hslStart.Hue = i / Width;
                hslEnd.Hue = hslStart.Hue;

                using (var brush = new LinearGradientBrush(rect, hslStart.ToRgb(), hslEnd.ToRgb(), 90, false))
                {
                    g.FillRectangle(brush, i, 0, 1, Height);
                }
            }
        }

        void PaintBrightness(Graphics g)
        {
            var hslStart = new HSB(1.0, 1.0, HSB.Brightness);
            var hslEnd = new HSB(1.0, 0.0, HSB.Brightness);

            for (float i = 0; i < Width; i++)
            {
                var rect = new RectangleF(i, 0, 1, Height);

                hslStart.Hue = i / Width;
                hslEnd.Hue = hslStart.Hue;

                using (var brush = new LinearGradientBrush(rect, hslStart.ToRgb(), hslEnd.ToRgb(), 90, false))
                {
                    g.FillRectangle(brush, i, 0, 1, Height);
                }
            }
        }

        void PaintRed(Graphics g)
        {
            int red = RGB.R;
            var rect = new Rectangle(0, 0, Width, 1);

            for (float i = 0; i < Height; i++)
            {
                int green = (255.0 - (255.0 * (i / Height))).Round();

                using (var brush = new LinearGradientBrush(rect, Color.FromArgb(red, green, 0), Color.FromArgb(red, green, 255), 0, false))
                {
                    g.FillRectangle(brush, 0, i, Width, 1);
                }
            }
        }

        void PaintGreen(Graphics g)
        {
            int green = RGB.G;
            var rect = new Rectangle(0, 0, Width, 1);

            for (float i = 0; i < Height; i++)
            {
                int red = (255.0 - (255.0 * (i / Height))).Round();

                using (var brush = new LinearGradientBrush(rect, Color.FromArgb(red, green, 0), Color.FromArgb(red, green, 255), 0, false))
                {
                    g.FillRectangle(brush, 0, i, Width, 1);
                }
            }
        }

        void PaintBlue(Graphics g)
        {
            int blue = RGB.B;
            var rect = new Rectangle(0, 0, Width, 1);

            for (float i = 0; i < Height; i++)
            {
                int green = (255.0 - (255.0 * (i / Height))).Round();

                using (var brush = new LinearGradientBrush(rect, Color.FromArgb(0, green, blue), Color.FromArgb(255, green, blue), 0, false))
                {
                    g.FillRectangle(brush, 0, i, Width, 1);
                }
            }
        }

        void PaintBorder(Graphics g)
        {
            ControlPaint.DrawBorder(g, new Rectangle(0, 0, Width, Height), SystemColors.ButtonShadow, ButtonBorderStyle.Solid);
        }
    }
}
