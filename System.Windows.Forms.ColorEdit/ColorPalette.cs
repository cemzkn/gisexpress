//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection;

namespace System.Windows.Forms
{
    [ToolboxItem(false)]
    public class ColorPalette : PictureBox
    {
        static ColorPalette()
        {
            Assembly assembly = typeof(ColorPalette).Assembly;

            Themes = new SortedDictionary<string, string>();

            foreach (string resourceName in assembly.GetManifestResourceNames())
            {
                if (resourceName.EndsWith("Colors.xml"))
                {
                    string[] pairs = resourceName.Split('.');
                    string key = pairs[pairs.Length - 2];

                    Themes.Add(key, resourceName);
                }
            }
        }

        public ColorPalette()
        {
            //LicenseManager.Validate(GetType());

            Colors = new List<Color>();
            ColorGroups = new ColorGroupCollection();

            SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
        }

        public event Action<Color> SelectedColorChanged;

        public static readonly SortedDictionary<string, string> Themes;

        protected Color CurrentColor;
        protected Point CurrentLocation;
        protected Rectangle CurrentRectangle;
        protected string CurrentThemeName;
        protected readonly List<Color> Colors;
        protected readonly ColorGroupCollection ColorGroups;

        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ThemeName
        {
            get { return CurrentThemeName; }
            set { LoadColors(CurrentThemeName = value); }
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            PaintPalette(e, out CurrentColor, out CurrentRectangle);

            if (CurrentRectangle.IsEmpty == false)
            {
                ControlHelper.DrawEnterRect(e.Graphics, CurrentRectangle);
            }

            base.OnPaint(e);
        }

        protected void PaintPalette(PaintEventArgs e, out Color color, out Rectangle colorRect)
        {
            color = Color.Empty;
            colorRect = Rectangle.Empty;

            if (Colors.Count == 0)
            {
                LoadColors(CurrentThemeName);
            }

            if (Colors.Count > 0)
            {
                int offset = 0;
                int numColumns = ColorGroups.First().ColumnCount;
                int numRows = ColorGroups.Sum(g => g.RowCount);

                var bounds = new Rectangle(0, 0, Math.Min(24, (Width - 1) / numColumns), Math.Min(16, (Height - ColorGroups.Sum(i => i.Height) - 1) / numRows));
                var rect = new Rectangle(0, 0, bounds.Width, bounds.Height);

                int paddingLeft = (Width - (bounds.Width * numColumns)) / 2 - 1;
                int paddingTop = (Height - (bounds.Height * numRows + ColorGroups.Sum(i => i.Height))) / 2 - 1;

                foreach (ColorGroup item in ColorGroups)
                {
                    if (!string.IsNullOrEmpty(item.Name))
                    {
                        var origin = new Point(paddingLeft, paddingTop + offset * bounds.Height + ColorGroups.Padding / 2);
                        TextRenderer.DrawText(e.Graphics, Localization.Localize(item.Name), ColorGroups.Font, origin, ColorGroups.FontColor);
                    }

                    paddingTop += item.Height;

                    for (int r = offset; r < item.RowCount + offset; r++)
                    {
                        for (int c = 0; c < numColumns; c++)
                        {
                            bounds.X = paddingLeft + c * bounds.Width;
                            bounds.Y = paddingTop + r * bounds.Height;

                            rect.X = bounds.Left + 3;
                            rect.Y = bounds.Y;
                            rect.Width = bounds.Width - 6;
                            rect.Height = bounds.Height + 1;

                            using (var brush = new SolidBrush(Colors[r * numColumns + c]))
                            {
                                e.Graphics.FillRectangle(brush, rect);
                            }

                            e.Graphics.DrawLine(SystemPens.ButtonShadow, rect.Left, rect.Top, rect.Left, rect.Bottom);
                            e.Graphics.DrawLine(SystemPens.ButtonShadow, rect.Right, rect.Top, rect.Right, rect.Bottom);

                            if (r == offset)
                            {
                                e.Graphics.DrawLine(SystemPens.ButtonShadow, rect.Left, rect.Top, rect.Right, rect.Top);
                            }

                            if (r == (offset + item.RowCount) - 1)
                            {
                                e.Graphics.DrawLine(SystemPens.ButtonShadow, rect.Left, rect.Bottom, rect.Right, rect.Bottom);
                            }

                            if (rect.Contains(CurrentLocation))
                            {
                                colorRect = rect;
                                color = Colors[r * numColumns + c];
                            }
                        }
                    }

                    offset += item.RowCount;
                }
            }
        }

        protected override void OnLostFocus(EventArgs e)
        {
            CurrentLocation = Point.Empty;
            base.OnLostFocus(e);
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            CurrentLocation = Point.Empty;
            base.OnMouseLeave(e);
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            CurrentLocation = e.Location;
            Invalidate();

            base.OnMouseMove(e);
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            if (!CurrentRectangle.IsEmpty)
            {
                SelectedColorChanged.InvokeSafely(CurrentColor);
            }

            base.OnMouseDown(e);
        }

        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);
            Invalidate();
        }

        protected void LoadColors(string themeName)
        {
            Colors.Clear();
            Colors.AddRange(GetColors(themeName));

            Invalidate();
        }

        protected IEnumerable<Color> GetColors(string themeName)
        {
            using (var data = new DataSet())
            {
                using (var stream = GetType().Assembly.GetResourceStreams(Themes[themeName]).First())
                {
                    data.ReadXml(stream);
                }

                if (data.Tables.Contains("Group"))
                {
                    ColorGroups.Clear();

                    using (var dataSource = data.Tables["Group"])
                    {
                        using (DataTableReader reader = dataSource.CreateDataReader())
                        {
                            while (reader.Read())
                            {
                                var group = new ColorGroup();

                                if (dataSource.Columns.Contains("Name"))
                                {
                                    group.Name = reader["Name"] as string;
                                }

                                int.TryParse((string)reader["RowCount"], out group.RowCount);
                                int.TryParse((string)reader["ColumnCount"], out group.ColumnCount);

                                ColorGroups.Add(group);
                            }
                        }
                    }
                }

                if (data.Tables.Contains("Color"))
                {
                    using (DataTableReader reader = data.Tables["Color"].CreateDataReader())
                    {
                        while (reader.Read())
                        {
                            yield return ColorTranslator.FromHtml(reader.GetString(0));
                        }
                    }
                }
            }
        }

        protected class ColorGroup
        {
            public string Name;
            public int RowCount;
            public int ColumnCount;
            public int Height;
        }

        protected class ColorGroupCollection : Collection<ColorGroup>
        {
            public ColorGroupCollection()
            {
                Font = ApplicationAppereance.Fonts.DefaultFont;
                FontColor = ColorTranslator.FromHtml("#333333");
            }

            public readonly Font Font;
            public readonly Color FontColor;

            public int Padding
            {
                get { return 12; }
            }

            public int FontHeight
            {
                get { return (int)Math.Floor(Font.GetHeight()) + Padding / 2; }
            }

            protected override void ClearItems()
            {
                base.ClearItems();
            }

            protected override void InsertItem(int index, ColorGroup item)
            {
                if (string.IsNullOrEmpty(item.Name))
                {
                    item.Height = index == 0 ? 0 : Padding;
                }
                else
                {
                    item.Height = FontHeight + Padding / 2;
                }

                base.InsertItem(index, item);
            }
        }
    }
}
