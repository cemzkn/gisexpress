//////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright © GISExpress 2015-2022. All Rights Reserved.
//  
//  GISExpress .NET API and Component Library
//  
//  The entire contents of this file is protected by local and International Copyright Laws.
//  Unauthorized reproduction, reverse-engineering, and distribution of all or any portion of
//  the code contained in this file is strictly prohibited and may result in severe civil and 
//  criminal penalties and will be prosecuted to the maximum extent possible under the law.
//  
//  RESTRICTIONS
//  
//  THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES ARE CONFIDENTIAL AND PROPRIETARY TRADE SECRETS OF GISExpress
//  THE REGISTERED DEVELOPER IS LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET COMPONENTS AS PART OF AN EXECUTABLE PROGRAM ONLY.
//  
//  THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE
//  COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT
//  AND PERMISSION FROM GISExpress
//  
//  CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON ADDITIONAL RESTRICTIONS.
//  
//  Warning: This content was generated by GISExpress tools.
//  Changes to this content may cause incorrect behavior and will be lost if the content is regenerated.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

using System.ComponentModel;
using System.CoordinateSystems;
using System.Drawing;
using System.Geometries;
using System.Resources;
using System.Runtime.InteropServices;
using System.Workspace;
using System.Workspace.Drawing;
using System.Xml;

namespace System.Windows.Modules.GoogleMap
{
    [Guid("BFD93673-890D-4938-A514-BB86A2FE6133")]
    internal class GoogleMapLayer : MapLayer
    {
        public GoogleMapLayer(XmlDocument document) : base(string.Empty, "GoogleMapLayer", string.Empty, document)
        {
            Provider = new GoogleMapTileProvider();
        }

        readonly GoogleMapTileProvider Provider;

        public override string Name
        {
            get
            {
                if (string.IsNullOrEmpty(base.Name))
                {
                    return Localization.Localize("MapLayer(BFD93673-890D-4938-A514-BB86A2FE6133).DisplayName");
                }

                return base.Name;
            }
            set
            {
                base.Name = value;
            }
        }

        [LocalizedCategory(Categories.Appearance)]
        [LocalizedDisplayName("GoogleMapType")]
        public GoogleMapType MapType
        {
            get { return Provider.MapType; }
            set
            {
                if (Provider.MapType == value)
                {
                    return;
                }

                Provider.MapType = value;

                if (Workspace.HasValue())
                {
                    Workspace.Render();
                }
            }
        }

        protected override ICoordinateSystem OnFindCoordinateSystem()
        {
            return Provider.CoordinateSystem;
        }

        public override IEnvelope GetBounds()
        {
            return Provider.WorldBounds.Transform(Transform);
        }

        protected override bool OnRenderFeatures(MapCanvas canvas, IEnvelope bounds)
        {
            if (canvas.HasValue() && canvas.Graphics.HasValue())
            {
                foreach (MapTile item in Provider.GetTiles(bounds, canvas.Graphics.Transform.PixelSize))
                {
                    if (Workspace.CancellationPending)
                    {
                        return false;
                    }

                    using (item)
                    {
                        RectangleF target = canvas.Graphics.Transform.WorldToClient(item.Bounds);

                        using (var img = BitmapExtensions.NewImage(item.Image, target.Width.Ceiling() + 1, target.Height.Ceiling() + 1))
                        {
                            canvas.Graphics.Draw(img, target.X.Floor(), target.Y.Floor());
                        }
                    }

                    Workspace.ReportProgress();
                }

                return true;
            }

            return false;
        }

        protected override void OnPaintIcon(PaintLayerIconEventArgs e)
        {
            using (var img = Images048.GoogleMaps.ReSize(16))
            {
                e.Graphics.DrawImage(img, 0, 0);
            }
        }

        //protected override void OnReadXml(XmlReader reader, string name)
        //{
        //    switch (name)
        //    {
        //        case "Layers":
        //            MapType = Enums.Parse<GoogleMapType>(reader.ReadString());
        //            break;
        //    }

        //    base.OnReadXml(reader, name);
        //}

        //protected override void OnWriteXml(XmlWriter writer)
        //{
        //    base.OnWriteXml(writer);
        //    writer.WriteElementString("Layers", Enums.GetName(MapType));
        //}
    }
}
